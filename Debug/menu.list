
menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08080000  08080000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047ac  080801ac  080801ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08084958  08084958  00005958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08084b68  08084b68  0000602c  2**0
                  CONTENTS
  4 .ARM          00000008  08084b68  08084b68  00005b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08084b70  08084b70  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08084b70  08084b70  00005b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08084b74  08084b74  00005b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08084b78  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  2000002c  08084ba4  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  08084ba4  00006548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de68  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002868  00000000  00000000  00013ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00016730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008dc  00000000  00000000  000172d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297e2  00000000  00000000  00017bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102a0  00000000  00000000  00041396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f993c  00000000  00000000  00051636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014af72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d9c  00000000  00000000  0014afb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0014dd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080801ac <__do_global_dtors_aux>:
 80801ac:	b510      	push	{r4, lr}
 80801ae:	4c05      	ldr	r4, [pc, #20]	@ (80801c4 <__do_global_dtors_aux+0x18>)
 80801b0:	7823      	ldrb	r3, [r4, #0]
 80801b2:	b933      	cbnz	r3, 80801c2 <__do_global_dtors_aux+0x16>
 80801b4:	4b04      	ldr	r3, [pc, #16]	@ (80801c8 <__do_global_dtors_aux+0x1c>)
 80801b6:	b113      	cbz	r3, 80801be <__do_global_dtors_aux+0x12>
 80801b8:	4804      	ldr	r0, [pc, #16]	@ (80801cc <__do_global_dtors_aux+0x20>)
 80801ba:	f3af 8000 	nop.w
 80801be:	2301      	movs	r3, #1
 80801c0:	7023      	strb	r3, [r4, #0]
 80801c2:	bd10      	pop	{r4, pc}
 80801c4:	2000002c 	.word	0x2000002c
 80801c8:	00000000 	.word	0x00000000
 80801cc:	08084940 	.word	0x08084940

080801d0 <frame_dummy>:
 80801d0:	b508      	push	{r3, lr}
 80801d2:	4b03      	ldr	r3, [pc, #12]	@ (80801e0 <frame_dummy+0x10>)
 80801d4:	b11b      	cbz	r3, 80801de <frame_dummy+0xe>
 80801d6:	4903      	ldr	r1, [pc, #12]	@ (80801e4 <frame_dummy+0x14>)
 80801d8:	4803      	ldr	r0, [pc, #12]	@ (80801e8 <frame_dummy+0x18>)
 80801da:	f3af 8000 	nop.w
 80801de:	bd08      	pop	{r3, pc}
 80801e0:	00000000 	.word	0x00000000
 80801e4:	20000030 	.word	0x20000030
 80801e8:	08084940 	.word	0x08084940

080801ec <strlen>:
 80801ec:	4603      	mov	r3, r0
 80801ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80801f2:	2a00      	cmp	r2, #0
 80801f4:	d1fb      	bne.n	80801ee <strlen+0x2>
 80801f6:	1a18      	subs	r0, r3, r0
 80801f8:	3801      	subs	r0, #1
 80801fa:	4770      	bx	lr

080801fc <__aeabi_uldivmod>:
 80801fc:	b953      	cbnz	r3, 8080214 <__aeabi_uldivmod+0x18>
 80801fe:	b94a      	cbnz	r2, 8080214 <__aeabi_uldivmod+0x18>
 8080200:	2900      	cmp	r1, #0
 8080202:	bf08      	it	eq
 8080204:	2800      	cmpeq	r0, #0
 8080206:	bf1c      	itt	ne
 8080208:	f04f 31ff 	movne.w	r1, #4294967295
 808020c:	f04f 30ff 	movne.w	r0, #4294967295
 8080210:	f000 b96a 	b.w	80804e8 <__aeabi_idiv0>
 8080214:	f1ad 0c08 	sub.w	ip, sp, #8
 8080218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808021c:	f000 f806 	bl	808022c <__udivmoddi4>
 8080220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8080224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8080228:	b004      	add	sp, #16
 808022a:	4770      	bx	lr

0808022c <__udivmoddi4>:
 808022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080230:	9d08      	ldr	r5, [sp, #32]
 8080232:	460c      	mov	r4, r1
 8080234:	2b00      	cmp	r3, #0
 8080236:	d14e      	bne.n	80802d6 <__udivmoddi4+0xaa>
 8080238:	4694      	mov	ip, r2
 808023a:	458c      	cmp	ip, r1
 808023c:	4686      	mov	lr, r0
 808023e:	fab2 f282 	clz	r2, r2
 8080242:	d962      	bls.n	808030a <__udivmoddi4+0xde>
 8080244:	b14a      	cbz	r2, 808025a <__udivmoddi4+0x2e>
 8080246:	f1c2 0320 	rsb	r3, r2, #32
 808024a:	4091      	lsls	r1, r2
 808024c:	fa20 f303 	lsr.w	r3, r0, r3
 8080250:	fa0c fc02 	lsl.w	ip, ip, r2
 8080254:	4319      	orrs	r1, r3
 8080256:	fa00 fe02 	lsl.w	lr, r0, r2
 808025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 808025e:	fa1f f68c 	uxth.w	r6, ip
 8080262:	fbb1 f4f7 	udiv	r4, r1, r7
 8080266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 808026a:	fb07 1114 	mls	r1, r7, r4, r1
 808026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8080272:	fb04 f106 	mul.w	r1, r4, r6
 8080276:	4299      	cmp	r1, r3
 8080278:	d90a      	bls.n	8080290 <__udivmoddi4+0x64>
 808027a:	eb1c 0303 	adds.w	r3, ip, r3
 808027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8080282:	f080 8112 	bcs.w	80804aa <__udivmoddi4+0x27e>
 8080286:	4299      	cmp	r1, r3
 8080288:	f240 810f 	bls.w	80804aa <__udivmoddi4+0x27e>
 808028c:	3c02      	subs	r4, #2
 808028e:	4463      	add	r3, ip
 8080290:	1a59      	subs	r1, r3, r1
 8080292:	fa1f f38e 	uxth.w	r3, lr
 8080296:	fbb1 f0f7 	udiv	r0, r1, r7
 808029a:	fb07 1110 	mls	r1, r7, r0, r1
 808029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80802a2:	fb00 f606 	mul.w	r6, r0, r6
 80802a6:	429e      	cmp	r6, r3
 80802a8:	d90a      	bls.n	80802c0 <__udivmoddi4+0x94>
 80802aa:	eb1c 0303 	adds.w	r3, ip, r3
 80802ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80802b2:	f080 80fc 	bcs.w	80804ae <__udivmoddi4+0x282>
 80802b6:	429e      	cmp	r6, r3
 80802b8:	f240 80f9 	bls.w	80804ae <__udivmoddi4+0x282>
 80802bc:	4463      	add	r3, ip
 80802be:	3802      	subs	r0, #2
 80802c0:	1b9b      	subs	r3, r3, r6
 80802c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80802c6:	2100      	movs	r1, #0
 80802c8:	b11d      	cbz	r5, 80802d2 <__udivmoddi4+0xa6>
 80802ca:	40d3      	lsrs	r3, r2
 80802cc:	2200      	movs	r2, #0
 80802ce:	e9c5 3200 	strd	r3, r2, [r5]
 80802d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80802d6:	428b      	cmp	r3, r1
 80802d8:	d905      	bls.n	80802e6 <__udivmoddi4+0xba>
 80802da:	b10d      	cbz	r5, 80802e0 <__udivmoddi4+0xb4>
 80802dc:	e9c5 0100 	strd	r0, r1, [r5]
 80802e0:	2100      	movs	r1, #0
 80802e2:	4608      	mov	r0, r1
 80802e4:	e7f5      	b.n	80802d2 <__udivmoddi4+0xa6>
 80802e6:	fab3 f183 	clz	r1, r3
 80802ea:	2900      	cmp	r1, #0
 80802ec:	d146      	bne.n	808037c <__udivmoddi4+0x150>
 80802ee:	42a3      	cmp	r3, r4
 80802f0:	d302      	bcc.n	80802f8 <__udivmoddi4+0xcc>
 80802f2:	4290      	cmp	r0, r2
 80802f4:	f0c0 80f0 	bcc.w	80804d8 <__udivmoddi4+0x2ac>
 80802f8:	1a86      	subs	r6, r0, r2
 80802fa:	eb64 0303 	sbc.w	r3, r4, r3
 80802fe:	2001      	movs	r0, #1
 8080300:	2d00      	cmp	r5, #0
 8080302:	d0e6      	beq.n	80802d2 <__udivmoddi4+0xa6>
 8080304:	e9c5 6300 	strd	r6, r3, [r5]
 8080308:	e7e3      	b.n	80802d2 <__udivmoddi4+0xa6>
 808030a:	2a00      	cmp	r2, #0
 808030c:	f040 8090 	bne.w	8080430 <__udivmoddi4+0x204>
 8080310:	eba1 040c 	sub.w	r4, r1, ip
 8080314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8080318:	fa1f f78c 	uxth.w	r7, ip
 808031c:	2101      	movs	r1, #1
 808031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8080322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8080326:	fb08 4416 	mls	r4, r8, r6, r4
 808032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808032e:	fb07 f006 	mul.w	r0, r7, r6
 8080332:	4298      	cmp	r0, r3
 8080334:	d908      	bls.n	8080348 <__udivmoddi4+0x11c>
 8080336:	eb1c 0303 	adds.w	r3, ip, r3
 808033a:	f106 34ff 	add.w	r4, r6, #4294967295
 808033e:	d202      	bcs.n	8080346 <__udivmoddi4+0x11a>
 8080340:	4298      	cmp	r0, r3
 8080342:	f200 80cd 	bhi.w	80804e0 <__udivmoddi4+0x2b4>
 8080346:	4626      	mov	r6, r4
 8080348:	1a1c      	subs	r4, r3, r0
 808034a:	fa1f f38e 	uxth.w	r3, lr
 808034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8080352:	fb08 4410 	mls	r4, r8, r0, r4
 8080356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808035a:	fb00 f707 	mul.w	r7, r0, r7
 808035e:	429f      	cmp	r7, r3
 8080360:	d908      	bls.n	8080374 <__udivmoddi4+0x148>
 8080362:	eb1c 0303 	adds.w	r3, ip, r3
 8080366:	f100 34ff 	add.w	r4, r0, #4294967295
 808036a:	d202      	bcs.n	8080372 <__udivmoddi4+0x146>
 808036c:	429f      	cmp	r7, r3
 808036e:	f200 80b0 	bhi.w	80804d2 <__udivmoddi4+0x2a6>
 8080372:	4620      	mov	r0, r4
 8080374:	1bdb      	subs	r3, r3, r7
 8080376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 808037a:	e7a5      	b.n	80802c8 <__udivmoddi4+0x9c>
 808037c:	f1c1 0620 	rsb	r6, r1, #32
 8080380:	408b      	lsls	r3, r1
 8080382:	fa22 f706 	lsr.w	r7, r2, r6
 8080386:	431f      	orrs	r7, r3
 8080388:	fa20 fc06 	lsr.w	ip, r0, r6
 808038c:	fa04 f301 	lsl.w	r3, r4, r1
 8080390:	ea43 030c 	orr.w	r3, r3, ip
 8080394:	40f4      	lsrs	r4, r6
 8080396:	fa00 f801 	lsl.w	r8, r0, r1
 808039a:	0c38      	lsrs	r0, r7, #16
 808039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80803a0:	fbb4 fef0 	udiv	lr, r4, r0
 80803a4:	fa1f fc87 	uxth.w	ip, r7
 80803a8:	fb00 441e 	mls	r4, r0, lr, r4
 80803ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80803b0:	fb0e f90c 	mul.w	r9, lr, ip
 80803b4:	45a1      	cmp	r9, r4
 80803b6:	fa02 f201 	lsl.w	r2, r2, r1
 80803ba:	d90a      	bls.n	80803d2 <__udivmoddi4+0x1a6>
 80803bc:	193c      	adds	r4, r7, r4
 80803be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80803c2:	f080 8084 	bcs.w	80804ce <__udivmoddi4+0x2a2>
 80803c6:	45a1      	cmp	r9, r4
 80803c8:	f240 8081 	bls.w	80804ce <__udivmoddi4+0x2a2>
 80803cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80803d0:	443c      	add	r4, r7
 80803d2:	eba4 0409 	sub.w	r4, r4, r9
 80803d6:	fa1f f983 	uxth.w	r9, r3
 80803da:	fbb4 f3f0 	udiv	r3, r4, r0
 80803de:	fb00 4413 	mls	r4, r0, r3, r4
 80803e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80803e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80803ea:	45a4      	cmp	ip, r4
 80803ec:	d907      	bls.n	80803fe <__udivmoddi4+0x1d2>
 80803ee:	193c      	adds	r4, r7, r4
 80803f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80803f4:	d267      	bcs.n	80804c6 <__udivmoddi4+0x29a>
 80803f6:	45a4      	cmp	ip, r4
 80803f8:	d965      	bls.n	80804c6 <__udivmoddi4+0x29a>
 80803fa:	3b02      	subs	r3, #2
 80803fc:	443c      	add	r4, r7
 80803fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8080402:	fba0 9302 	umull	r9, r3, r0, r2
 8080406:	eba4 040c 	sub.w	r4, r4, ip
 808040a:	429c      	cmp	r4, r3
 808040c:	46ce      	mov	lr, r9
 808040e:	469c      	mov	ip, r3
 8080410:	d351      	bcc.n	80804b6 <__udivmoddi4+0x28a>
 8080412:	d04e      	beq.n	80804b2 <__udivmoddi4+0x286>
 8080414:	b155      	cbz	r5, 808042c <__udivmoddi4+0x200>
 8080416:	ebb8 030e 	subs.w	r3, r8, lr
 808041a:	eb64 040c 	sbc.w	r4, r4, ip
 808041e:	fa04 f606 	lsl.w	r6, r4, r6
 8080422:	40cb      	lsrs	r3, r1
 8080424:	431e      	orrs	r6, r3
 8080426:	40cc      	lsrs	r4, r1
 8080428:	e9c5 6400 	strd	r6, r4, [r5]
 808042c:	2100      	movs	r1, #0
 808042e:	e750      	b.n	80802d2 <__udivmoddi4+0xa6>
 8080430:	f1c2 0320 	rsb	r3, r2, #32
 8080434:	fa20 f103 	lsr.w	r1, r0, r3
 8080438:	fa0c fc02 	lsl.w	ip, ip, r2
 808043c:	fa24 f303 	lsr.w	r3, r4, r3
 8080440:	4094      	lsls	r4, r2
 8080442:	430c      	orrs	r4, r1
 8080444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8080448:	fa00 fe02 	lsl.w	lr, r0, r2
 808044c:	fa1f f78c 	uxth.w	r7, ip
 8080450:	fbb3 f0f8 	udiv	r0, r3, r8
 8080454:	fb08 3110 	mls	r1, r8, r0, r3
 8080458:	0c23      	lsrs	r3, r4, #16
 808045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 808045e:	fb00 f107 	mul.w	r1, r0, r7
 8080462:	4299      	cmp	r1, r3
 8080464:	d908      	bls.n	8080478 <__udivmoddi4+0x24c>
 8080466:	eb1c 0303 	adds.w	r3, ip, r3
 808046a:	f100 36ff 	add.w	r6, r0, #4294967295
 808046e:	d22c      	bcs.n	80804ca <__udivmoddi4+0x29e>
 8080470:	4299      	cmp	r1, r3
 8080472:	d92a      	bls.n	80804ca <__udivmoddi4+0x29e>
 8080474:	3802      	subs	r0, #2
 8080476:	4463      	add	r3, ip
 8080478:	1a5b      	subs	r3, r3, r1
 808047a:	b2a4      	uxth	r4, r4
 808047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8080480:	fb08 3311 	mls	r3, r8, r1, r3
 8080484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8080488:	fb01 f307 	mul.w	r3, r1, r7
 808048c:	42a3      	cmp	r3, r4
 808048e:	d908      	bls.n	80804a2 <__udivmoddi4+0x276>
 8080490:	eb1c 0404 	adds.w	r4, ip, r4
 8080494:	f101 36ff 	add.w	r6, r1, #4294967295
 8080498:	d213      	bcs.n	80804c2 <__udivmoddi4+0x296>
 808049a:	42a3      	cmp	r3, r4
 808049c:	d911      	bls.n	80804c2 <__udivmoddi4+0x296>
 808049e:	3902      	subs	r1, #2
 80804a0:	4464      	add	r4, ip
 80804a2:	1ae4      	subs	r4, r4, r3
 80804a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80804a8:	e739      	b.n	808031e <__udivmoddi4+0xf2>
 80804aa:	4604      	mov	r4, r0
 80804ac:	e6f0      	b.n	8080290 <__udivmoddi4+0x64>
 80804ae:	4608      	mov	r0, r1
 80804b0:	e706      	b.n	80802c0 <__udivmoddi4+0x94>
 80804b2:	45c8      	cmp	r8, r9
 80804b4:	d2ae      	bcs.n	8080414 <__udivmoddi4+0x1e8>
 80804b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80804ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80804be:	3801      	subs	r0, #1
 80804c0:	e7a8      	b.n	8080414 <__udivmoddi4+0x1e8>
 80804c2:	4631      	mov	r1, r6
 80804c4:	e7ed      	b.n	80804a2 <__udivmoddi4+0x276>
 80804c6:	4603      	mov	r3, r0
 80804c8:	e799      	b.n	80803fe <__udivmoddi4+0x1d2>
 80804ca:	4630      	mov	r0, r6
 80804cc:	e7d4      	b.n	8080478 <__udivmoddi4+0x24c>
 80804ce:	46d6      	mov	lr, sl
 80804d0:	e77f      	b.n	80803d2 <__udivmoddi4+0x1a6>
 80804d2:	4463      	add	r3, ip
 80804d4:	3802      	subs	r0, #2
 80804d6:	e74d      	b.n	8080374 <__udivmoddi4+0x148>
 80804d8:	4606      	mov	r6, r0
 80804da:	4623      	mov	r3, r4
 80804dc:	4608      	mov	r0, r1
 80804de:	e70f      	b.n	8080300 <__udivmoddi4+0xd4>
 80804e0:	3e02      	subs	r6, #2
 80804e2:	4463      	add	r3, ip
 80804e4:	e730      	b.n	8080348 <__udivmoddi4+0x11c>
 80804e6:	bf00      	nop

080804e8 <__aeabi_idiv0>:
 80804e8:	4770      	bx	lr
 80804ea:	bf00      	nop

080804ec <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 80804ec:	b480      	push	{r7}
 80804ee:	b087      	sub	sp, #28
 80804f0:	af00      	add	r7, sp, #0
 80804f2:	6078      	str	r0, [r7, #4]
 80804f4:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 80804f6:	4b21      	ldr	r3, [pc, #132]	@ (808057c <Int2Str+0x90>)
 80804f8:	613b      	str	r3, [r7, #16]
 80804fa:	2300      	movs	r3, #0
 80804fc:	60fb      	str	r3, [r7, #12]
 80804fe:	2300      	movs	r3, #0
 8080500:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 8080502:	2300      	movs	r3, #0
 8080504:	617b      	str	r3, [r7, #20]
 8080506:	e02e      	b.n	8080566 <Int2Str+0x7a>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8080508:	683a      	ldr	r2, [r7, #0]
 808050a:	693b      	ldr	r3, [r7, #16]
 808050c:	fbb2 f3f3 	udiv	r3, r2, r3
 8080510:	b2da      	uxtb	r2, r3
 8080512:	68fb      	ldr	r3, [r7, #12]
 8080514:	1c59      	adds	r1, r3, #1
 8080516:	60f9      	str	r1, [r7, #12]
 8080518:	6879      	ldr	r1, [r7, #4]
 808051a:	440b      	add	r3, r1
 808051c:	3230      	adds	r2, #48	@ 0x30
 808051e:	b2d2      	uxtb	r2, r2
 8080520:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 8080522:	683b      	ldr	r3, [r7, #0]
 8080524:	693a      	ldr	r2, [r7, #16]
 8080526:	fbb3 f2f2 	udiv	r2, r3, r2
 808052a:	6939      	ldr	r1, [r7, #16]
 808052c:	fb01 f202 	mul.w	r2, r1, r2
 8080530:	1a9b      	subs	r3, r3, r2
 8080532:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8080534:	693b      	ldr	r3, [r7, #16]
 8080536:	4a12      	ldr	r2, [pc, #72]	@ (8080580 <Int2Str+0x94>)
 8080538:	fba2 2303 	umull	r2, r3, r2, r3
 808053c:	08db      	lsrs	r3, r3, #3
 808053e:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') && (status == 0))
 8080540:	68fb      	ldr	r3, [r7, #12]
 8080542:	3b01      	subs	r3, #1
 8080544:	687a      	ldr	r2, [r7, #4]
 8080546:	4413      	add	r3, r2
 8080548:	781b      	ldrb	r3, [r3, #0]
 808054a:	2b30      	cmp	r3, #48	@ 0x30
 808054c:	d105      	bne.n	808055a <Int2Str+0x6e>
 808054e:	68bb      	ldr	r3, [r7, #8]
 8080550:	2b00      	cmp	r3, #0
 8080552:	d102      	bne.n	808055a <Int2Str+0x6e>
    {
      pos = 0;
 8080554:	2300      	movs	r3, #0
 8080556:	60fb      	str	r3, [r7, #12]
 8080558:	e002      	b.n	8080560 <Int2Str+0x74>
    }
    else
    {
      status++;
 808055a:	68bb      	ldr	r3, [r7, #8]
 808055c:	3301      	adds	r3, #1
 808055e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 8080560:	697b      	ldr	r3, [r7, #20]
 8080562:	3301      	adds	r3, #1
 8080564:	617b      	str	r3, [r7, #20]
 8080566:	697b      	ldr	r3, [r7, #20]
 8080568:	2b09      	cmp	r3, #9
 808056a:	d9cd      	bls.n	8080508 <Int2Str+0x1c>
    }
  }
}
 808056c:	bf00      	nop
 808056e:	bf00      	nop
 8080570:	371c      	adds	r7, #28
 8080572:	46bd      	mov	sp, r7
 8080574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080578:	4770      	bx	lr
 808057a:	bf00      	nop
 808057c:	3b9aca00 	.word	0x3b9aca00
 8080580:	cccccccd 	.word	0xcccccccd

08080584 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 8080584:	b480      	push	{r7}
 8080586:	b087      	sub	sp, #28
 8080588:	af00      	add	r7, sp, #0
 808058a:	6078      	str	r0, [r7, #4]
 808058c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 808058e:	2300      	movs	r3, #0
 8080590:	617b      	str	r3, [r7, #20]
 8080592:	2300      	movs	r3, #0
 8080594:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 8080596:	2300      	movs	r3, #0
 8080598:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 808059a:	687b      	ldr	r3, [r7, #4]
 808059c:	781b      	ldrb	r3, [r3, #0]
 808059e:	2b30      	cmp	r3, #48	@ 0x30
 80805a0:	f040 80d7 	bne.w	8080752 <Str2Int+0x1ce>
 80805a4:	687b      	ldr	r3, [r7, #4]
 80805a6:	3301      	adds	r3, #1
 80805a8:	781b      	ldrb	r3, [r3, #0]
 80805aa:	2b78      	cmp	r3, #120	@ 0x78
 80805ac:	d005      	beq.n	80805ba <Str2Int+0x36>
 80805ae:	687b      	ldr	r3, [r7, #4]
 80805b0:	3301      	adds	r3, #1
 80805b2:	781b      	ldrb	r3, [r3, #0]
 80805b4:	2b58      	cmp	r3, #88	@ 0x58
 80805b6:	f040 80cc 	bne.w	8080752 <Str2Int+0x1ce>
  {
    i = 2;
 80805ba:	2302      	movs	r3, #2
 80805bc:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80805be:	e057      	b.n	8080670 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 80805c0:	687a      	ldr	r2, [r7, #4]
 80805c2:	697b      	ldr	r3, [r7, #20]
 80805c4:	4413      	add	r3, r2
 80805c6:	781b      	ldrb	r3, [r3, #0]
 80805c8:	2b40      	cmp	r3, #64	@ 0x40
 80805ca:	d905      	bls.n	80805d8 <Str2Int+0x54>
 80805cc:	687a      	ldr	r2, [r7, #4]
 80805ce:	697b      	ldr	r3, [r7, #20]
 80805d0:	4413      	add	r3, r2
 80805d2:	781b      	ldrb	r3, [r3, #0]
 80805d4:	2b46      	cmp	r3, #70	@ 0x46
 80805d6:	d917      	bls.n	8080608 <Str2Int+0x84>
 80805d8:	687a      	ldr	r2, [r7, #4]
 80805da:	697b      	ldr	r3, [r7, #20]
 80805dc:	4413      	add	r3, r2
 80805de:	781b      	ldrb	r3, [r3, #0]
 80805e0:	2b60      	cmp	r3, #96	@ 0x60
 80805e2:	d905      	bls.n	80805f0 <Str2Int+0x6c>
 80805e4:	687a      	ldr	r2, [r7, #4]
 80805e6:	697b      	ldr	r3, [r7, #20]
 80805e8:	4413      	add	r3, r2
 80805ea:	781b      	ldrb	r3, [r3, #0]
 80805ec:	2b66      	cmp	r3, #102	@ 0x66
 80805ee:	d90b      	bls.n	8080608 <Str2Int+0x84>
 80805f0:	687a      	ldr	r2, [r7, #4]
 80805f2:	697b      	ldr	r3, [r7, #20]
 80805f4:	4413      	add	r3, r2
 80805f6:	781b      	ldrb	r3, [r3, #0]
 80805f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80805fa:	d936      	bls.n	808066a <Str2Int+0xe6>
 80805fc:	687a      	ldr	r2, [r7, #4]
 80805fe:	697b      	ldr	r3, [r7, #20]
 8080600:	4413      	add	r3, r2
 8080602:	781b      	ldrb	r3, [r3, #0]
 8080604:	2b39      	cmp	r3, #57	@ 0x39
 8080606:	d830      	bhi.n	808066a <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8080608:	68fb      	ldr	r3, [r7, #12]
 808060a:	011b      	lsls	r3, r3, #4
 808060c:	6879      	ldr	r1, [r7, #4]
 808060e:	697a      	ldr	r2, [r7, #20]
 8080610:	440a      	add	r2, r1
 8080612:	7812      	ldrb	r2, [r2, #0]
 8080614:	2a2f      	cmp	r2, #47	@ 0x2f
 8080616:	d90b      	bls.n	8080630 <Str2Int+0xac>
 8080618:	6879      	ldr	r1, [r7, #4]
 808061a:	697a      	ldr	r2, [r7, #20]
 808061c:	440a      	add	r2, r1
 808061e:	7812      	ldrb	r2, [r2, #0]
 8080620:	2a39      	cmp	r2, #57	@ 0x39
 8080622:	d805      	bhi.n	8080630 <Str2Int+0xac>
 8080624:	6879      	ldr	r1, [r7, #4]
 8080626:	697a      	ldr	r2, [r7, #20]
 8080628:	440a      	add	r2, r1
 808062a:	7812      	ldrb	r2, [r2, #0]
 808062c:	3a30      	subs	r2, #48	@ 0x30
 808062e:	e016      	b.n	808065e <Str2Int+0xda>
 8080630:	6879      	ldr	r1, [r7, #4]
 8080632:	697a      	ldr	r2, [r7, #20]
 8080634:	440a      	add	r2, r1
 8080636:	7812      	ldrb	r2, [r2, #0]
 8080638:	2a40      	cmp	r2, #64	@ 0x40
 808063a:	d90b      	bls.n	8080654 <Str2Int+0xd0>
 808063c:	6879      	ldr	r1, [r7, #4]
 808063e:	697a      	ldr	r2, [r7, #20]
 8080640:	440a      	add	r2, r1
 8080642:	7812      	ldrb	r2, [r2, #0]
 8080644:	2a46      	cmp	r2, #70	@ 0x46
 8080646:	d805      	bhi.n	8080654 <Str2Int+0xd0>
 8080648:	6879      	ldr	r1, [r7, #4]
 808064a:	697a      	ldr	r2, [r7, #20]
 808064c:	440a      	add	r2, r1
 808064e:	7812      	ldrb	r2, [r2, #0]
 8080650:	3a37      	subs	r2, #55	@ 0x37
 8080652:	e004      	b.n	808065e <Str2Int+0xda>
 8080654:	6879      	ldr	r1, [r7, #4]
 8080656:	697a      	ldr	r2, [r7, #20]
 8080658:	440a      	add	r2, r1
 808065a:	7812      	ldrb	r2, [r2, #0]
 808065c:	3a57      	subs	r2, #87	@ 0x57
 808065e:	4413      	add	r3, r2
 8080660:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 8080662:	697b      	ldr	r3, [r7, #20]
 8080664:	3301      	adds	r3, #1
 8080666:	617b      	str	r3, [r7, #20]
 8080668:	e002      	b.n	8080670 <Str2Int+0xec>
        res = 0;
 808066a:	2300      	movs	r3, #0
 808066c:	613b      	str	r3, [r7, #16]
        break;
 808066e:	e008      	b.n	8080682 <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8080670:	697b      	ldr	r3, [r7, #20]
 8080672:	2b0a      	cmp	r3, #10
 8080674:	d805      	bhi.n	8080682 <Str2Int+0xfe>
 8080676:	687a      	ldr	r2, [r7, #4]
 8080678:	697b      	ldr	r3, [r7, #20]
 808067a:	4413      	add	r3, r2
 808067c:	781b      	ldrb	r3, [r3, #0]
 808067e:	2b00      	cmp	r3, #0
 8080680:	d19e      	bne.n	80805c0 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 8080682:	687a      	ldr	r2, [r7, #4]
 8080684:	697b      	ldr	r3, [r7, #20]
 8080686:	4413      	add	r3, r2
 8080688:	781b      	ldrb	r3, [r3, #0]
 808068a:	2b00      	cmp	r3, #0
 808068c:	d167      	bne.n	808075e <Str2Int+0x1da>
    {
      *p_intnum = val;
 808068e:	683b      	ldr	r3, [r7, #0]
 8080690:	68fa      	ldr	r2, [r7, #12]
 8080692:	601a      	str	r2, [r3, #0]
      res = 1;
 8080694:	2301      	movs	r3, #1
 8080696:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8080698:	e061      	b.n	808075e <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 808069a:	687a      	ldr	r2, [r7, #4]
 808069c:	697b      	ldr	r3, [r7, #20]
 808069e:	4413      	add	r3, r2
 80806a0:	781b      	ldrb	r3, [r3, #0]
 80806a2:	2b00      	cmp	r3, #0
 80806a4:	d105      	bne.n	80806b2 <Str2Int+0x12e>
      {
        *p_intnum = val;
 80806a6:	683b      	ldr	r3, [r7, #0]
 80806a8:	68fa      	ldr	r2, [r7, #12]
 80806aa:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 80806ac:	2301      	movs	r3, #1
 80806ae:	613b      	str	r3, [r7, #16]
 80806b0:	e04c      	b.n	808074c <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 80806b2:	687a      	ldr	r2, [r7, #4]
 80806b4:	697b      	ldr	r3, [r7, #20]
 80806b6:	4413      	add	r3, r2
 80806b8:	781b      	ldrb	r3, [r3, #0]
 80806ba:	2b6b      	cmp	r3, #107	@ 0x6b
 80806bc:	d005      	beq.n	80806ca <Str2Int+0x146>
 80806be:	687a      	ldr	r2, [r7, #4]
 80806c0:	697b      	ldr	r3, [r7, #20]
 80806c2:	4413      	add	r3, r2
 80806c4:	781b      	ldrb	r3, [r3, #0]
 80806c6:	2b4b      	cmp	r3, #75	@ 0x4b
 80806c8:	d10b      	bne.n	80806e2 <Str2Int+0x15e>
 80806ca:	697b      	ldr	r3, [r7, #20]
 80806cc:	2b00      	cmp	r3, #0
 80806ce:	d008      	beq.n	80806e2 <Str2Int+0x15e>
      {
        val = val << 10;
 80806d0:	68fb      	ldr	r3, [r7, #12]
 80806d2:	029b      	lsls	r3, r3, #10
 80806d4:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80806d6:	683b      	ldr	r3, [r7, #0]
 80806d8:	68fa      	ldr	r2, [r7, #12]
 80806da:	601a      	str	r2, [r3, #0]
        res = 1;
 80806dc:	2301      	movs	r3, #1
 80806de:	613b      	str	r3, [r7, #16]
 80806e0:	e034      	b.n	808074c <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 80806e2:	687a      	ldr	r2, [r7, #4]
 80806e4:	697b      	ldr	r3, [r7, #20]
 80806e6:	4413      	add	r3, r2
 80806e8:	781b      	ldrb	r3, [r3, #0]
 80806ea:	2b6d      	cmp	r3, #109	@ 0x6d
 80806ec:	d005      	beq.n	80806fa <Str2Int+0x176>
 80806ee:	687a      	ldr	r2, [r7, #4]
 80806f0:	697b      	ldr	r3, [r7, #20]
 80806f2:	4413      	add	r3, r2
 80806f4:	781b      	ldrb	r3, [r3, #0]
 80806f6:	2b4d      	cmp	r3, #77	@ 0x4d
 80806f8:	d10b      	bne.n	8080712 <Str2Int+0x18e>
 80806fa:	697b      	ldr	r3, [r7, #20]
 80806fc:	2b00      	cmp	r3, #0
 80806fe:	d008      	beq.n	8080712 <Str2Int+0x18e>
      {
        val = val << 20;
 8080700:	68fb      	ldr	r3, [r7, #12]
 8080702:	051b      	lsls	r3, r3, #20
 8080704:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8080706:	683b      	ldr	r3, [r7, #0]
 8080708:	68fa      	ldr	r2, [r7, #12]
 808070a:	601a      	str	r2, [r3, #0]
        res = 1;
 808070c:	2301      	movs	r3, #1
 808070e:	613b      	str	r3, [r7, #16]
 8080710:	e01c      	b.n	808074c <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 8080712:	687a      	ldr	r2, [r7, #4]
 8080714:	697b      	ldr	r3, [r7, #20]
 8080716:	4413      	add	r3, r2
 8080718:	781b      	ldrb	r3, [r3, #0]
 808071a:	2b2f      	cmp	r3, #47	@ 0x2f
 808071c:	d913      	bls.n	8080746 <Str2Int+0x1c2>
 808071e:	687a      	ldr	r2, [r7, #4]
 8080720:	697b      	ldr	r3, [r7, #20]
 8080722:	4413      	add	r3, r2
 8080724:	781b      	ldrb	r3, [r3, #0]
 8080726:	2b39      	cmp	r3, #57	@ 0x39
 8080728:	d80d      	bhi.n	8080746 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 808072a:	68fa      	ldr	r2, [r7, #12]
 808072c:	4613      	mov	r3, r2
 808072e:	009b      	lsls	r3, r3, #2
 8080730:	4413      	add	r3, r2
 8080732:	005b      	lsls	r3, r3, #1
 8080734:	4619      	mov	r1, r3
 8080736:	687a      	ldr	r2, [r7, #4]
 8080738:	697b      	ldr	r3, [r7, #20]
 808073a:	4413      	add	r3, r2
 808073c:	781b      	ldrb	r3, [r3, #0]
 808073e:	440b      	add	r3, r1
 8080740:	3b30      	subs	r3, #48	@ 0x30
 8080742:	60fb      	str	r3, [r7, #12]
 8080744:	e002      	b.n	808074c <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8080746:	2300      	movs	r3, #0
 8080748:	613b      	str	r3, [r7, #16]
        break;
 808074a:	e008      	b.n	808075e <Str2Int+0x1da>
      }
      i++;
 808074c:	697b      	ldr	r3, [r7, #20]
 808074e:	3301      	adds	r3, #1
 8080750:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 8080752:	697b      	ldr	r3, [r7, #20]
 8080754:	2b0a      	cmp	r3, #10
 8080756:	d802      	bhi.n	808075e <Str2Int+0x1da>
 8080758:	693b      	ldr	r3, [r7, #16]
 808075a:	2b01      	cmp	r3, #1
 808075c:	d19d      	bne.n	808069a <Str2Int+0x116>
    }
  }

  return res;
 808075e:	693b      	ldr	r3, [r7, #16]
}
 8080760:	4618      	mov	r0, r3
 8080762:	371c      	adds	r7, #28
 8080764:	46bd      	mov	sp, r7
 8080766:	f85d 7b04 	ldr.w	r7, [sp], #4
 808076a:	4770      	bx	lr

0808076c <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 808076c:	b580      	push	{r7, lr}
 808076e:	b084      	sub	sp, #16
 8080770:	af00      	add	r7, sp, #0
 8080772:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 8080774:	2300      	movs	r3, #0
 8080776:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 8080778:	e002      	b.n	8080780 <Serial_PutString+0x14>
  {
    length++;
 808077a:	89fb      	ldrh	r3, [r7, #14]
 808077c:	3301      	adds	r3, #1
 808077e:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 8080780:	89fb      	ldrh	r3, [r7, #14]
 8080782:	687a      	ldr	r2, [r7, #4]
 8080784:	4413      	add	r3, r2
 8080786:	781b      	ldrb	r3, [r3, #0]
 8080788:	2b00      	cmp	r3, #0
 808078a:	d1f6      	bne.n	808077a <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&hlpuart1, p_string, length, TX_TIMEOUT);
 808078c:	89fa      	ldrh	r2, [r7, #14]
 808078e:	2364      	movs	r3, #100	@ 0x64
 8080790:	6879      	ldr	r1, [r7, #4]
 8080792:	4803      	ldr	r0, [pc, #12]	@ (80807a0 <Serial_PutString+0x34>)
 8080794:	f003 fa82 	bl	8083c9c <HAL_UART_Transmit>
}
 8080798:	bf00      	nop
 808079a:	3710      	adds	r7, #16
 808079c:	46bd      	mov	sp, r7
 808079e:	bd80      	pop	{r7, pc}
 80807a0:	20000048 	.word	0x20000048

080807a4 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte(uint8_t param)
{
 80807a4:	b580      	push	{r7, lr}
 80807a6:	b082      	sub	sp, #8
 80807a8:	af00      	add	r7, sp, #0
 80807aa:	4603      	mov	r3, r0
 80807ac:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if (hlpuart1.gState == HAL_UART_STATE_TIMEOUT)
 80807ae:	4b09      	ldr	r3, [pc, #36]	@ (80807d4 <Serial_PutByte+0x30>)
 80807b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80807b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80807b4:	d102      	bne.n	80807bc <Serial_PutByte+0x18>
  {
    hlpuart1.gState = HAL_UART_STATE_READY;
 80807b6:	4b07      	ldr	r3, [pc, #28]	@ (80807d4 <Serial_PutByte+0x30>)
 80807b8:	2220      	movs	r2, #32
 80807ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
  return HAL_UART_Transmit(&hlpuart1, &param, 1, TX_TIMEOUT);
 80807bc:	1df9      	adds	r1, r7, #7
 80807be:	2364      	movs	r3, #100	@ 0x64
 80807c0:	2201      	movs	r2, #1
 80807c2:	4804      	ldr	r0, [pc, #16]	@ (80807d4 <Serial_PutByte+0x30>)
 80807c4:	f003 fa6a 	bl	8083c9c <HAL_UART_Transmit>
 80807c8:	4603      	mov	r3, r0
}
 80807ca:	4618      	mov	r0, r3
 80807cc:	3708      	adds	r7, #8
 80807ce:	46bd      	mov	sp, r7
 80807d0:	bd80      	pop	{r7, pc}
 80807d2:	bf00      	nop
 80807d4:	20000048 	.word	0x20000048

080807d8 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 80807d8:	b580      	push	{r7, lr}
 80807da:	af00      	add	r7, sp, #0
  /* Unlock the Program memory */
  HAL_FLASH_Unlock();
 80807dc:	f001 fa08 	bl	8081bf0 <HAL_FLASH_Unlock>

  /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 80807e0:	4b03      	ldr	r3, [pc, #12]	@ (80807f0 <FLASH_If_Init+0x18>)
 80807e2:	f248 0291 	movw	r2, #32913	@ 0x8091
 80807e6:	611a      	str	r2, [r3, #16]
  /* Unlock the Program memory */
  HAL_FLASH_Lock();
 80807e8:	f001 fa24 	bl	8081c34 <HAL_FLASH_Lock>
}
 80807ec:	bf00      	nop
 80807ee:	bd80      	pop	{r7, pc}
 80807f0:	40022000 	.word	0x40022000

080807f4 <FLASH_If_Erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t start)
{
 80807f4:	b580      	push	{r7, lr}
 80807f6:	b08a      	sub	sp, #40	@ 0x28
 80807f8:	af00      	add	r7, sp, #0
 80807fa:	6078      	str	r0, [r7, #4]
  uint32_t NbrOfPages = 0;
 80807fc:	2300      	movs	r3, #0
 80807fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t PageError = 0;
 8080800:	2300      	movs	r3, #0
 8080802:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 8080804:	2300      	movs	r3, #0
 8080806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 808080a:	f001 f9f1 	bl	8081bf0 <HAL_FLASH_Unlock>

  /* Get the number of page to  erase */
  NbrOfPages = (FLASH_START_ADRESS + FLASH_SIZE);
 808080e:	4b2d      	ldr	r3, [pc, #180]	@ (80808c4 <FLASH_If_Erase+0xd0>)
 8080810:	681b      	ldr	r3, [r3, #0]
 8080812:	b29b      	uxth	r3, r3
 8080814:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8080818:	4293      	cmp	r3, r2
 808081a:	d007      	beq.n	808082c <FLASH_If_Erase+0x38>
 808081c:	4b29      	ldr	r3, [pc, #164]	@ (80808c4 <FLASH_If_Erase+0xd0>)
 808081e:	681b      	ldr	r3, [r3, #0]
 8080820:	029a      	lsls	r2, r3, #10
 8080822:	4b29      	ldr	r3, [pc, #164]	@ (80808c8 <FLASH_If_Erase+0xd4>)
 8080824:	4013      	ands	r3, r2
 8080826:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 808082a:	e001      	b.n	8080830 <FLASH_If_Erase+0x3c>
 808082c:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8080830:	627b      	str	r3, [r7, #36]	@ 0x24
  NbrOfPages = (NbrOfPages - start) / FLASH_PAGE_SIZE;
 8080832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8080834:	687b      	ldr	r3, [r7, #4]
 8080836:	1ad3      	subs	r3, r2, r3
 8080838:	0adb      	lsrs	r3, r3, #11
 808083a:	627b      	str	r3, [r7, #36]	@ 0x24

  if(NbrOfPages > FLASH_PAGE_NBPERBANK)
 808083c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 808083e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8080842:	d918      	bls.n	8080876 <FLASH_If_Erase+0x82>
  {
    pEraseInit.Banks = FLASH_BANK_1;
 8080844:	2301      	movs	r3, #1
 8080846:	613b      	str	r3, [r7, #16]
    pEraseInit.NbPages = NbrOfPages % FLASH_PAGE_NBPERBANK;
 8080848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 808084a:	b2db      	uxtb	r3, r3
 808084c:	61bb      	str	r3, [r7, #24]
    pEraseInit.Page = FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
 808084e:	69bb      	ldr	r3, [r7, #24]
 8080850:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8080854:	617b      	str	r3, [r7, #20]
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8080856:	2300      	movs	r3, #0
 8080858:	60fb      	str	r3, [r7, #12]
    status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 808085a:	f107 021c 	add.w	r2, r7, #28
 808085e:	f107 030c 	add.w	r3, r7, #12
 8080862:	4611      	mov	r1, r2
 8080864:	4618      	mov	r0, r3
 8080866:	f001 faa7 	bl	8081db8 <HAL_FLASHEx_Erase>
 808086a:	4603      	mov	r3, r0
 808086c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  
    NbrOfPages = FLASH_PAGE_NBPERBANK;
 8080870:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8080874:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  
  if(status == HAL_OK)
 8080876:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 808087a:	2b00      	cmp	r3, #0
 808087c:	d114      	bne.n	80808a8 <FLASH_If_Erase+0xb4>
  {
    pEraseInit.Banks = FLASH_BANK_2;
 808087e:	2302      	movs	r3, #2
 8080880:	613b      	str	r3, [r7, #16]
    pEraseInit.NbPages = NbrOfPages;
 8080882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8080884:	61bb      	str	r3, [r7, #24]
    pEraseInit.Page = FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
 8080886:	69bb      	ldr	r3, [r7, #24]
 8080888:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 808088c:	617b      	str	r3, [r7, #20]
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 808088e:	2300      	movs	r3, #0
 8080890:	60fb      	str	r3, [r7, #12]
    status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8080892:	f107 021c 	add.w	r2, r7, #28
 8080896:	f107 030c 	add.w	r3, r7, #12
 808089a:	4611      	mov	r1, r2
 808089c:	4618      	mov	r0, r3
 808089e:	f001 fa8b 	bl	8081db8 <HAL_FLASHEx_Erase>
 80808a2:	4603      	mov	r3, r0
 80808a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }
  
  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80808a8:	f001 f9c4 	bl	8081c34 <HAL_FLASH_Lock>

  if (status != HAL_OK)
 80808ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80808b0:	2b00      	cmp	r3, #0
 80808b2:	d001      	beq.n	80808b8 <FLASH_If_Erase+0xc4>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 80808b4:	2301      	movs	r3, #1
 80808b6:	e000      	b.n	80808ba <FLASH_If_Erase+0xc6>
  }

  return FLASHIF_OK;
 80808b8:	2300      	movs	r3, #0
}
 80808ba:	4618      	mov	r0, r3
 80808bc:	3728      	adds	r7, #40	@ 0x28
 80808be:	46bd      	mov	sp, r7
 80808c0:	bd80      	pop	{r7, pc}
 80808c2:	bf00      	nop
 80808c4:	1fff75e0 	.word	0x1fff75e0
 80808c8:	03fffc00 	.word	0x03fffc00

080808cc <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 80808cc:	b580      	push	{r7, lr}
 80808ce:	b086      	sub	sp, #24
 80808d0:	af00      	add	r7, sp, #0
 80808d2:	60f8      	str	r0, [r7, #12]
 80808d4:	60b9      	str	r1, [r7, #8]
 80808d6:	607a      	str	r2, [r7, #4]
  uint32_t status = FLASHIF_OK;
 80808d8:	2300      	movs	r3, #0
 80808da:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 80808dc:	2300      	movs	r3, #0
 80808de:	613b      	str	r3, [r7, #16]

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80808e0:	f001 f986 	bl	8081bf0 <HAL_FLASH_Unlock>

  /* DataLength must be a multiple of 64 bit */
  for (i = 0; (i < length/2) && (destination <= (USER_FLASH_END_ADDRESS-8)); i++)
 80808e4:	2300      	movs	r3, #0
 80808e6:	613b      	str	r3, [r7, #16]
 80808e8:	e026      	b.n	8080938 <FLASH_If_Write+0x6c>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, destination, *((uint64_t *)(p_source+2*i))) == HAL_OK)      
 80808ea:	693b      	ldr	r3, [r7, #16]
 80808ec:	00db      	lsls	r3, r3, #3
 80808ee:	68ba      	ldr	r2, [r7, #8]
 80808f0:	4413      	add	r3, r2
 80808f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80808f6:	68f9      	ldr	r1, [r7, #12]
 80808f8:	2000      	movs	r0, #0
 80808fa:	f001 f90d 	bl	8081b18 <HAL_FLASH_Program>
 80808fe:	4603      	mov	r3, r0
 8080900:	2b00      	cmp	r3, #0
 8080902:	d113      	bne.n	808092c <FLASH_If_Write+0x60>
    {
     /* Check the written value */
      if (*(uint64_t*)destination != *(uint64_t *)(p_source+2*i))
 8080904:	68fb      	ldr	r3, [r7, #12]
 8080906:	e9d3 0100 	ldrd	r0, r1, [r3]
 808090a:	693b      	ldr	r3, [r7, #16]
 808090c:	00db      	lsls	r3, r3, #3
 808090e:	68ba      	ldr	r2, [r7, #8]
 8080910:	4413      	add	r3, r2
 8080912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080916:	4299      	cmp	r1, r3
 8080918:	bf08      	it	eq
 808091a:	4290      	cmpeq	r0, r2
 808091c:	d002      	beq.n	8080924 <FLASH_If_Write+0x58>
      {
        /* Flash content doesn't match SRAM content */
        status = FLASHIF_WRITINGCTRL_ERROR;
 808091e:	2302      	movs	r3, #2
 8080920:	617b      	str	r3, [r7, #20]
        break;
 8080922:	e012      	b.n	808094a <FLASH_If_Write+0x7e>
      }
      /* Increment FLASH destination address */
      destination += 8;
 8080924:	68fb      	ldr	r3, [r7, #12]
 8080926:	3308      	adds	r3, #8
 8080928:	60fb      	str	r3, [r7, #12]
 808092a:	e002      	b.n	8080932 <FLASH_If_Write+0x66>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      status = FLASHIF_WRITING_ERROR;
 808092c:	2303      	movs	r3, #3
 808092e:	617b      	str	r3, [r7, #20]
      break;
 8080930:	e00b      	b.n	808094a <FLASH_If_Write+0x7e>
  for (i = 0; (i < length/2) && (destination <= (USER_FLASH_END_ADDRESS-8)); i++)
 8080932:	693b      	ldr	r3, [r7, #16]
 8080934:	3301      	adds	r3, #1
 8080936:	613b      	str	r3, [r7, #16]
 8080938:	687b      	ldr	r3, [r7, #4]
 808093a:	085b      	lsrs	r3, r3, #1
 808093c:	693a      	ldr	r2, [r7, #16]
 808093e:	429a      	cmp	r2, r3
 8080940:	d203      	bcs.n	808094a <FLASH_If_Write+0x7e>
 8080942:	68fb      	ldr	r3, [r7, #12]
 8080944:	4a04      	ldr	r2, [pc, #16]	@ (8080958 <FLASH_If_Write+0x8c>)
 8080946:	4293      	cmp	r3, r2
 8080948:	d9cf      	bls.n	80808ea <FLASH_If_Write+0x1e>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 808094a:	f001 f973 	bl	8081c34 <HAL_FLASH_Lock>

  return status;
 808094e:	697b      	ldr	r3, [r7, #20]
}
 8080950:	4618      	mov	r0, r3
 8080952:	3718      	adds	r7, #24
 8080954:	46bd      	mov	sp, r7
 8080956:	bd80      	pop	{r7, pc}
 8080958:	080ffff8 	.word	0x080ffff8

0808095c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 808095c:	b580      	push	{r7, lr}
 808095e:	b084      	sub	sp, #16
 8080960:	af00      	add	r7, sp, #0


  HAL_Init();
 8080962:	f000 fd3c 	bl	80813de <HAL_Init>
  SystemClock_Config();
 8080966:	f000 f8c9 	bl	8080afc <SystemClock_Config>
  LED_Init();
 808096a:	f000 f871 	bl	8080a50 <LED_Init>
  Button_Init();
 808096e:	f000 f89b 	bl	8080aa8 <Button_Init>
  char *msg = "Application Started\r\n";
 8080972:	4b2f      	ldr	r3, [pc, #188]	@ (8080a30 <main+0xd4>)
 8080974:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8080976:	68f8      	ldr	r0, [r7, #12]
 8080978:	f7ff fc38 	bl	80801ec <strlen>
 808097c:	4603      	mov	r3, r0
 808097e:	b29a      	uxth	r2, r3
 8080980:	f04f 33ff 	mov.w	r3, #4294967295
 8080984:	68f9      	ldr	r1, [r7, #12]
 8080986:	482b      	ldr	r0, [pc, #172]	@ (8080a34 <main+0xd8>)
 8080988:	f003 f988 	bl	8083c9c <HAL_UART_Transmit>
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 808098c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8080990:	4829      	ldr	r0, [pc, #164]	@ (8080a38 <main+0xdc>)
 8080992:	f001 fce7 	bl	8082364 <HAL_GPIO_ReadPin>
 8080996:	4603      	mov	r3, r0
 8080998:	2b01      	cmp	r3, #1
 808099a:	d126      	bne.n	80809ea <main+0x8e>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 808099c:	2201      	movs	r2, #1
 808099e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80809a2:	4826      	ldr	r0, [pc, #152]	@ (8080a3c <main+0xe0>)
 80809a4:	f001 fcf6 	bl	8082394 <HAL_GPIO_WritePin>
      FLASH_If_Init();
 80809a8:	f7ff ff16 	bl	80807d8 <FLASH_If_Init>
      IAP_Init();
 80809ac:	f000 f8f8 	bl	8080ba0 <IAP_Init>
      Main_Menu();
 80809b0:	f000 f9dc 	bl	8080d6c <Main_Menu>

    if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x20000000 ) == 0x20000000)
 80809b4:	4b22      	ldr	r3, [pc, #136]	@ (8080a40 <main+0xe4>)
 80809b6:	681b      	ldr	r3, [r3, #0]
 80809b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80809bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80809c0:	d134      	bne.n	8080a2c <main+0xd0>
    {
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80809c2:	4b20      	ldr	r3, [pc, #128]	@ (8080a44 <main+0xe8>)
 80809c4:	681b      	ldr	r3, [r3, #0]
 80809c6:	4a20      	ldr	r2, [pc, #128]	@ (8080a48 <main+0xec>)
 80809c8:	6013      	str	r3, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 80809ca:	4b1f      	ldr	r3, [pc, #124]	@ (8080a48 <main+0xec>)
 80809cc:	681b      	ldr	r3, [r3, #0]
 80809ce:	461a      	mov	r2, r3
 80809d0:	4b1e      	ldr	r3, [pc, #120]	@ (8080a4c <main+0xf0>)
 80809d2:	601a      	str	r2, [r3, #0]

      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80809d4:	4b1a      	ldr	r3, [pc, #104]	@ (8080a40 <main+0xe4>)
 80809d6:	681b      	ldr	r3, [r3, #0]
 80809d8:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80809da:	68bb      	ldr	r3, [r7, #8]
 80809dc:	f383 8808 	msr	MSP, r3
}
 80809e0:	bf00      	nop
      JumpToApplication();
 80809e2:	4b1a      	ldr	r3, [pc, #104]	@ (8080a4c <main+0xf0>)
 80809e4:	681b      	ldr	r3, [r3, #0]
 80809e6:	4798      	blx	r3
 80809e8:	e020      	b.n	8080a2c <main+0xd0>
    }
  }
  else
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80809ea:	2200      	movs	r2, #0
 80809ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80809f0:	4812      	ldr	r0, [pc, #72]	@ (8080a3c <main+0xe0>)
 80809f2:	f001 fccf 	bl	8082394 <HAL_GPIO_WritePin>

    if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x20000000 ) == 0x20000000)
 80809f6:	4b12      	ldr	r3, [pc, #72]	@ (8080a40 <main+0xe4>)
 80809f8:	681b      	ldr	r3, [r3, #0]
 80809fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80809fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8080a02:	d113      	bne.n	8080a2c <main+0xd0>
    {
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8080a04:	4b0f      	ldr	r3, [pc, #60]	@ (8080a44 <main+0xe8>)
 8080a06:	681b      	ldr	r3, [r3, #0]
 8080a08:	4a0f      	ldr	r2, [pc, #60]	@ (8080a48 <main+0xec>)
 8080a0a:	6013      	str	r3, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 8080a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8080a48 <main+0xec>)
 8080a0e:	681b      	ldr	r3, [r3, #0]
 8080a10:	461a      	mov	r2, r3
 8080a12:	4b0e      	ldr	r3, [pc, #56]	@ (8080a4c <main+0xf0>)
 8080a14:	601a      	str	r2, [r3, #0]

      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8080a16:	4b0a      	ldr	r3, [pc, #40]	@ (8080a40 <main+0xe4>)
 8080a18:	681b      	ldr	r3, [r3, #0]
 8080a1a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8080a1c:	687b      	ldr	r3, [r7, #4]
 8080a1e:	f383 8808 	msr	MSP, r3
}
 8080a22:	bf00      	nop
      JumpToApplication();
 8080a24:	4b09      	ldr	r3, [pc, #36]	@ (8080a4c <main+0xf0>)
 8080a26:	681b      	ldr	r3, [r3, #0]
 8080a28:	4798      	blx	r3

    }
  }
while(1){
 8080a2a:	bf00      	nop
 8080a2c:	bf00      	nop
 8080a2e:	e7fd      	b.n	8080a2c <main+0xd0>
 8080a30:	08084958 	.word	0x08084958
 8080a34:	20000048 	.word	0x20000048
 8080a38:	48000800 	.word	0x48000800
 8080a3c:	48000400 	.word	0x48000400
 8080a40:	08080000 	.word	0x08080000
 8080a44:	08080004 	.word	0x08080004
 8080a48:	200000f8 	.word	0x200000f8
 8080a4c:	200000f4 	.word	0x200000f4

08080a50 <LED_Init>:
  * @brief  Initialize the LED and Button.
  * @param  None
  * @retval None
  */
static void LED_Init(void)
{
 8080a50:	b580      	push	{r7, lr}
 8080a52:	b086      	sub	sp, #24
 8080a54:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8080a56:	4b12      	ldr	r3, [pc, #72]	@ (8080aa0 <LED_Init+0x50>)
 8080a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8080a5a:	4a11      	ldr	r2, [pc, #68]	@ (8080aa0 <LED_Init+0x50>)
 8080a5c:	f043 0302 	orr.w	r3, r3, #2
 8080a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8080a62:	4b0f      	ldr	r3, [pc, #60]	@ (8080aa0 <LED_Init+0x50>)
 8080a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8080a66:	f003 0302 	and.w	r3, r3, #2
 8080a6a:	603b      	str	r3, [r7, #0]
 8080a6c:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8080a6e:	1d3b      	adds	r3, r7, #4
 8080a70:	2200      	movs	r2, #0
 8080a72:	601a      	str	r2, [r3, #0]
 8080a74:	605a      	str	r2, [r3, #4]
 8080a76:	609a      	str	r2, [r3, #8]
 8080a78:	60da      	str	r2, [r3, #12]
 8080a7a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_14;
 8080a7c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8080a80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8080a82:	2301      	movs	r3, #1
 8080a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8080a86:	2300      	movs	r3, #0
 8080a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8080a8a:	2300      	movs	r3, #0
 8080a8c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8080a8e:	1d3b      	adds	r3, r7, #4
 8080a90:	4619      	mov	r1, r3
 8080a92:	4804      	ldr	r0, [pc, #16]	@ (8080aa4 <LED_Init+0x54>)
 8080a94:	f001 fad4 	bl	8082040 <HAL_GPIO_Init>
}
 8080a98:	bf00      	nop
 8080a9a:	3718      	adds	r7, #24
 8080a9c:	46bd      	mov	sp, r7
 8080a9e:	bd80      	pop	{r7, pc}
 8080aa0:	40021000 	.word	0x40021000
 8080aa4:	48000400 	.word	0x48000400

08080aa8 <Button_Init>:

static void Button_Init(void)
{
 8080aa8:	b580      	push	{r7, lr}
 8080aaa:	b086      	sub	sp, #24
 8080aac:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8080aae:	4b11      	ldr	r3, [pc, #68]	@ (8080af4 <Button_Init+0x4c>)
 8080ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8080ab2:	4a10      	ldr	r2, [pc, #64]	@ (8080af4 <Button_Init+0x4c>)
 8080ab4:	f043 0304 	orr.w	r3, r3, #4
 8080ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8080aba:	4b0e      	ldr	r3, [pc, #56]	@ (8080af4 <Button_Init+0x4c>)
 8080abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8080abe:	f003 0304 	and.w	r3, r3, #4
 8080ac2:	603b      	str	r3, [r7, #0]
 8080ac4:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8080ac6:	1d3b      	adds	r3, r7, #4
 8080ac8:	2200      	movs	r2, #0
 8080aca:	601a      	str	r2, [r3, #0]
 8080acc:	605a      	str	r2, [r3, #4]
 8080ace:	609a      	str	r2, [r3, #8]
 8080ad0:	60da      	str	r2, [r3, #12]
 8080ad2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8080ad4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8080ad8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8080ada:	2300      	movs	r3, #0
 8080adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8080ade:	2300      	movs	r3, #0
 8080ae0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8080ae2:	1d3b      	adds	r3, r7, #4
 8080ae4:	4619      	mov	r1, r3
 8080ae6:	4804      	ldr	r0, [pc, #16]	@ (8080af8 <Button_Init+0x50>)
 8080ae8:	f001 faaa 	bl	8082040 <HAL_GPIO_Init>
}
 8080aec:	bf00      	nop
 8080aee:	3718      	adds	r7, #24
 8080af0:	46bd      	mov	sp, r7
 8080af2:	bd80      	pop	{r7, pc}
 8080af4:	40021000 	.word	0x40021000
 8080af8:	48000800 	.word	0x48000800

08080afc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8080afc:	b580      	push	{r7, lr}
 8080afe:	b096      	sub	sp, #88	@ 0x58
 8080b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8080b02:	f107 0314 	add.w	r3, r7, #20
 8080b06:	2244      	movs	r2, #68	@ 0x44
 8080b08:	2100      	movs	r1, #0
 8080b0a:	4618      	mov	r0, r3
 8080b0c:	f003 feeb 	bl	80848e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8080b10:	463b      	mov	r3, r7
 8080b12:	2200      	movs	r2, #0
 8080b14:	601a      	str	r2, [r3, #0]
 8080b16:	605a      	str	r2, [r3, #4]
 8080b18:	609a      	str	r2, [r3, #8]
 8080b1a:	60da      	str	r2, [r3, #12]
 8080b1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8080b1e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8080b22:	f001 fc5d 	bl	80823e0 <HAL_PWREx_ControlVoltageScaling>
 8080b26:	4603      	mov	r3, r0
 8080b28:	2b00      	cmp	r3, #0
 8080b2a:	d001      	beq.n	8080b30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8080b2c:	f000 f89e 	bl	8080c6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8080b30:	2302      	movs	r3, #2
 8080b32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8080b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8080b38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8080b3a:	2340      	movs	r3, #64	@ 0x40
 8080b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8080b3e:	2302      	movs	r3, #2
 8080b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8080b42:	2302      	movs	r3, #2
 8080b44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8080b46:	2301      	movs	r3, #1
 8080b48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8080b4a:	230a      	movs	r3, #10
 8080b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8080b4e:	2302      	movs	r3, #2
 8080b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8080b52:	2302      	movs	r3, #2
 8080b54:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8080b56:	2302      	movs	r3, #2
 8080b58:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8080b5a:	f107 0314 	add.w	r3, r7, #20
 8080b5e:	4618      	mov	r0, r3
 8080b60:	f001 fd46 	bl	80825f0 <HAL_RCC_OscConfig>
 8080b64:	4603      	mov	r3, r0
 8080b66:	2b00      	cmp	r3, #0
 8080b68:	d001      	beq.n	8080b6e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8080b6a:	f000 f87f 	bl	8080c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8080b6e:	230f      	movs	r3, #15
 8080b70:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8080b72:	2303      	movs	r3, #3
 8080b74:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8080b76:	2300      	movs	r3, #0
 8080b78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8080b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8080b7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8080b80:	2300      	movs	r3, #0
 8080b82:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8080b84:	463b      	mov	r3, r7
 8080b86:	2104      	movs	r1, #4
 8080b88:	4618      	mov	r0, r3
 8080b8a:	f002 f94b 	bl	8082e24 <HAL_RCC_ClockConfig>
 8080b8e:	4603      	mov	r3, r0
 8080b90:	2b00      	cmp	r3, #0
 8080b92:	d001      	beq.n	8080b98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8080b94:	f000 f86a 	bl	8080c6c <Error_Handler>
  }
}
 8080b98:	bf00      	nop
 8080b9a:	3758      	adds	r7, #88	@ 0x58
 8080b9c:	46bd      	mov	sp, r7
 8080b9e:	bd80      	pop	{r7, pc}

08080ba0 <IAP_Init>:
  * @brief  Initialize the IAP: Configure USART.
  * @param  None
  * @retval None
  */
void IAP_Init(void)
{
 8080ba0:	b580      	push	{r7, lr}
 8080ba2:	b082      	sub	sp, #8
 8080ba4:	af00      	add	r7, sp, #0
        - One Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  hlpuart1.Instance = LPUART1;
 8080ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8080c58 <IAP_Init+0xb8>)
 8080ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8080c5c <IAP_Init+0xbc>)
 8080baa:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8080bac:	4b2a      	ldr	r3, [pc, #168]	@ (8080c58 <IAP_Init+0xb8>)
 8080bae:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8080bb2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8080bb4:	4b28      	ldr	r3, [pc, #160]	@ (8080c58 <IAP_Init+0xb8>)
 8080bb6:	2200      	movs	r2, #0
 8080bb8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8080bba:	4b27      	ldr	r3, [pc, #156]	@ (8080c58 <IAP_Init+0xb8>)
 8080bbc:	2200      	movs	r2, #0
 8080bbe:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8080bc0:	4b25      	ldr	r3, [pc, #148]	@ (8080c58 <IAP_Init+0xb8>)
 8080bc2:	2200      	movs	r2, #0
 8080bc4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8080bc6:	4b24      	ldr	r3, [pc, #144]	@ (8080c58 <IAP_Init+0xb8>)
 8080bc8:	2200      	movs	r2, #0
 8080bca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 8080bcc:	4b22      	ldr	r3, [pc, #136]	@ (8080c58 <IAP_Init+0xb8>)
 8080bce:	220c      	movs	r2, #12
 8080bd0:	615a      	str	r2, [r3, #20]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8080bd2:	4b21      	ldr	r3, [pc, #132]	@ (8080c58 <IAP_Init+0xb8>)
 8080bd4:	2210      	movs	r2, #16
 8080bd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8080bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8080c58 <IAP_Init+0xb8>)
 8080bda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8080bde:	639a      	str	r2, [r3, #56]	@ 0x38

  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8080be0:	481d      	ldr	r0, [pc, #116]	@ (8080c58 <IAP_Init+0xb8>)
 8080be2:	f003 f80d 	bl	8083c00 <HAL_UART_Init>
 8080be6:	4603      	mov	r3, r0
 8080be8:	2b00      	cmp	r3, #0
 8080bea:	d001      	beq.n	8080bf0 <IAP_Init+0x50>
  {
    /* Initialization Error */
    Error_Handler();
 8080bec:	f000 f83e 	bl	8080c6c <Error_Handler>
  }

  __HAL_RCC_CRC_CLK_ENABLE();
 8080bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8080c60 <IAP_Init+0xc0>)
 8080bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8080bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8080c60 <IAP_Init+0xc0>)
 8080bf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8080bfa:	6493      	str	r3, [r2, #72]	@ 0x48
 8080bfc:	4b18      	ldr	r3, [pc, #96]	@ (8080c60 <IAP_Init+0xc0>)
 8080bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8080c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8080c04:	607b      	str	r3, [r7, #4]
 8080c06:	687b      	ldr	r3, [r7, #4]

  /*##-2- Configure the CRC peripheral #####################################*/
  CrcHandle.Instance = CRC;
 8080c08:	4b16      	ldr	r3, [pc, #88]	@ (8080c64 <IAP_Init+0xc4>)
 8080c0a:	4a17      	ldr	r2, [pc, #92]	@ (8080c68 <IAP_Init+0xc8>)
 8080c0c:	601a      	str	r2, [r3, #0]

  /* The CRC-16-CCIT polynomial is used */
  CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 8080c0e:	4b15      	ldr	r3, [pc, #84]	@ (8080c64 <IAP_Init+0xc4>)
 8080c10:	2201      	movs	r2, #1
 8080c12:	711a      	strb	r2, [r3, #4]
  CrcHandle.Init.GeneratingPolynomial    = 0x1021;
 8080c14:	4b13      	ldr	r3, [pc, #76]	@ (8080c64 <IAP_Init+0xc4>)
 8080c16:	f241 0221 	movw	r2, #4129	@ 0x1021
 8080c1a:	609a      	str	r2, [r3, #8]
  CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_16B;
 8080c1c:	4b11      	ldr	r3, [pc, #68]	@ (8080c64 <IAP_Init+0xc4>)
 8080c1e:	2208      	movs	r2, #8
 8080c20:	60da      	str	r2, [r3, #12]

  /* The zero init value is used */
  CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_DISABLE;
 8080c22:	4b10      	ldr	r3, [pc, #64]	@ (8080c64 <IAP_Init+0xc4>)
 8080c24:	2201      	movs	r2, #1
 8080c26:	715a      	strb	r2, [r3, #5]
  CrcHandle.Init.InitValue               = 0;
 8080c28:	4b0e      	ldr	r3, [pc, #56]	@ (8080c64 <IAP_Init+0xc4>)
 8080c2a:	2200      	movs	r2, #0
 8080c2c:	611a      	str	r2, [r3, #16]

  /* The input data are not inverted */
  CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 8080c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8080c64 <IAP_Init+0xc4>)
 8080c30:	2200      	movs	r2, #0
 8080c32:	615a      	str	r2, [r3, #20]

  /* The output data are not inverted */
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8080c34:	4b0b      	ldr	r3, [pc, #44]	@ (8080c64 <IAP_Init+0xc4>)
 8080c36:	2200      	movs	r2, #0
 8080c38:	619a      	str	r2, [r3, #24]

  /* The input data are 32-bit long words */
  CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
 8080c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8080c64 <IAP_Init+0xc4>)
 8080c3c:	2201      	movs	r2, #1
 8080c3e:	621a      	str	r2, [r3, #32]

  if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 8080c40:	4808      	ldr	r0, [pc, #32]	@ (8080c64 <IAP_Init+0xc4>)
 8080c42:	f000 fd63 	bl	808170c <HAL_CRC_Init>
 8080c46:	4603      	mov	r3, r0
 8080c48:	2b00      	cmp	r3, #0
 8080c4a:	d001      	beq.n	8080c50 <IAP_Init+0xb0>
  {
    while (1)
 8080c4c:	bf00      	nop
 8080c4e:	e7fd      	b.n	8080c4c <IAP_Init+0xac>
    {}
  }
}
 8080c50:	bf00      	nop
 8080c52:	3708      	adds	r7, #8
 8080c54:	46bd      	mov	sp, r7
 8080c56:	bd80      	pop	{r7, pc}
 8080c58:	20000048 	.word	0x20000048
 8080c5c:	40008000 	.word	0x40008000
 8080c60:	40021000 	.word	0x40021000
 8080c64:	200000d0 	.word	0x200000d0
 8080c68:	40023000 	.word	0x40023000

08080c6c <Error_Handler>:

  return ch;
}

void Error_Handler(void)
{
 8080c6c:	b480      	push	{r7}
 8080c6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8080c70:	b672      	cpsid	i
}
 8080c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8080c74:	bf00      	nop
 8080c76:	e7fd      	b.n	8080c74 <Error_Handler+0x8>

08080c78 <SerialDownload>:
uint32_t FlashProtection = 0;
uint8_t aFileName[FILE_NAME_LENGTH];

/* Private function prototypes -----------------------------------------------*/
void SerialDownload(void)
{
 8080c78:	b580      	push	{r7, lr}
 8080c7a:	b084      	sub	sp, #16
 8080c7c:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8080c7e:	2300      	movs	r3, #0
 8080c80:	607b      	str	r3, [r7, #4]
 8080c82:	f107 0308 	add.w	r3, r7, #8
 8080c86:	2200      	movs	r2, #0
 8080c88:	601a      	str	r2, [r3, #0]
 8080c8a:	f8c3 2003 	str.w	r2, [r3, #3]
  uint32_t size = 0;
 8080c8e:	2300      	movs	r3, #0
 8080c90:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;

  Serial_PutString((uint8_t *)"Bootloader mode initiated \r\n");
 8080c92:	4828      	ldr	r0, [pc, #160]	@ (8080d34 <SerialDownload+0xbc>)
 8080c94:	f7ff fd6a 	bl	808076c <Serial_PutString>
  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8080c98:	4827      	ldr	r0, [pc, #156]	@ (8080d38 <SerialDownload+0xc0>)
 8080c9a:	f7ff fd67 	bl	808076c <Serial_PutString>

  result = Ymodem_Receive(&size);
 8080c9e:	463b      	mov	r3, r7
 8080ca0:	4618      	mov	r0, r3
 8080ca2:	f000 fa51 	bl	8081148 <Ymodem_Receive>
 8080ca6:	4603      	mov	r3, r0
 8080ca8:	73fb      	strb	r3, [r7, #15]

  if (result == COM_OK)
 8080caa:	7bfb      	ldrb	r3, [r7, #15]
 8080cac:	2b00      	cmp	r3, #0
 8080cae:	d125      	bne.n	8080cfc <SerialDownload+0x84>
  {
    Serial_PutString((uint8_t *)"\r\n Application downloaded successfully");
 8080cb0:	4822      	ldr	r0, [pc, #136]	@ (8080d3c <SerialDownload+0xc4>)
 8080cb2:	f7ff fd5b 	bl	808076c <Serial_PutString>
    Serial_PutString((uint8_t *)"\r\n Programming Completed Successfully!");
 8080cb6:	4822      	ldr	r0, [pc, #136]	@ (8080d40 <SerialDownload+0xc8>)
 8080cb8:	f7ff fd58 	bl	808076c <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\r\n");
 8080cbc:	4821      	ldr	r0, [pc, #132]	@ (8080d44 <SerialDownload+0xcc>)
 8080cbe:	f7ff fd55 	bl	808076c <Serial_PutString>
    Serial_PutString((uint8_t *)"\r\n Name: ");
 8080cc2:	4821      	ldr	r0, [pc, #132]	@ (8080d48 <SerialDownload+0xd0>)
 8080cc4:	f7ff fd52 	bl	808076c <Serial_PutString>
    Serial_PutString(aFileName);
 8080cc8:	4820      	ldr	r0, [pc, #128]	@ (8080d4c <SerialDownload+0xd4>)
 8080cca:	f7ff fd4f 	bl	808076c <Serial_PutString>
    Int2Str(number, size);
 8080cce:	683a      	ldr	r2, [r7, #0]
 8080cd0:	1d3b      	adds	r3, r7, #4
 8080cd2:	4611      	mov	r1, r2
 8080cd4:	4618      	mov	r0, r3
 8080cd6:	f7ff fc09 	bl	80804ec <Int2Str>
    Serial_PutString((uint8_t *)"\r\n Size: ");
 8080cda:	481d      	ldr	r0, [pc, #116]	@ (8080d50 <SerialDownload+0xd8>)
 8080cdc:	f7ff fd46 	bl	808076c <Serial_PutString>
    Serial_PutString(number);
 8080ce0:	1d3b      	adds	r3, r7, #4
 8080ce2:	4618      	mov	r0, r3
 8080ce4:	f7ff fd42 	bl	808076c <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8080ce8:	481a      	ldr	r0, [pc, #104]	@ (8080d54 <SerialDownload+0xdc>)
 8080cea:	f7ff fd3f 	bl	808076c <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\r\n");
 8080cee:	4815      	ldr	r0, [pc, #84]	@ (8080d44 <SerialDownload+0xcc>)
 8080cf0:	f7ff fd3c 	bl	808076c <Serial_PutString>
    Serial_PutString((uint8_t *)" Jumping to application...\r\n");
 8080cf4:	4818      	ldr	r0, [pc, #96]	@ (8080d58 <SerialDownload+0xe0>)
 8080cf6:	f7ff fd39 	bl	808076c <Serial_PutString>
  }
  else
  {
    Serial_PutString((uint8_t *)"Failed to receive the file!\n\r");
  }
}
 8080cfa:	e017      	b.n	8080d2c <SerialDownload+0xb4>
  else if (result == COM_LIMIT)
 8080cfc:	7bfb      	ldrb	r3, [r7, #15]
 8080cfe:	2b05      	cmp	r3, #5
 8080d00:	d103      	bne.n	8080d0a <SerialDownload+0x92>
    Serial_PutString((uint8_t *)"The image size is higher than the allowed space memory!\n\r");
 8080d02:	4816      	ldr	r0, [pc, #88]	@ (8080d5c <SerialDownload+0xe4>)
 8080d04:	f7ff fd32 	bl	808076c <Serial_PutString>
}
 8080d08:	e010      	b.n	8080d2c <SerialDownload+0xb4>
  else if (result == COM_DATA)
 8080d0a:	7bfb      	ldrb	r3, [r7, #15]
 8080d0c:	2b04      	cmp	r3, #4
 8080d0e:	d103      	bne.n	8080d18 <SerialDownload+0xa0>
    Serial_PutString((uint8_t *)"Verification failed!\n\r");
 8080d10:	4813      	ldr	r0, [pc, #76]	@ (8080d60 <SerialDownload+0xe8>)
 8080d12:	f7ff fd2b 	bl	808076c <Serial_PutString>
}
 8080d16:	e009      	b.n	8080d2c <SerialDownload+0xb4>
  else if (result == COM_ABORT)
 8080d18:	7bfb      	ldrb	r3, [r7, #15]
 8080d1a:	2b02      	cmp	r3, #2
 8080d1c:	d103      	bne.n	8080d26 <SerialDownload+0xae>
    Serial_PutString((uint8_t *)"Aborted by user.\n\r");
 8080d1e:	4811      	ldr	r0, [pc, #68]	@ (8080d64 <SerialDownload+0xec>)
 8080d20:	f7ff fd24 	bl	808076c <Serial_PutString>
}
 8080d24:	e002      	b.n	8080d2c <SerialDownload+0xb4>
    Serial_PutString((uint8_t *)"Failed to receive the file!\n\r");
 8080d26:	4810      	ldr	r0, [pc, #64]	@ (8080d68 <SerialDownload+0xf0>)
 8080d28:	f7ff fd20 	bl	808076c <Serial_PutString>
}
 8080d2c:	bf00      	nop
 8080d2e:	3710      	adds	r7, #16
 8080d30:	46bd      	mov	sp, r7
 8080d32:	bd80      	pop	{r7, pc}
 8080d34:	08084970 	.word	0x08084970
 8080d38:	08084990 	.word	0x08084990
 8080d3c:	080849cc 	.word	0x080849cc
 8080d40:	080849f4 	.word	0x080849f4
 8080d44:	08084a1c 	.word	0x08084a1c
 8080d48:	08084a34 	.word	0x08084a34
 8080d4c:	200000fc 	.word	0x200000fc
 8080d50:	08084a40 	.word	0x08084a40
 8080d54:	08084a4c 	.word	0x08084a4c
 8080d58:	08084a58 	.word	0x08084a58
 8080d5c:	08084a78 	.word	0x08084a78
 8080d60:	08084ab4 	.word	0x08084ab4
 8080d64:	08084acc 	.word	0x08084acc
 8080d68:	08084ae0 	.word	0x08084ae0

08080d6c <Main_Menu>:
  * @brief  Main function for the bootloader.
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 8080d6c:	b580      	push	{r7, lr}
 8080d6e:	b082      	sub	sp, #8
 8080d70:	af00      	add	r7, sp, #0
  SerialDownload();
 8080d72:	f7ff ff81 	bl	8080c78 <SerialDownload>

  /* Directly initiate the download process */

  /* Verify if the application address is valid before jumping */
  if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x20000000) == 0x20000000)
 8080d76:	4b13      	ldr	r3, [pc, #76]	@ (8080dc4 <Main_Menu+0x58>)
 8080d78:	681b      	ldr	r3, [r3, #0]
 8080d7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8080d7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8080d82:	d117      	bne.n	8080db4 <Main_Menu+0x48>
  {
    /* Get the application entry point address from the vector table */
    JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8080d84:	4b10      	ldr	r3, [pc, #64]	@ (8080dc8 <Main_Menu+0x5c>)
 8080d86:	681b      	ldr	r3, [r3, #0]
 8080d88:	4a10      	ldr	r2, [pc, #64]	@ (8080dcc <Main_Menu+0x60>)
 8080d8a:	6013      	str	r3, [r2, #0]
    /* Jump to user application */
    JumpToApplication = (pFunction) JumpAddress;
 8080d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8080dcc <Main_Menu+0x60>)
 8080d8e:	681b      	ldr	r3, [r3, #0]
 8080d90:	461a      	mov	r2, r3
 8080d92:	4b0f      	ldr	r3, [pc, #60]	@ (8080dd0 <Main_Menu+0x64>)
 8080d94:	601a      	str	r2, [r3, #0]
    /* Initialize user application's Stack Pointer */
    __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8080d96:	4b0b      	ldr	r3, [pc, #44]	@ (8080dc4 <Main_Menu+0x58>)
 8080d98:	681b      	ldr	r3, [r3, #0]
 8080d9a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8080d9c:	687b      	ldr	r3, [r7, #4]
 8080d9e:	f383 8808 	msr	MSP, r3
}
 8080da2:	bf00      	nop

    /* Deinitialize peripherals to avoid conflicts */
    HAL_RCC_DeInit();
 8080da4:	f001 fb82 	bl	80824ac <HAL_RCC_DeInit>
    HAL_DeInit();
 8080da8:	f000 fb32 	bl	8081410 <HAL_DeInit>

    JumpToApplication();
 8080dac:	4b08      	ldr	r3, [pc, #32]	@ (8080dd0 <Main_Menu+0x64>)
 8080dae:	681b      	ldr	r3, [r3, #0]
 8080db0:	4798      	blx	r3
  }
  else
  {
    Serial_PutString((uint8_t *)"Invalid application address!\n\r");
  }
}
 8080db2:	e002      	b.n	8080dba <Main_Menu+0x4e>
    Serial_PutString((uint8_t *)"Invalid application address!\n\r");
 8080db4:	4807      	ldr	r0, [pc, #28]	@ (8080dd4 <Main_Menu+0x68>)
 8080db6:	f7ff fcd9 	bl	808076c <Serial_PutString>
}
 8080dba:	bf00      	nop
 8080dbc:	3708      	adds	r7, #8
 8080dbe:	46bd      	mov	sp, r7
 8080dc0:	bd80      	pop	{r7, pc}
 8080dc2:	bf00      	nop
 8080dc4:	08080000 	.word	0x08080000
 8080dc8:	08080004 	.word	0x08080004
 8080dcc:	200000f8 	.word	0x200000f8
 8080dd0:	200000f4 	.word	0x200000f4
 8080dd4:	08084b00 	.word	0x08084b00

08080dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8080dd8:	b480      	push	{r7}
 8080dda:	b083      	sub	sp, #12
 8080ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8080dde:	4b0f      	ldr	r3, [pc, #60]	@ (8080e1c <HAL_MspInit+0x44>)
 8080de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8080de2:	4a0e      	ldr	r2, [pc, #56]	@ (8080e1c <HAL_MspInit+0x44>)
 8080de4:	f043 0301 	orr.w	r3, r3, #1
 8080de8:	6613      	str	r3, [r2, #96]	@ 0x60
 8080dea:	4b0c      	ldr	r3, [pc, #48]	@ (8080e1c <HAL_MspInit+0x44>)
 8080dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8080dee:	f003 0301 	and.w	r3, r3, #1
 8080df2:	607b      	str	r3, [r7, #4]
 8080df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8080df6:	4b09      	ldr	r3, [pc, #36]	@ (8080e1c <HAL_MspInit+0x44>)
 8080df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8080dfa:	4a08      	ldr	r2, [pc, #32]	@ (8080e1c <HAL_MspInit+0x44>)
 8080dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8080e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8080e02:	4b06      	ldr	r3, [pc, #24]	@ (8080e1c <HAL_MspInit+0x44>)
 8080e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8080e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8080e0a:	603b      	str	r3, [r7, #0]
 8080e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8080e0e:	bf00      	nop
 8080e10:	370c      	adds	r7, #12
 8080e12:	46bd      	mov	sp, r7
 8080e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080e18:	4770      	bx	lr
 8080e1a:	bf00      	nop
 8080e1c:	40021000 	.word	0x40021000

08080e20 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8080e20:	b480      	push	{r7}
 8080e22:	b085      	sub	sp, #20
 8080e24:	af00      	add	r7, sp, #0
 8080e26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8080e28:	687b      	ldr	r3, [r7, #4]
 8080e2a:	681b      	ldr	r3, [r3, #0]
 8080e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8080e58 <HAL_CRC_MspInit+0x38>)
 8080e2e:	4293      	cmp	r3, r2
 8080e30:	d10b      	bne.n	8080e4a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8080e32:	4b0a      	ldr	r3, [pc, #40]	@ (8080e5c <HAL_CRC_MspInit+0x3c>)
 8080e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8080e36:	4a09      	ldr	r2, [pc, #36]	@ (8080e5c <HAL_CRC_MspInit+0x3c>)
 8080e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8080e3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8080e3e:	4b07      	ldr	r3, [pc, #28]	@ (8080e5c <HAL_CRC_MspInit+0x3c>)
 8080e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8080e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8080e46:	60fb      	str	r3, [r7, #12]
 8080e48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8080e4a:	bf00      	nop
 8080e4c:	3714      	adds	r7, #20
 8080e4e:	46bd      	mov	sp, r7
 8080e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080e54:	4770      	bx	lr
 8080e56:	bf00      	nop
 8080e58:	40023000 	.word	0x40023000
 8080e5c:	40021000 	.word	0x40021000

08080e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8080e60:	b580      	push	{r7, lr}
 8080e62:	b0ac      	sub	sp, #176	@ 0xb0
 8080e64:	af00      	add	r7, sp, #0
 8080e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8080e68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8080e6c:	2200      	movs	r2, #0
 8080e6e:	601a      	str	r2, [r3, #0]
 8080e70:	605a      	str	r2, [r3, #4]
 8080e72:	609a      	str	r2, [r3, #8]
 8080e74:	60da      	str	r2, [r3, #12]
 8080e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8080e78:	f107 0310 	add.w	r3, r7, #16
 8080e7c:	228c      	movs	r2, #140	@ 0x8c
 8080e7e:	2100      	movs	r1, #0
 8080e80:	4618      	mov	r0, r3
 8080e82:	f003 fd30 	bl	80848e6 <memset>
  if(huart->Instance==LPUART1)
 8080e86:	687b      	ldr	r3, [r7, #4]
 8080e88:	681b      	ldr	r3, [r3, #0]
 8080e8a:	4a22      	ldr	r2, [pc, #136]	@ (8080f14 <HAL_UART_MspInit+0xb4>)
 8080e8c:	4293      	cmp	r3, r2
 8080e8e:	d13d      	bne.n	8080f0c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8080e90:	2320      	movs	r3, #32
 8080e92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8080e94:	2300      	movs	r3, #0
 8080e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8080e98:	f107 0310 	add.w	r3, r7, #16
 8080e9c:	4618      	mov	r0, r3
 8080e9e:	f002 f9e5 	bl	808326c <HAL_RCCEx_PeriphCLKConfig>
 8080ea2:	4603      	mov	r3, r0
 8080ea4:	2b00      	cmp	r3, #0
 8080ea6:	d001      	beq.n	8080eac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8080ea8:	f7ff fee0 	bl	8080c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8080eac:	4b1a      	ldr	r3, [pc, #104]	@ (8080f18 <HAL_UART_MspInit+0xb8>)
 8080eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8080eb0:	4a19      	ldr	r2, [pc, #100]	@ (8080f18 <HAL_UART_MspInit+0xb8>)
 8080eb2:	f043 0301 	orr.w	r3, r3, #1
 8080eb6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8080eb8:	4b17      	ldr	r3, [pc, #92]	@ (8080f18 <HAL_UART_MspInit+0xb8>)
 8080eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8080ebc:	f003 0301 	and.w	r3, r3, #1
 8080ec0:	60fb      	str	r3, [r7, #12]
 8080ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8080ec4:	4b14      	ldr	r3, [pc, #80]	@ (8080f18 <HAL_UART_MspInit+0xb8>)
 8080ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8080ec8:	4a13      	ldr	r2, [pc, #76]	@ (8080f18 <HAL_UART_MspInit+0xb8>)
 8080eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8080ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8080ed0:	4b11      	ldr	r3, [pc, #68]	@ (8080f18 <HAL_UART_MspInit+0xb8>)
 8080ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8080ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8080ed8:	60bb      	str	r3, [r7, #8]
 8080eda:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8080edc:	f001 fad6 	bl	808248c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8080ee0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8080ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8080ee8:	2302      	movs	r3, #2
 8080eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8080eee:	2300      	movs	r3, #0
 8080ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8080ef4:	2303      	movs	r3, #3
 8080ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8080efa:	2308      	movs	r3, #8
 8080efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8080f00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8080f04:	4619      	mov	r1, r3
 8080f06:	4805      	ldr	r0, [pc, #20]	@ (8080f1c <HAL_UART_MspInit+0xbc>)
 8080f08:	f001 f89a 	bl	8082040 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8080f0c:	bf00      	nop
 8080f0e:	37b0      	adds	r7, #176	@ 0xb0
 8080f10:	46bd      	mov	sp, r7
 8080f12:	bd80      	pop	{r7, pc}
 8080f14:	40008000 	.word	0x40008000
 8080f18:	40021000 	.word	0x40021000
 8080f1c:	48001800 	.word	0x48001800

08080f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8080f20:	b480      	push	{r7}
 8080f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8080f24:	bf00      	nop
 8080f26:	e7fd      	b.n	8080f24 <NMI_Handler+0x4>

08080f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8080f28:	b480      	push	{r7}
 8080f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8080f2c:	bf00      	nop
 8080f2e:	e7fd      	b.n	8080f2c <HardFault_Handler+0x4>

08080f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8080f30:	b480      	push	{r7}
 8080f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8080f34:	bf00      	nop
 8080f36:	e7fd      	b.n	8080f34 <MemManage_Handler+0x4>

08080f38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8080f38:	b480      	push	{r7}
 8080f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8080f3c:	bf00      	nop
 8080f3e:	e7fd      	b.n	8080f3c <BusFault_Handler+0x4>

08080f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8080f40:	b480      	push	{r7}
 8080f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8080f44:	bf00      	nop
 8080f46:	e7fd      	b.n	8080f44 <UsageFault_Handler+0x4>

08080f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8080f48:	b480      	push	{r7}
 8080f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8080f4c:	bf00      	nop
 8080f4e:	46bd      	mov	sp, r7
 8080f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080f54:	4770      	bx	lr

08080f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8080f56:	b480      	push	{r7}
 8080f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8080f5a:	bf00      	nop
 8080f5c:	46bd      	mov	sp, r7
 8080f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080f62:	4770      	bx	lr

08080f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8080f64:	b480      	push	{r7}
 8080f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8080f68:	bf00      	nop
 8080f6a:	46bd      	mov	sp, r7
 8080f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080f70:	4770      	bx	lr

08080f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8080f72:	b580      	push	{r7, lr}
 8080f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8080f76:	f000 fac3 	bl	8081500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8080f7a:	bf00      	nop
 8080f7c:	bd80      	pop	{r7, pc}
	...

08080f80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8080f80:	b480      	push	{r7}
 8080f82:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8080f84:	4b08      	ldr	r3, [pc, #32]	@ (8080fa8 <SystemInit+0x28>)
 8080f86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8080f8a:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8080f8c:	4b06      	ldr	r3, [pc, #24]	@ (8080fa8 <SystemInit+0x28>)
 8080f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8080f92:	4a05      	ldr	r2, [pc, #20]	@ (8080fa8 <SystemInit+0x28>)
 8080f94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8080f98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8080f9c:	bf00      	nop
 8080f9e:	46bd      	mov	sp, r7
 8080fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080fa4:	4770      	bx	lr
 8080fa6:	bf00      	nop
 8080fa8:	e000ed00 	.word	0xe000ed00

08080fac <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 8080fac:	b580      	push	{r7, lr}
 8080fae:	b088      	sub	sp, #32
 8080fb0:	af00      	add	r7, sp, #0
 8080fb2:	60f8      	str	r0, [r7, #12]
 8080fb4:	60b9      	str	r1, [r7, #8]
 8080fb6:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8080fb8:	2300      	movs	r3, #0
 8080fba:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 8080fbc:	68bb      	ldr	r3, [r7, #8]
 8080fbe:	2200      	movs	r2, #0
 8080fc0:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&hlpuart1, &char1, 1, timeout);
 8080fc2:	f107 0113 	add.w	r1, r7, #19
 8080fc6:	687b      	ldr	r3, [r7, #4]
 8080fc8:	2201      	movs	r2, #1
 8080fca:	485d      	ldr	r0, [pc, #372]	@ (8081140 <ReceivePacket+0x194>)
 8080fcc:	f002 feef 	bl	8083dae <HAL_UART_Receive>
 8080fd0:	4603      	mov	r3, r0
 8080fd2:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 8080fd4:	7efb      	ldrb	r3, [r7, #27]
 8080fd6:	2b00      	cmp	r3, #0
 8080fd8:	f040 80aa 	bne.w	8081130 <ReceivePacket+0x184>
  {
    switch (char1)
 8080fdc:	7cfb      	ldrb	r3, [r7, #19]
 8080fde:	2b61      	cmp	r3, #97	@ 0x61
 8080fe0:	d059      	beq.n	8081096 <ReceivePacket+0xea>
 8080fe2:	2b61      	cmp	r3, #97	@ 0x61
 8080fe4:	dc5a      	bgt.n	808109c <ReceivePacket+0xf0>
 8080fe6:	2b18      	cmp	r3, #24
 8080fe8:	dc38      	bgt.n	808105c <ReceivePacket+0xb0>
 8080fea:	2b00      	cmp	r3, #0
 8080fec:	dd56      	ble.n	808109c <ReceivePacket+0xf0>
 8080fee:	3b01      	subs	r3, #1
 8080ff0:	2b17      	cmp	r3, #23
 8080ff2:	d853      	bhi.n	808109c <ReceivePacket+0xf0>
 8080ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8080ffc <ReceivePacket+0x50>)
 8080ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8080ffa:	bf00      	nop
 8080ffc:	08081063 	.word	0x08081063
 8081000:	08081069 	.word	0x08081069
 8081004:	0808109d 	.word	0x0808109d
 8081008:	080810a3 	.word	0x080810a3
 808100c:	0808109d 	.word	0x0808109d
 8081010:	0808109d 	.word	0x0808109d
 8081014:	0808109d 	.word	0x0808109d
 8081018:	0808109d 	.word	0x0808109d
 808101c:	0808109d 	.word	0x0808109d
 8081020:	0808109d 	.word	0x0808109d
 8081024:	0808109d 	.word	0x0808109d
 8081028:	0808109d 	.word	0x0808109d
 808102c:	0808109d 	.word	0x0808109d
 8081030:	0808109d 	.word	0x0808109d
 8081034:	0808109d 	.word	0x0808109d
 8081038:	0808109d 	.word	0x0808109d
 808103c:	0808109d 	.word	0x0808109d
 8081040:	0808109d 	.word	0x0808109d
 8081044:	0808109d 	.word	0x0808109d
 8081048:	0808109d 	.word	0x0808109d
 808104c:	0808109d 	.word	0x0808109d
 8081050:	0808109d 	.word	0x0808109d
 8081054:	0808109d 	.word	0x0808109d
 8081058:	08081071 	.word	0x08081071
 808105c:	2b41      	cmp	r3, #65	@ 0x41
 808105e:	d01a      	beq.n	8081096 <ReceivePacket+0xea>
 8081060:	e01c      	b.n	808109c <ReceivePacket+0xf0>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 8081062:	2380      	movs	r3, #128	@ 0x80
 8081064:	61fb      	str	r3, [r7, #28]
        break;
 8081066:	e01d      	b.n	80810a4 <ReceivePacket+0xf8>
      case STX:
        packet_size = PACKET_1K_SIZE;
 8081068:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 808106c:	61fb      	str	r3, [r7, #28]
        break;
 808106e:	e019      	b.n	80810a4 <ReceivePacket+0xf8>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&hlpuart1, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8081070:	f107 0113 	add.w	r1, r7, #19
 8081074:	687b      	ldr	r3, [r7, #4]
 8081076:	2201      	movs	r2, #1
 8081078:	4831      	ldr	r0, [pc, #196]	@ (8081140 <ReceivePacket+0x194>)
 808107a:	f002 fe98 	bl	8083dae <HAL_UART_Receive>
 808107e:	4603      	mov	r3, r0
 8081080:	2b00      	cmp	r3, #0
 8081082:	d105      	bne.n	8081090 <ReceivePacket+0xe4>
 8081084:	7cfb      	ldrb	r3, [r7, #19]
 8081086:	2b18      	cmp	r3, #24
 8081088:	d102      	bne.n	8081090 <ReceivePacket+0xe4>
        {
          packet_size = 2;
 808108a:	2302      	movs	r3, #2
 808108c:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 808108e:	e009      	b.n	80810a4 <ReceivePacket+0xf8>
          status = HAL_ERROR;
 8081090:	2301      	movs	r3, #1
 8081092:	76fb      	strb	r3, [r7, #27]
        break;
 8081094:	e006      	b.n	80810a4 <ReceivePacket+0xf8>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 8081096:	2302      	movs	r3, #2
 8081098:	76fb      	strb	r3, [r7, #27]
        break;
 808109a:	e003      	b.n	80810a4 <ReceivePacket+0xf8>
      default:
        status = HAL_ERROR;
 808109c:	2301      	movs	r3, #1
 808109e:	76fb      	strb	r3, [r7, #27]
        break;
 80810a0:	e000      	b.n	80810a4 <ReceivePacket+0xf8>
        break;
 80810a2:	bf00      	nop
    }
    *p_data = char1;
 80810a4:	7cfa      	ldrb	r2, [r7, #19]
 80810a6:	68fb      	ldr	r3, [r7, #12]
 80810a8:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 80810aa:	69fb      	ldr	r3, [r7, #28]
 80810ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80810ae:	d93f      	bls.n	8081130 <ReceivePacket+0x184>
    {
      status = HAL_UART_Receive(&hlpuart1, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 80810b0:	68fb      	ldr	r3, [r7, #12]
 80810b2:	1c99      	adds	r1, r3, #2
 80810b4:	69fb      	ldr	r3, [r7, #28]
 80810b6:	b29b      	uxth	r3, r3
 80810b8:	3304      	adds	r3, #4
 80810ba:	b29a      	uxth	r2, r3
 80810bc:	687b      	ldr	r3, [r7, #4]
 80810be:	4820      	ldr	r0, [pc, #128]	@ (8081140 <ReceivePacket+0x194>)
 80810c0:	f002 fe75 	bl	8083dae <HAL_UART_Receive>
 80810c4:	4603      	mov	r3, r0
 80810c6:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 80810c8:	7efb      	ldrb	r3, [r7, #27]
 80810ca:	2b00      	cmp	r3, #0
 80810cc:	d12e      	bne.n	808112c <ReceivePacket+0x180>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 80810ce:	68fb      	ldr	r3, [r7, #12]
 80810d0:	3302      	adds	r3, #2
 80810d2:	781a      	ldrb	r2, [r3, #0]
 80810d4:	68fb      	ldr	r3, [r7, #12]
 80810d6:	3303      	adds	r3, #3
 80810d8:	781b      	ldrb	r3, [r3, #0]
 80810da:	43db      	mvns	r3, r3
 80810dc:	b2db      	uxtb	r3, r3
 80810de:	429a      	cmp	r2, r3
 80810e0:	d004      	beq.n	80810ec <ReceivePacket+0x140>
        {
          packet_size = 0;
 80810e2:	2300      	movs	r3, #0
 80810e4:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 80810e6:	2301      	movs	r3, #1
 80810e8:	76fb      	strb	r3, [r7, #27]
 80810ea:	e021      	b.n	8081130 <ReceivePacket+0x184>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 80810ec:	69fb      	ldr	r3, [r7, #28]
 80810ee:	3304      	adds	r3, #4
 80810f0:	68fa      	ldr	r2, [r7, #12]
 80810f2:	4413      	add	r3, r2
 80810f4:	781b      	ldrb	r3, [r3, #0]
 80810f6:	021b      	lsls	r3, r3, #8
 80810f8:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 80810fa:	69fb      	ldr	r3, [r7, #28]
 80810fc:	3305      	adds	r3, #5
 80810fe:	68fa      	ldr	r2, [r7, #12]
 8081100:	4413      	add	r3, r2
 8081102:	781b      	ldrb	r3, [r3, #0]
 8081104:	461a      	mov	r2, r3
 8081106:	697b      	ldr	r3, [r7, #20]
 8081108:	4413      	add	r3, r2
 808110a:	617b      	str	r3, [r7, #20]
          if (HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 808110c:	68fb      	ldr	r3, [r7, #12]
 808110e:	3304      	adds	r3, #4
 8081110:	69fa      	ldr	r2, [r7, #28]
 8081112:	4619      	mov	r1, r3
 8081114:	480b      	ldr	r0, [pc, #44]	@ (8081144 <ReceivePacket+0x198>)
 8081116:	f000 fb5d 	bl	80817d4 <HAL_CRC_Calculate>
 808111a:	4602      	mov	r2, r0
 808111c:	697b      	ldr	r3, [r7, #20]
 808111e:	4293      	cmp	r3, r2
 8081120:	d006      	beq.n	8081130 <ReceivePacket+0x184>
          {
            packet_size = 0;
 8081122:	2300      	movs	r3, #0
 8081124:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 8081126:	2301      	movs	r3, #1
 8081128:	76fb      	strb	r3, [r7, #27]
 808112a:	e001      	b.n	8081130 <ReceivePacket+0x184>
          }
        }
      }
      else
      {
        packet_size = 0;
 808112c:	2300      	movs	r3, #0
 808112e:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 8081130:	68bb      	ldr	r3, [r7, #8]
 8081132:	69fa      	ldr	r2, [r7, #28]
 8081134:	601a      	str	r2, [r3, #0]
  return status;
 8081136:	7efb      	ldrb	r3, [r7, #27]
}
 8081138:	4618      	mov	r0, r3
 808113a:	3720      	adds	r7, #32
 808113c:	46bd      	mov	sp, r7
 808113e:	bd80      	pop	{r7, pc}
 8081140:	20000048 	.word	0x20000048
 8081144:	200000d0 	.word	0x200000d0

08081148 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8081148:	b580      	push	{r7, lr}
 808114a:	b092      	sub	sp, #72	@ 0x48
 808114c:	af00      	add	r7, sp, #0
 808114e:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8081150:	2300      	movs	r3, #0
 8081152:	643b      	str	r3, [r7, #64]	@ 0x40
 8081154:	2300      	movs	r3, #0
 8081156:	63bb      	str	r3, [r7, #56]	@ 0x38
 8081158:	2300      	movs	r3, #0
 808115a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t flashdestination, ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 808115c:	2300      	movs	r3, #0
 808115e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8081162:	4b85      	ldr	r3, [pc, #532]	@ (8081378 <Ymodem_Receive+0x230>)
 8081164:	633b      	str	r3, [r7, #48]	@ 0x30

  while ((session_done == 0) && (result == COM_OK))
 8081166:	e0f9      	b.n	808135c <Ymodem_Receive+0x214>
  {
    packets_received = 0;
 8081168:	2300      	movs	r3, #0
 808116a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    file_done = 0;
 808116e:	2300      	movs	r3, #0
 8081170:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while ((file_done == 0) && (result == COM_OK))
 8081172:	e0eb      	b.n	808134c <Ymodem_Receive+0x204>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 8081174:	f107 0320 	add.w	r3, r7, #32
 8081178:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 808117c:	4619      	mov	r1, r3
 808117e:	487f      	ldr	r0, [pc, #508]	@ (808137c <Ymodem_Receive+0x234>)
 8081180:	f7ff ff14 	bl	8080fac <ReceivePacket>
 8081184:	4603      	mov	r3, r0
 8081186:	2b00      	cmp	r3, #0
 8081188:	d003      	beq.n	8081192 <Ymodem_Receive+0x4a>
 808118a:	2b02      	cmp	r3, #2
 808118c:	f000 80c0 	beq.w	8081310 <Ymodem_Receive+0x1c8>
 8081190:	e0c8      	b.n	8081324 <Ymodem_Receive+0x1dc>
      {
        case HAL_OK:
          errors = 0;
 8081192:	2300      	movs	r3, #0
 8081194:	63bb      	str	r3, [r7, #56]	@ 0x38
          switch (packet_length)
 8081196:	6a3b      	ldr	r3, [r7, #32]
 8081198:	2b00      	cmp	r3, #0
 808119a:	d008      	beq.n	80811ae <Ymodem_Receive+0x66>
 808119c:	2b02      	cmp	r3, #2
 808119e:	d10c      	bne.n	80811ba <Ymodem_Receive+0x72>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 80811a0:	2006      	movs	r0, #6
 80811a2:	f7ff faff 	bl	80807a4 <Serial_PutByte>
              result = COM_ABORT;
 80811a6:	2302      	movs	r3, #2
 80811a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
              break;
 80811ac:	e0af      	b.n	808130e <Ymodem_Receive+0x1c6>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 80811ae:	2006      	movs	r0, #6
 80811b0:	f7ff faf8 	bl	80807a4 <Serial_PutByte>
              file_done = 1;
 80811b4:	2301      	movs	r3, #1
 80811b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 80811b8:	e0a9      	b.n	808130e <Ymodem_Receive+0x1c6>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 80811ba:	4b70      	ldr	r3, [pc, #448]	@ (808137c <Ymodem_Receive+0x234>)
 80811bc:	789b      	ldrb	r3, [r3, #2]
 80811be:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80811c2:	429a      	cmp	r2, r3
 80811c4:	d003      	beq.n	80811ce <Ymodem_Receive+0x86>
              {
                Serial_PutByte(NAK);
 80811c6:	2015      	movs	r0, #21
 80811c8:	f7ff faec 	bl	80807a4 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 80811cc:	e09e      	b.n	808130c <Ymodem_Receive+0x1c4>
                if (packets_received == 0)
 80811ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80811d2:	2b00      	cmp	r3, #0
 80811d4:	d176      	bne.n	80812c4 <Ymodem_Receive+0x17c>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 80811d6:	4b69      	ldr	r3, [pc, #420]	@ (808137c <Ymodem_Receive+0x234>)
 80811d8:	791b      	ldrb	r3, [r3, #4]
 80811da:	2b00      	cmp	r3, #0
 80811dc:	d06a      	beq.n	80812b4 <Ymodem_Receive+0x16c>
                    i = 0;
 80811de:	2300      	movs	r3, #0
 80811e0:	647b      	str	r3, [r7, #68]	@ 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 80811e2:	4b67      	ldr	r3, [pc, #412]	@ (8081380 <Ymodem_Receive+0x238>)
 80811e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80811e6:	e008      	b.n	80811fa <Ymodem_Receive+0xb2>
                      aFileName[i++] = *file_ptr++;
 80811e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80811ea:	1c53      	adds	r3, r2, #1
 80811ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80811ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80811f0:	1c59      	adds	r1, r3, #1
 80811f2:	6479      	str	r1, [r7, #68]	@ 0x44
 80811f4:	7811      	ldrb	r1, [r2, #0]
 80811f6:	4a63      	ldr	r2, [pc, #396]	@ (8081384 <Ymodem_Receive+0x23c>)
 80811f8:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80811fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80811fc:	781b      	ldrb	r3, [r3, #0]
 80811fe:	2b00      	cmp	r3, #0
 8081200:	d002      	beq.n	8081208 <Ymodem_Receive+0xc0>
 8081202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8081204:	2b3f      	cmp	r3, #63	@ 0x3f
 8081206:	d9ef      	bls.n	80811e8 <Ymodem_Receive+0xa0>
                    aFileName[i++] = '\0';
 8081208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 808120a:	1c5a      	adds	r2, r3, #1
 808120c:	647a      	str	r2, [r7, #68]	@ 0x44
 808120e:	4a5d      	ldr	r2, [pc, #372]	@ (8081384 <Ymodem_Receive+0x23c>)
 8081210:	2100      	movs	r1, #0
 8081212:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 8081214:	2300      	movs	r3, #0
 8081216:	647b      	str	r3, [r7, #68]	@ 0x44
                    file_ptr ++;
 8081218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 808121a:	3301      	adds	r3, #1
 808121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 808121e:	e00a      	b.n	8081236 <Ymodem_Receive+0xee>
                      file_size[i++] = *file_ptr++;
 8081220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8081222:	1c53      	adds	r3, r2, #1
 8081224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8081226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8081228:	1c59      	adds	r1, r3, #1
 808122a:	6479      	str	r1, [r7, #68]	@ 0x44
 808122c:	7812      	ldrb	r2, [r2, #0]
 808122e:	3348      	adds	r3, #72	@ 0x48
 8081230:	443b      	add	r3, r7
 8081232:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8081236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8081238:	781b      	ldrb	r3, [r3, #0]
 808123a:	2b20      	cmp	r3, #32
 808123c:	d002      	beq.n	8081244 <Ymodem_Receive+0xfc>
 808123e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8081240:	2b0f      	cmp	r3, #15
 8081242:	d9ed      	bls.n	8081220 <Ymodem_Receive+0xd8>
                    file_size[i++] = '\0';
 8081244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8081246:	1c5a      	adds	r2, r3, #1
 8081248:	647a      	str	r2, [r7, #68]	@ 0x44
 808124a:	3348      	adds	r3, #72	@ 0x48
 808124c:	443b      	add	r3, r7
 808124e:	2200      	movs	r2, #0
 8081250:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 8081254:	f107 021c 	add.w	r2, r7, #28
 8081258:	f107 030c 	add.w	r3, r7, #12
 808125c:	4611      	mov	r1, r2
 808125e:	4618      	mov	r0, r3
 8081260:	f7ff f990 	bl	8080584 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8081264:	687b      	ldr	r3, [r7, #4]
 8081266:	681b      	ldr	r3, [r3, #0]
 8081268:	f243 0201 	movw	r2, #12289	@ 0x3001
 808126c:	4293      	cmp	r3, r2
 808126e:	d914      	bls.n	808129a <Ymodem_Receive+0x152>
                      tmp = CA;
 8081270:	2318      	movs	r3, #24
 8081272:	72fb      	strb	r3, [r7, #11]
                      HAL_UART_Transmit(&hlpuart1, &tmp, 1, NAK_TIMEOUT);
 8081274:	f107 010b 	add.w	r1, r7, #11
 8081278:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 808127c:	2201      	movs	r2, #1
 808127e:	4842      	ldr	r0, [pc, #264]	@ (8081388 <Ymodem_Receive+0x240>)
 8081280:	f002 fd0c 	bl	8083c9c <HAL_UART_Transmit>
                      HAL_UART_Transmit(&hlpuart1, &tmp, 1, NAK_TIMEOUT);
 8081284:	f107 010b 	add.w	r1, r7, #11
 8081288:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 808128c:	2201      	movs	r2, #1
 808128e:	483e      	ldr	r0, [pc, #248]	@ (8081388 <Ymodem_Receive+0x240>)
 8081290:	f002 fd04 	bl	8083c9c <HAL_UART_Transmit>
                      result = COM_LIMIT;
 8081294:	2305      	movs	r3, #5
 8081296:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 808129a:	4837      	ldr	r0, [pc, #220]	@ (8081378 <Ymodem_Receive+0x230>)
 808129c:	f7ff faaa 	bl	80807f4 <FLASH_If_Erase>
                    *p_size = filesize;
 80812a0:	69fa      	ldr	r2, [r7, #28]
 80812a2:	687b      	ldr	r3, [r7, #4]
 80812a4:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 80812a6:	2006      	movs	r0, #6
 80812a8:	f7ff fa7c 	bl	80807a4 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 80812ac:	2043      	movs	r0, #67	@ 0x43
 80812ae:	f7ff fa79 	bl	80807a4 <Serial_PutByte>
 80812b2:	e024      	b.n	80812fe <Ymodem_Receive+0x1b6>
                    Serial_PutByte(ACK);
 80812b4:	2006      	movs	r0, #6
 80812b6:	f7ff fa75 	bl	80807a4 <Serial_PutByte>
                    file_done = 1;
 80812ba:	2301      	movs	r3, #1
 80812bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    session_done = 1;
 80812be:	2301      	movs	r3, #1
 80812c0:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 80812c2:	e024      	b.n	808130e <Ymodem_Receive+0x1c6>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 80812c4:	4b2e      	ldr	r3, [pc, #184]	@ (8081380 <Ymodem_Receive+0x238>)
 80812c6:	627b      	str	r3, [r7, #36]	@ 0x24
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)                   
 80812c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80812ca:	6a3b      	ldr	r3, [r7, #32]
 80812cc:	089b      	lsrs	r3, r3, #2
 80812ce:	461a      	mov	r2, r3
 80812d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80812d2:	f7ff fafb 	bl	80808cc <FLASH_If_Write>
 80812d6:	4603      	mov	r3, r0
 80812d8:	2b00      	cmp	r3, #0
 80812da:	d107      	bne.n	80812ec <Ymodem_Receive+0x1a4>
                    flashdestination += packet_length;
 80812dc:	6a3b      	ldr	r3, [r7, #32]
 80812de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80812e0:	4413      	add	r3, r2
 80812e2:	633b      	str	r3, [r7, #48]	@ 0x30
                    Serial_PutByte(ACK);
 80812e4:	2006      	movs	r0, #6
 80812e6:	f7ff fa5d 	bl	80807a4 <Serial_PutByte>
 80812ea:	e008      	b.n	80812fe <Ymodem_Receive+0x1b6>
                    Serial_PutByte(CA);
 80812ec:	2018      	movs	r0, #24
 80812ee:	f7ff fa59 	bl	80807a4 <Serial_PutByte>
                    Serial_PutByte(CA);
 80812f2:	2018      	movs	r0, #24
 80812f4:	f7ff fa56 	bl	80807a4 <Serial_PutByte>
                    result = COM_DATA;
 80812f8:	2304      	movs	r3, #4
 80812fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                packets_received ++;
 80812fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8081302:	3301      	adds	r3, #1
 8081304:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                session_begin = 1;
 8081308:	2301      	movs	r3, #1
 808130a:	637b      	str	r3, [r7, #52]	@ 0x34
              break;
 808130c:	bf00      	nop
          }
          break;
 808130e:	e01d      	b.n	808134c <Ymodem_Receive+0x204>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 8081310:	2018      	movs	r0, #24
 8081312:	f7ff fa47 	bl	80807a4 <Serial_PutByte>
          Serial_PutByte(CA);
 8081316:	2018      	movs	r0, #24
 8081318:	f7ff fa44 	bl	80807a4 <Serial_PutByte>
          result = COM_ABORT;
 808131c:	2302      	movs	r3, #2
 808131e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
          break;
 8081322:	e013      	b.n	808134c <Ymodem_Receive+0x204>
        default:
          if (session_begin > 0)
 8081324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8081326:	2b00      	cmp	r3, #0
 8081328:	d002      	beq.n	8081330 <Ymodem_Receive+0x1e8>
          {
            errors ++;
 808132a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 808132c:	3301      	adds	r3, #1
 808132e:	63bb      	str	r3, [r7, #56]	@ 0x38
          }
          if (errors > MAX_ERRORS)
 8081330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8081332:	2b05      	cmp	r3, #5
 8081334:	d906      	bls.n	8081344 <Ymodem_Receive+0x1fc>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 8081336:	2018      	movs	r0, #24
 8081338:	f7ff fa34 	bl	80807a4 <Serial_PutByte>
            Serial_PutByte(CA);
 808133c:	2018      	movs	r0, #24
 808133e:	f7ff fa31 	bl	80807a4 <Serial_PutByte>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
          }
          break;
 8081342:	e002      	b.n	808134a <Ymodem_Receive+0x202>
            Serial_PutByte(CRC16); /* Ask for a packet */
 8081344:	2043      	movs	r0, #67	@ 0x43
 8081346:	f7ff fa2d 	bl	80807a4 <Serial_PutByte>
          break;
 808134a:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 808134c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 808134e:	2b00      	cmp	r3, #0
 8081350:	d104      	bne.n	808135c <Ymodem_Receive+0x214>
 8081352:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8081356:	2b00      	cmp	r3, #0
 8081358:	f43f af0c 	beq.w	8081174 <Ymodem_Receive+0x2c>
  while ((session_done == 0) && (result == COM_OK))
 808135c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 808135e:	2b00      	cmp	r3, #0
 8081360:	d104      	bne.n	808136c <Ymodem_Receive+0x224>
 8081362:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8081366:	2b00      	cmp	r3, #0
 8081368:	f43f aefe 	beq.w	8081168 <Ymodem_Receive+0x20>
      }
    }
  }
  return result;
 808136c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8081370:	4618      	mov	r0, r3
 8081372:	3748      	adds	r7, #72	@ 0x48
 8081374:	46bd      	mov	sp, r7
 8081376:	bd80      	pop	{r7, pc}
 8081378:	08080000 	.word	0x08080000
 808137c:	2000013c 	.word	0x2000013c
 8081380:	20000140 	.word	0x20000140
 8081384:	200000fc 	.word	0x200000fc
 8081388:	20000048 	.word	0x20000048

0808138c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 808138c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80813c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8081390:	f7ff fdf6 	bl	8080f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8081394:	480c      	ldr	r0, [pc, #48]	@ (80813c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8081396:	490d      	ldr	r1, [pc, #52]	@ (80813cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8081398:	4a0d      	ldr	r2, [pc, #52]	@ (80813d0 <LoopForever+0xe>)
  movs r3, #0
 808139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 808139c:	e002      	b.n	80813a4 <LoopCopyDataInit>

0808139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 808139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80813a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80813a2:	3304      	adds	r3, #4

080813a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80813a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80813a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80813a8:	d3f9      	bcc.n	808139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80813aa:	4a0a      	ldr	r2, [pc, #40]	@ (80813d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80813ac:	4c0a      	ldr	r4, [pc, #40]	@ (80813d8 <LoopForever+0x16>)
  movs r3, #0
 80813ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80813b0:	e001      	b.n	80813b6 <LoopFillZerobss>

080813b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80813b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80813b4:	3204      	adds	r2, #4

080813b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80813b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80813b8:	d3fb      	bcc.n	80813b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80813ba:	f003 fa9d 	bl	80848f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80813be:	f7ff facd 	bl	808095c <main>

080813c2 <LoopForever>:

LoopForever:
    b LoopForever
 80813c2:	e7fe      	b.n	80813c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80813c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80813c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80813cc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80813d0:	08084b78 	.word	0x08084b78
  ldr r2, =_sbss
 80813d4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80813d8:	20000548 	.word	0x20000548

080813dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80813dc:	e7fe      	b.n	80813dc <ADC1_2_IRQHandler>

080813de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80813de:	b580      	push	{r7, lr}
 80813e0:	b082      	sub	sp, #8
 80813e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80813e4:	2300      	movs	r3, #0
 80813e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80813e8:	2003      	movs	r0, #3
 80813ea:	f000 f95b 	bl	80816a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80813ee:	2000      	movs	r0, #0
 80813f0:	f000 f84a 	bl	8081488 <HAL_InitTick>
 80813f4:	4603      	mov	r3, r0
 80813f6:	2b00      	cmp	r3, #0
 80813f8:	d002      	beq.n	8081400 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80813fa:	2301      	movs	r3, #1
 80813fc:	71fb      	strb	r3, [r7, #7]
 80813fe:	e001      	b.n	8081404 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8081400:	f7ff fcea 	bl	8080dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8081404:	79fb      	ldrb	r3, [r7, #7]
}
 8081406:	4618      	mov	r0, r3
 8081408:	3708      	adds	r7, #8
 808140a:	46bd      	mov	sp, r7
 808140c:	bd80      	pop	{r7, pc}
	...

08081410 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8081410:	b580      	push	{r7, lr}
 8081412:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8081414:	4b17      	ldr	r3, [pc, #92]	@ (8081474 <HAL_DeInit+0x64>)
 8081416:	f04f 32ff 	mov.w	r2, #4294967295
 808141a:	639a      	str	r2, [r3, #56]	@ 0x38
 808141c:	4b15      	ldr	r3, [pc, #84]	@ (8081474 <HAL_DeInit+0x64>)
 808141e:	f04f 32ff 	mov.w	r2, #4294967295
 8081422:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_RCC_APB1_RELEASE_RESET();
 8081424:	4b13      	ldr	r3, [pc, #76]	@ (8081474 <HAL_DeInit+0x64>)
 8081426:	2200      	movs	r2, #0
 8081428:	639a      	str	r2, [r3, #56]	@ 0x38
 808142a:	4b12      	ldr	r3, [pc, #72]	@ (8081474 <HAL_DeInit+0x64>)
 808142c:	2200      	movs	r2, #0
 808142e:	63da      	str	r2, [r3, #60]	@ 0x3c

  __HAL_RCC_APB2_FORCE_RESET();
 8081430:	4b10      	ldr	r3, [pc, #64]	@ (8081474 <HAL_DeInit+0x64>)
 8081432:	f04f 32ff 	mov.w	r2, #4294967295
 8081436:	641a      	str	r2, [r3, #64]	@ 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8081438:	4b0e      	ldr	r3, [pc, #56]	@ (8081474 <HAL_DeInit+0x64>)
 808143a:	2200      	movs	r2, #0
 808143c:	641a      	str	r2, [r3, #64]	@ 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 808143e:	4b0d      	ldr	r3, [pc, #52]	@ (8081474 <HAL_DeInit+0x64>)
 8081440:	f04f 32ff 	mov.w	r2, #4294967295
 8081444:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8081446:	4b0b      	ldr	r3, [pc, #44]	@ (8081474 <HAL_DeInit+0x64>)
 8081448:	2200      	movs	r2, #0
 808144a:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 808144c:	4b09      	ldr	r3, [pc, #36]	@ (8081474 <HAL_DeInit+0x64>)
 808144e:	f04f 32ff 	mov.w	r2, #4294967295
 8081452:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8081454:	4b07      	ldr	r3, [pc, #28]	@ (8081474 <HAL_DeInit+0x64>)
 8081456:	2200      	movs	r2, #0
 8081458:	62da      	str	r2, [r3, #44]	@ 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 808145a:	4b06      	ldr	r3, [pc, #24]	@ (8081474 <HAL_DeInit+0x64>)
 808145c:	f04f 32ff 	mov.w	r2, #4294967295
 8081460:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8081462:	4b04      	ldr	r3, [pc, #16]	@ (8081474 <HAL_DeInit+0x64>)
 8081464:	2200      	movs	r2, #0
 8081466:	631a      	str	r2, [r3, #48]	@ 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8081468:	f000 f806 	bl	8081478 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 808146c:	2300      	movs	r3, #0
}
 808146e:	4618      	mov	r0, r3
 8081470:	bd80      	pop	{r7, pc}
 8081472:	bf00      	nop
 8081474:	40021000 	.word	0x40021000

08081478 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8081478:	b480      	push	{r7}
 808147a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 808147c:	bf00      	nop
 808147e:	46bd      	mov	sp, r7
 8081480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081484:	4770      	bx	lr
	...

08081488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8081488:	b580      	push	{r7, lr}
 808148a:	b084      	sub	sp, #16
 808148c:	af00      	add	r7, sp, #0
 808148e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8081490:	2300      	movs	r3, #0
 8081492:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8081494:	4b17      	ldr	r3, [pc, #92]	@ (80814f4 <HAL_InitTick+0x6c>)
 8081496:	781b      	ldrb	r3, [r3, #0]
 8081498:	2b00      	cmp	r3, #0
 808149a:	d023      	beq.n	80814e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 808149c:	4b16      	ldr	r3, [pc, #88]	@ (80814f8 <HAL_InitTick+0x70>)
 808149e:	681a      	ldr	r2, [r3, #0]
 80814a0:	4b14      	ldr	r3, [pc, #80]	@ (80814f4 <HAL_InitTick+0x6c>)
 80814a2:	781b      	ldrb	r3, [r3, #0]
 80814a4:	4619      	mov	r1, r3
 80814a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80814aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80814ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80814b2:	4618      	mov	r0, r3
 80814b4:	f000 f91d 	bl	80816f2 <HAL_SYSTICK_Config>
 80814b8:	4603      	mov	r3, r0
 80814ba:	2b00      	cmp	r3, #0
 80814bc:	d10f      	bne.n	80814de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80814be:	687b      	ldr	r3, [r7, #4]
 80814c0:	2b0f      	cmp	r3, #15
 80814c2:	d809      	bhi.n	80814d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80814c4:	2200      	movs	r2, #0
 80814c6:	6879      	ldr	r1, [r7, #4]
 80814c8:	f04f 30ff 	mov.w	r0, #4294967295
 80814cc:	f000 f8f5 	bl	80816ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80814d0:	4a0a      	ldr	r2, [pc, #40]	@ (80814fc <HAL_InitTick+0x74>)
 80814d2:	687b      	ldr	r3, [r7, #4]
 80814d4:	6013      	str	r3, [r2, #0]
 80814d6:	e007      	b.n	80814e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80814d8:	2301      	movs	r3, #1
 80814da:	73fb      	strb	r3, [r7, #15]
 80814dc:	e004      	b.n	80814e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80814de:	2301      	movs	r3, #1
 80814e0:	73fb      	strb	r3, [r7, #15]
 80814e2:	e001      	b.n	80814e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80814e4:	2301      	movs	r3, #1
 80814e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80814e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80814ea:	4618      	mov	r0, r3
 80814ec:	3710      	adds	r7, #16
 80814ee:	46bd      	mov	sp, r7
 80814f0:	bd80      	pop	{r7, pc}
 80814f2:	bf00      	nop
 80814f4:	20000008 	.word	0x20000008
 80814f8:	20000000 	.word	0x20000000
 80814fc:	20000004 	.word	0x20000004

08081500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8081500:	b480      	push	{r7}
 8081502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8081504:	4b06      	ldr	r3, [pc, #24]	@ (8081520 <HAL_IncTick+0x20>)
 8081506:	781b      	ldrb	r3, [r3, #0]
 8081508:	461a      	mov	r2, r3
 808150a:	4b06      	ldr	r3, [pc, #24]	@ (8081524 <HAL_IncTick+0x24>)
 808150c:	681b      	ldr	r3, [r3, #0]
 808150e:	4413      	add	r3, r2
 8081510:	4a04      	ldr	r2, [pc, #16]	@ (8081524 <HAL_IncTick+0x24>)
 8081512:	6013      	str	r3, [r2, #0]
}
 8081514:	bf00      	nop
 8081516:	46bd      	mov	sp, r7
 8081518:	f85d 7b04 	ldr.w	r7, [sp], #4
 808151c:	4770      	bx	lr
 808151e:	bf00      	nop
 8081520:	20000008 	.word	0x20000008
 8081524:	20000544 	.word	0x20000544

08081528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8081528:	b480      	push	{r7}
 808152a:	af00      	add	r7, sp, #0
  return uwTick;
 808152c:	4b03      	ldr	r3, [pc, #12]	@ (808153c <HAL_GetTick+0x14>)
 808152e:	681b      	ldr	r3, [r3, #0]
}
 8081530:	4618      	mov	r0, r3
 8081532:	46bd      	mov	sp, r7
 8081534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081538:	4770      	bx	lr
 808153a:	bf00      	nop
 808153c:	20000544 	.word	0x20000544

08081540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8081540:	b480      	push	{r7}
 8081542:	b085      	sub	sp, #20
 8081544:	af00      	add	r7, sp, #0
 8081546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8081548:	687b      	ldr	r3, [r7, #4]
 808154a:	f003 0307 	and.w	r3, r3, #7
 808154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8081550:	4b0c      	ldr	r3, [pc, #48]	@ (8081584 <__NVIC_SetPriorityGrouping+0x44>)
 8081552:	68db      	ldr	r3, [r3, #12]
 8081554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8081556:	68ba      	ldr	r2, [r7, #8]
 8081558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 808155c:	4013      	ands	r3, r2
 808155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8081560:	68fb      	ldr	r3, [r7, #12]
 8081562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8081564:	68bb      	ldr	r3, [r7, #8]
 8081566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8081568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 808156c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8081570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8081572:	4a04      	ldr	r2, [pc, #16]	@ (8081584 <__NVIC_SetPriorityGrouping+0x44>)
 8081574:	68bb      	ldr	r3, [r7, #8]
 8081576:	60d3      	str	r3, [r2, #12]
}
 8081578:	bf00      	nop
 808157a:	3714      	adds	r7, #20
 808157c:	46bd      	mov	sp, r7
 808157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081582:	4770      	bx	lr
 8081584:	e000ed00 	.word	0xe000ed00

08081588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8081588:	b480      	push	{r7}
 808158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 808158c:	4b04      	ldr	r3, [pc, #16]	@ (80815a0 <__NVIC_GetPriorityGrouping+0x18>)
 808158e:	68db      	ldr	r3, [r3, #12]
 8081590:	0a1b      	lsrs	r3, r3, #8
 8081592:	f003 0307 	and.w	r3, r3, #7
}
 8081596:	4618      	mov	r0, r3
 8081598:	46bd      	mov	sp, r7
 808159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808159e:	4770      	bx	lr
 80815a0:	e000ed00 	.word	0xe000ed00

080815a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80815a4:	b480      	push	{r7}
 80815a6:	b083      	sub	sp, #12
 80815a8:	af00      	add	r7, sp, #0
 80815aa:	4603      	mov	r3, r0
 80815ac:	6039      	str	r1, [r7, #0]
 80815ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80815b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80815b4:	2b00      	cmp	r3, #0
 80815b6:	db0a      	blt.n	80815ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80815b8:	683b      	ldr	r3, [r7, #0]
 80815ba:	b2da      	uxtb	r2, r3
 80815bc:	490c      	ldr	r1, [pc, #48]	@ (80815f0 <__NVIC_SetPriority+0x4c>)
 80815be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80815c2:	0112      	lsls	r2, r2, #4
 80815c4:	b2d2      	uxtb	r2, r2
 80815c6:	440b      	add	r3, r1
 80815c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80815cc:	e00a      	b.n	80815e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80815ce:	683b      	ldr	r3, [r7, #0]
 80815d0:	b2da      	uxtb	r2, r3
 80815d2:	4908      	ldr	r1, [pc, #32]	@ (80815f4 <__NVIC_SetPriority+0x50>)
 80815d4:	79fb      	ldrb	r3, [r7, #7]
 80815d6:	f003 030f 	and.w	r3, r3, #15
 80815da:	3b04      	subs	r3, #4
 80815dc:	0112      	lsls	r2, r2, #4
 80815de:	b2d2      	uxtb	r2, r2
 80815e0:	440b      	add	r3, r1
 80815e2:	761a      	strb	r2, [r3, #24]
}
 80815e4:	bf00      	nop
 80815e6:	370c      	adds	r7, #12
 80815e8:	46bd      	mov	sp, r7
 80815ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80815ee:	4770      	bx	lr
 80815f0:	e000e100 	.word	0xe000e100
 80815f4:	e000ed00 	.word	0xe000ed00

080815f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80815f8:	b480      	push	{r7}
 80815fa:	b089      	sub	sp, #36	@ 0x24
 80815fc:	af00      	add	r7, sp, #0
 80815fe:	60f8      	str	r0, [r7, #12]
 8081600:	60b9      	str	r1, [r7, #8]
 8081602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8081604:	68fb      	ldr	r3, [r7, #12]
 8081606:	f003 0307 	and.w	r3, r3, #7
 808160a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 808160c:	69fb      	ldr	r3, [r7, #28]
 808160e:	f1c3 0307 	rsb	r3, r3, #7
 8081612:	2b04      	cmp	r3, #4
 8081614:	bf28      	it	cs
 8081616:	2304      	movcs	r3, #4
 8081618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 808161a:	69fb      	ldr	r3, [r7, #28]
 808161c:	3304      	adds	r3, #4
 808161e:	2b06      	cmp	r3, #6
 8081620:	d902      	bls.n	8081628 <NVIC_EncodePriority+0x30>
 8081622:	69fb      	ldr	r3, [r7, #28]
 8081624:	3b03      	subs	r3, #3
 8081626:	e000      	b.n	808162a <NVIC_EncodePriority+0x32>
 8081628:	2300      	movs	r3, #0
 808162a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 808162c:	f04f 32ff 	mov.w	r2, #4294967295
 8081630:	69bb      	ldr	r3, [r7, #24]
 8081632:	fa02 f303 	lsl.w	r3, r2, r3
 8081636:	43da      	mvns	r2, r3
 8081638:	68bb      	ldr	r3, [r7, #8]
 808163a:	401a      	ands	r2, r3
 808163c:	697b      	ldr	r3, [r7, #20]
 808163e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8081640:	f04f 31ff 	mov.w	r1, #4294967295
 8081644:	697b      	ldr	r3, [r7, #20]
 8081646:	fa01 f303 	lsl.w	r3, r1, r3
 808164a:	43d9      	mvns	r1, r3
 808164c:	687b      	ldr	r3, [r7, #4]
 808164e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8081650:	4313      	orrs	r3, r2
         );
}
 8081652:	4618      	mov	r0, r3
 8081654:	3724      	adds	r7, #36	@ 0x24
 8081656:	46bd      	mov	sp, r7
 8081658:	f85d 7b04 	ldr.w	r7, [sp], #4
 808165c:	4770      	bx	lr
	...

08081660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8081660:	b580      	push	{r7, lr}
 8081662:	b082      	sub	sp, #8
 8081664:	af00      	add	r7, sp, #0
 8081666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8081668:	687b      	ldr	r3, [r7, #4]
 808166a:	3b01      	subs	r3, #1
 808166c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8081670:	d301      	bcc.n	8081676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8081672:	2301      	movs	r3, #1
 8081674:	e00f      	b.n	8081696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8081676:	4a0a      	ldr	r2, [pc, #40]	@ (80816a0 <SysTick_Config+0x40>)
 8081678:	687b      	ldr	r3, [r7, #4]
 808167a:	3b01      	subs	r3, #1
 808167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 808167e:	210f      	movs	r1, #15
 8081680:	f04f 30ff 	mov.w	r0, #4294967295
 8081684:	f7ff ff8e 	bl	80815a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8081688:	4b05      	ldr	r3, [pc, #20]	@ (80816a0 <SysTick_Config+0x40>)
 808168a:	2200      	movs	r2, #0
 808168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 808168e:	4b04      	ldr	r3, [pc, #16]	@ (80816a0 <SysTick_Config+0x40>)
 8081690:	2207      	movs	r2, #7
 8081692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8081694:	2300      	movs	r3, #0
}
 8081696:	4618      	mov	r0, r3
 8081698:	3708      	adds	r7, #8
 808169a:	46bd      	mov	sp, r7
 808169c:	bd80      	pop	{r7, pc}
 808169e:	bf00      	nop
 80816a0:	e000e010 	.word	0xe000e010

080816a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80816a4:	b580      	push	{r7, lr}
 80816a6:	b082      	sub	sp, #8
 80816a8:	af00      	add	r7, sp, #0
 80816aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80816ac:	6878      	ldr	r0, [r7, #4]
 80816ae:	f7ff ff47 	bl	8081540 <__NVIC_SetPriorityGrouping>
}
 80816b2:	bf00      	nop
 80816b4:	3708      	adds	r7, #8
 80816b6:	46bd      	mov	sp, r7
 80816b8:	bd80      	pop	{r7, pc}

080816ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80816ba:	b580      	push	{r7, lr}
 80816bc:	b086      	sub	sp, #24
 80816be:	af00      	add	r7, sp, #0
 80816c0:	4603      	mov	r3, r0
 80816c2:	60b9      	str	r1, [r7, #8]
 80816c4:	607a      	str	r2, [r7, #4]
 80816c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80816c8:	2300      	movs	r3, #0
 80816ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80816cc:	f7ff ff5c 	bl	8081588 <__NVIC_GetPriorityGrouping>
 80816d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80816d2:	687a      	ldr	r2, [r7, #4]
 80816d4:	68b9      	ldr	r1, [r7, #8]
 80816d6:	6978      	ldr	r0, [r7, #20]
 80816d8:	f7ff ff8e 	bl	80815f8 <NVIC_EncodePriority>
 80816dc:	4602      	mov	r2, r0
 80816de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80816e2:	4611      	mov	r1, r2
 80816e4:	4618      	mov	r0, r3
 80816e6:	f7ff ff5d 	bl	80815a4 <__NVIC_SetPriority>
}
 80816ea:	bf00      	nop
 80816ec:	3718      	adds	r7, #24
 80816ee:	46bd      	mov	sp, r7
 80816f0:	bd80      	pop	{r7, pc}

080816f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80816f2:	b580      	push	{r7, lr}
 80816f4:	b082      	sub	sp, #8
 80816f6:	af00      	add	r7, sp, #0
 80816f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80816fa:	6878      	ldr	r0, [r7, #4]
 80816fc:	f7ff ffb0 	bl	8081660 <SysTick_Config>
 8081700:	4603      	mov	r3, r0
}
 8081702:	4618      	mov	r0, r3
 8081704:	3708      	adds	r7, #8
 8081706:	46bd      	mov	sp, r7
 8081708:	bd80      	pop	{r7, pc}
	...

0808170c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 808170c:	b580      	push	{r7, lr}
 808170e:	b082      	sub	sp, #8
 8081710:	af00      	add	r7, sp, #0
 8081712:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8081714:	687b      	ldr	r3, [r7, #4]
 8081716:	2b00      	cmp	r3, #0
 8081718:	d101      	bne.n	808171e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 808171a:	2301      	movs	r3, #1
 808171c:	e054      	b.n	80817c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 808171e:	687b      	ldr	r3, [r7, #4]
 8081720:	7f5b      	ldrb	r3, [r3, #29]
 8081722:	b2db      	uxtb	r3, r3
 8081724:	2b00      	cmp	r3, #0
 8081726:	d105      	bne.n	8081734 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8081728:	687b      	ldr	r3, [r7, #4]
 808172a:	2200      	movs	r2, #0
 808172c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 808172e:	6878      	ldr	r0, [r7, #4]
 8081730:	f7ff fb76 	bl	8080e20 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8081734:	687b      	ldr	r3, [r7, #4]
 8081736:	2202      	movs	r2, #2
 8081738:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 808173a:	687b      	ldr	r3, [r7, #4]
 808173c:	791b      	ldrb	r3, [r3, #4]
 808173e:	2b00      	cmp	r3, #0
 8081740:	d10c      	bne.n	808175c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8081742:	687b      	ldr	r3, [r7, #4]
 8081744:	681b      	ldr	r3, [r3, #0]
 8081746:	4a22      	ldr	r2, [pc, #136]	@ (80817d0 <HAL_CRC_Init+0xc4>)
 8081748:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 808174a:	687b      	ldr	r3, [r7, #4]
 808174c:	681b      	ldr	r3, [r3, #0]
 808174e:	689a      	ldr	r2, [r3, #8]
 8081750:	687b      	ldr	r3, [r7, #4]
 8081752:	681b      	ldr	r3, [r3, #0]
 8081754:	f022 0218 	bic.w	r2, r2, #24
 8081758:	609a      	str	r2, [r3, #8]
 808175a:	e00c      	b.n	8081776 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 808175c:	687b      	ldr	r3, [r7, #4]
 808175e:	6899      	ldr	r1, [r3, #8]
 8081760:	687b      	ldr	r3, [r7, #4]
 8081762:	68db      	ldr	r3, [r3, #12]
 8081764:	461a      	mov	r2, r3
 8081766:	6878      	ldr	r0, [r7, #4]
 8081768:	f000 f948 	bl	80819fc <HAL_CRCEx_Polynomial_Set>
 808176c:	4603      	mov	r3, r0
 808176e:	2b00      	cmp	r3, #0
 8081770:	d001      	beq.n	8081776 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8081772:	2301      	movs	r3, #1
 8081774:	e028      	b.n	80817c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8081776:	687b      	ldr	r3, [r7, #4]
 8081778:	795b      	ldrb	r3, [r3, #5]
 808177a:	2b00      	cmp	r3, #0
 808177c:	d105      	bne.n	808178a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 808177e:	687b      	ldr	r3, [r7, #4]
 8081780:	681b      	ldr	r3, [r3, #0]
 8081782:	f04f 32ff 	mov.w	r2, #4294967295
 8081786:	611a      	str	r2, [r3, #16]
 8081788:	e004      	b.n	8081794 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 808178a:	687b      	ldr	r3, [r7, #4]
 808178c:	681b      	ldr	r3, [r3, #0]
 808178e:	687a      	ldr	r2, [r7, #4]
 8081790:	6912      	ldr	r2, [r2, #16]
 8081792:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8081794:	687b      	ldr	r3, [r7, #4]
 8081796:	681b      	ldr	r3, [r3, #0]
 8081798:	689b      	ldr	r3, [r3, #8]
 808179a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 808179e:	687b      	ldr	r3, [r7, #4]
 80817a0:	695a      	ldr	r2, [r3, #20]
 80817a2:	687b      	ldr	r3, [r7, #4]
 80817a4:	681b      	ldr	r3, [r3, #0]
 80817a6:	430a      	orrs	r2, r1
 80817a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80817aa:	687b      	ldr	r3, [r7, #4]
 80817ac:	681b      	ldr	r3, [r3, #0]
 80817ae:	689b      	ldr	r3, [r3, #8]
 80817b0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80817b4:	687b      	ldr	r3, [r7, #4]
 80817b6:	699a      	ldr	r2, [r3, #24]
 80817b8:	687b      	ldr	r3, [r7, #4]
 80817ba:	681b      	ldr	r3, [r3, #0]
 80817bc:	430a      	orrs	r2, r1
 80817be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80817c0:	687b      	ldr	r3, [r7, #4]
 80817c2:	2201      	movs	r2, #1
 80817c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80817c6:	2300      	movs	r3, #0
}
 80817c8:	4618      	mov	r0, r3
 80817ca:	3708      	adds	r7, #8
 80817cc:	46bd      	mov	sp, r7
 80817ce:	bd80      	pop	{r7, pc}
 80817d0:	04c11db7 	.word	0x04c11db7

080817d4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80817d4:	b580      	push	{r7, lr}
 80817d6:	b086      	sub	sp, #24
 80817d8:	af00      	add	r7, sp, #0
 80817da:	60f8      	str	r0, [r7, #12]
 80817dc:	60b9      	str	r1, [r7, #8]
 80817de:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80817e0:	2300      	movs	r3, #0
 80817e2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80817e4:	68fb      	ldr	r3, [r7, #12]
 80817e6:	2202      	movs	r2, #2
 80817e8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80817ea:	68fb      	ldr	r3, [r7, #12]
 80817ec:	681b      	ldr	r3, [r3, #0]
 80817ee:	689a      	ldr	r2, [r3, #8]
 80817f0:	68fb      	ldr	r3, [r7, #12]
 80817f2:	681b      	ldr	r3, [r3, #0]
 80817f4:	f042 0201 	orr.w	r2, r2, #1
 80817f8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80817fa:	68fb      	ldr	r3, [r7, #12]
 80817fc:	6a1b      	ldr	r3, [r3, #32]
 80817fe:	2b03      	cmp	r3, #3
 8081800:	d006      	beq.n	8081810 <HAL_CRC_Calculate+0x3c>
 8081802:	2b03      	cmp	r3, #3
 8081804:	d829      	bhi.n	808185a <HAL_CRC_Calculate+0x86>
 8081806:	2b01      	cmp	r3, #1
 8081808:	d019      	beq.n	808183e <HAL_CRC_Calculate+0x6a>
 808180a:	2b02      	cmp	r3, #2
 808180c:	d01e      	beq.n	808184c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 808180e:	e024      	b.n	808185a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8081810:	2300      	movs	r3, #0
 8081812:	617b      	str	r3, [r7, #20]
 8081814:	e00a      	b.n	808182c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8081816:	697b      	ldr	r3, [r7, #20]
 8081818:	009b      	lsls	r3, r3, #2
 808181a:	68ba      	ldr	r2, [r7, #8]
 808181c:	441a      	add	r2, r3
 808181e:	68fb      	ldr	r3, [r7, #12]
 8081820:	681b      	ldr	r3, [r3, #0]
 8081822:	6812      	ldr	r2, [r2, #0]
 8081824:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8081826:	697b      	ldr	r3, [r7, #20]
 8081828:	3301      	adds	r3, #1
 808182a:	617b      	str	r3, [r7, #20]
 808182c:	697a      	ldr	r2, [r7, #20]
 808182e:	687b      	ldr	r3, [r7, #4]
 8081830:	429a      	cmp	r2, r3
 8081832:	d3f0      	bcc.n	8081816 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8081834:	68fb      	ldr	r3, [r7, #12]
 8081836:	681b      	ldr	r3, [r3, #0]
 8081838:	681b      	ldr	r3, [r3, #0]
 808183a:	613b      	str	r3, [r7, #16]
      break;
 808183c:	e00e      	b.n	808185c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 808183e:	687a      	ldr	r2, [r7, #4]
 8081840:	68b9      	ldr	r1, [r7, #8]
 8081842:	68f8      	ldr	r0, [r7, #12]
 8081844:	f000 f812 	bl	808186c <CRC_Handle_8>
 8081848:	6138      	str	r0, [r7, #16]
      break;
 808184a:	e007      	b.n	808185c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 808184c:	687a      	ldr	r2, [r7, #4]
 808184e:	68b9      	ldr	r1, [r7, #8]
 8081850:	68f8      	ldr	r0, [r7, #12]
 8081852:	f000 f899 	bl	8081988 <CRC_Handle_16>
 8081856:	6138      	str	r0, [r7, #16]
      break;
 8081858:	e000      	b.n	808185c <HAL_CRC_Calculate+0x88>
      break;
 808185a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 808185c:	68fb      	ldr	r3, [r7, #12]
 808185e:	2201      	movs	r2, #1
 8081860:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8081862:	693b      	ldr	r3, [r7, #16]
}
 8081864:	4618      	mov	r0, r3
 8081866:	3718      	adds	r7, #24
 8081868:	46bd      	mov	sp, r7
 808186a:	bd80      	pop	{r7, pc}

0808186c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 808186c:	b480      	push	{r7}
 808186e:	b089      	sub	sp, #36	@ 0x24
 8081870:	af00      	add	r7, sp, #0
 8081872:	60f8      	str	r0, [r7, #12]
 8081874:	60b9      	str	r1, [r7, #8]
 8081876:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8081878:	2300      	movs	r3, #0
 808187a:	61fb      	str	r3, [r7, #28]
 808187c:	e023      	b.n	80818c6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 808187e:	69fb      	ldr	r3, [r7, #28]
 8081880:	009b      	lsls	r3, r3, #2
 8081882:	68ba      	ldr	r2, [r7, #8]
 8081884:	4413      	add	r3, r2
 8081886:	781b      	ldrb	r3, [r3, #0]
 8081888:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 808188a:	69fb      	ldr	r3, [r7, #28]
 808188c:	009b      	lsls	r3, r3, #2
 808188e:	3301      	adds	r3, #1
 8081890:	68b9      	ldr	r1, [r7, #8]
 8081892:	440b      	add	r3, r1
 8081894:	781b      	ldrb	r3, [r3, #0]
 8081896:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8081898:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 808189a:	69fb      	ldr	r3, [r7, #28]
 808189c:	009b      	lsls	r3, r3, #2
 808189e:	3302      	adds	r3, #2
 80818a0:	68b9      	ldr	r1, [r7, #8]
 80818a2:	440b      	add	r3, r1
 80818a4:	781b      	ldrb	r3, [r3, #0]
 80818a6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80818a8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80818aa:	69fb      	ldr	r3, [r7, #28]
 80818ac:	009b      	lsls	r3, r3, #2
 80818ae:	3303      	adds	r3, #3
 80818b0:	68b9      	ldr	r1, [r7, #8]
 80818b2:	440b      	add	r3, r1
 80818b4:	781b      	ldrb	r3, [r3, #0]
 80818b6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80818b8:	68fb      	ldr	r3, [r7, #12]
 80818ba:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80818bc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80818be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80818c0:	69fb      	ldr	r3, [r7, #28]
 80818c2:	3301      	adds	r3, #1
 80818c4:	61fb      	str	r3, [r7, #28]
 80818c6:	687b      	ldr	r3, [r7, #4]
 80818c8:	089b      	lsrs	r3, r3, #2
 80818ca:	69fa      	ldr	r2, [r7, #28]
 80818cc:	429a      	cmp	r2, r3
 80818ce:	d3d6      	bcc.n	808187e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80818d0:	687b      	ldr	r3, [r7, #4]
 80818d2:	f003 0303 	and.w	r3, r3, #3
 80818d6:	2b00      	cmp	r3, #0
 80818d8:	d04d      	beq.n	8081976 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80818da:	687b      	ldr	r3, [r7, #4]
 80818dc:	f003 0303 	and.w	r3, r3, #3
 80818e0:	2b01      	cmp	r3, #1
 80818e2:	d107      	bne.n	80818f4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80818e4:	69fb      	ldr	r3, [r7, #28]
 80818e6:	009b      	lsls	r3, r3, #2
 80818e8:	68ba      	ldr	r2, [r7, #8]
 80818ea:	4413      	add	r3, r2
 80818ec:	68fa      	ldr	r2, [r7, #12]
 80818ee:	6812      	ldr	r2, [r2, #0]
 80818f0:	781b      	ldrb	r3, [r3, #0]
 80818f2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80818f4:	687b      	ldr	r3, [r7, #4]
 80818f6:	f003 0303 	and.w	r3, r3, #3
 80818fa:	2b02      	cmp	r3, #2
 80818fc:	d116      	bne.n	808192c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80818fe:	69fb      	ldr	r3, [r7, #28]
 8081900:	009b      	lsls	r3, r3, #2
 8081902:	68ba      	ldr	r2, [r7, #8]
 8081904:	4413      	add	r3, r2
 8081906:	781b      	ldrb	r3, [r3, #0]
 8081908:	021b      	lsls	r3, r3, #8
 808190a:	b21a      	sxth	r2, r3
 808190c:	69fb      	ldr	r3, [r7, #28]
 808190e:	009b      	lsls	r3, r3, #2
 8081910:	3301      	adds	r3, #1
 8081912:	68b9      	ldr	r1, [r7, #8]
 8081914:	440b      	add	r3, r1
 8081916:	781b      	ldrb	r3, [r3, #0]
 8081918:	b21b      	sxth	r3, r3
 808191a:	4313      	orrs	r3, r2
 808191c:	b21b      	sxth	r3, r3
 808191e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8081920:	68fb      	ldr	r3, [r7, #12]
 8081922:	681b      	ldr	r3, [r3, #0]
 8081924:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8081926:	697b      	ldr	r3, [r7, #20]
 8081928:	8b7a      	ldrh	r2, [r7, #26]
 808192a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 808192c:	687b      	ldr	r3, [r7, #4]
 808192e:	f003 0303 	and.w	r3, r3, #3
 8081932:	2b03      	cmp	r3, #3
 8081934:	d11f      	bne.n	8081976 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8081936:	69fb      	ldr	r3, [r7, #28]
 8081938:	009b      	lsls	r3, r3, #2
 808193a:	68ba      	ldr	r2, [r7, #8]
 808193c:	4413      	add	r3, r2
 808193e:	781b      	ldrb	r3, [r3, #0]
 8081940:	021b      	lsls	r3, r3, #8
 8081942:	b21a      	sxth	r2, r3
 8081944:	69fb      	ldr	r3, [r7, #28]
 8081946:	009b      	lsls	r3, r3, #2
 8081948:	3301      	adds	r3, #1
 808194a:	68b9      	ldr	r1, [r7, #8]
 808194c:	440b      	add	r3, r1
 808194e:	781b      	ldrb	r3, [r3, #0]
 8081950:	b21b      	sxth	r3, r3
 8081952:	4313      	orrs	r3, r2
 8081954:	b21b      	sxth	r3, r3
 8081956:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8081958:	68fb      	ldr	r3, [r7, #12]
 808195a:	681b      	ldr	r3, [r3, #0]
 808195c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 808195e:	697b      	ldr	r3, [r7, #20]
 8081960:	8b7a      	ldrh	r2, [r7, #26]
 8081962:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8081964:	69fb      	ldr	r3, [r7, #28]
 8081966:	009b      	lsls	r3, r3, #2
 8081968:	3302      	adds	r3, #2
 808196a:	68ba      	ldr	r2, [r7, #8]
 808196c:	4413      	add	r3, r2
 808196e:	68fa      	ldr	r2, [r7, #12]
 8081970:	6812      	ldr	r2, [r2, #0]
 8081972:	781b      	ldrb	r3, [r3, #0]
 8081974:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8081976:	68fb      	ldr	r3, [r7, #12]
 8081978:	681b      	ldr	r3, [r3, #0]
 808197a:	681b      	ldr	r3, [r3, #0]
}
 808197c:	4618      	mov	r0, r3
 808197e:	3724      	adds	r7, #36	@ 0x24
 8081980:	46bd      	mov	sp, r7
 8081982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081986:	4770      	bx	lr

08081988 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8081988:	b480      	push	{r7}
 808198a:	b087      	sub	sp, #28
 808198c:	af00      	add	r7, sp, #0
 808198e:	60f8      	str	r0, [r7, #12]
 8081990:	60b9      	str	r1, [r7, #8]
 8081992:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8081994:	2300      	movs	r3, #0
 8081996:	617b      	str	r3, [r7, #20]
 8081998:	e013      	b.n	80819c2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 808199a:	697b      	ldr	r3, [r7, #20]
 808199c:	009b      	lsls	r3, r3, #2
 808199e:	68ba      	ldr	r2, [r7, #8]
 80819a0:	4413      	add	r3, r2
 80819a2:	881b      	ldrh	r3, [r3, #0]
 80819a4:	041a      	lsls	r2, r3, #16
 80819a6:	697b      	ldr	r3, [r7, #20]
 80819a8:	009b      	lsls	r3, r3, #2
 80819aa:	3302      	adds	r3, #2
 80819ac:	68b9      	ldr	r1, [r7, #8]
 80819ae:	440b      	add	r3, r1
 80819b0:	881b      	ldrh	r3, [r3, #0]
 80819b2:	4619      	mov	r1, r3
 80819b4:	68fb      	ldr	r3, [r7, #12]
 80819b6:	681b      	ldr	r3, [r3, #0]
 80819b8:	430a      	orrs	r2, r1
 80819ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80819bc:	697b      	ldr	r3, [r7, #20]
 80819be:	3301      	adds	r3, #1
 80819c0:	617b      	str	r3, [r7, #20]
 80819c2:	687b      	ldr	r3, [r7, #4]
 80819c4:	085b      	lsrs	r3, r3, #1
 80819c6:	697a      	ldr	r2, [r7, #20]
 80819c8:	429a      	cmp	r2, r3
 80819ca:	d3e6      	bcc.n	808199a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80819cc:	687b      	ldr	r3, [r7, #4]
 80819ce:	f003 0301 	and.w	r3, r3, #1
 80819d2:	2b00      	cmp	r3, #0
 80819d4:	d009      	beq.n	80819ea <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80819d6:	68fb      	ldr	r3, [r7, #12]
 80819d8:	681b      	ldr	r3, [r3, #0]
 80819da:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80819dc:	697b      	ldr	r3, [r7, #20]
 80819de:	009b      	lsls	r3, r3, #2
 80819e0:	68ba      	ldr	r2, [r7, #8]
 80819e2:	4413      	add	r3, r2
 80819e4:	881a      	ldrh	r2, [r3, #0]
 80819e6:	693b      	ldr	r3, [r7, #16]
 80819e8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80819ea:	68fb      	ldr	r3, [r7, #12]
 80819ec:	681b      	ldr	r3, [r3, #0]
 80819ee:	681b      	ldr	r3, [r3, #0]
}
 80819f0:	4618      	mov	r0, r3
 80819f2:	371c      	adds	r7, #28
 80819f4:	46bd      	mov	sp, r7
 80819f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80819fa:	4770      	bx	lr

080819fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80819fc:	b480      	push	{r7}
 80819fe:	b087      	sub	sp, #28
 8081a00:	af00      	add	r7, sp, #0
 8081a02:	60f8      	str	r0, [r7, #12]
 8081a04:	60b9      	str	r1, [r7, #8]
 8081a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8081a08:	2300      	movs	r3, #0
 8081a0a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8081a0c:	231f      	movs	r3, #31
 8081a0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8081a10:	68bb      	ldr	r3, [r7, #8]
 8081a12:	f003 0301 	and.w	r3, r3, #1
 8081a16:	2b00      	cmp	r3, #0
 8081a18:	d102      	bne.n	8081a20 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8081a1a:	2301      	movs	r3, #1
 8081a1c:	75fb      	strb	r3, [r7, #23]
 8081a1e:	e063      	b.n	8081ae8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8081a20:	bf00      	nop
 8081a22:	693b      	ldr	r3, [r7, #16]
 8081a24:	1e5a      	subs	r2, r3, #1
 8081a26:	613a      	str	r2, [r7, #16]
 8081a28:	2b00      	cmp	r3, #0
 8081a2a:	d009      	beq.n	8081a40 <HAL_CRCEx_Polynomial_Set+0x44>
 8081a2c:	693b      	ldr	r3, [r7, #16]
 8081a2e:	f003 031f 	and.w	r3, r3, #31
 8081a32:	68ba      	ldr	r2, [r7, #8]
 8081a34:	fa22 f303 	lsr.w	r3, r2, r3
 8081a38:	f003 0301 	and.w	r3, r3, #1
 8081a3c:	2b00      	cmp	r3, #0
 8081a3e:	d0f0      	beq.n	8081a22 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8081a40:	687b      	ldr	r3, [r7, #4]
 8081a42:	2b18      	cmp	r3, #24
 8081a44:	d846      	bhi.n	8081ad4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8081a46:	a201      	add	r2, pc, #4	@ (adr r2, 8081a4c <HAL_CRCEx_Polynomial_Set+0x50>)
 8081a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8081a4c:	08081adb 	.word	0x08081adb
 8081a50:	08081ad5 	.word	0x08081ad5
 8081a54:	08081ad5 	.word	0x08081ad5
 8081a58:	08081ad5 	.word	0x08081ad5
 8081a5c:	08081ad5 	.word	0x08081ad5
 8081a60:	08081ad5 	.word	0x08081ad5
 8081a64:	08081ad5 	.word	0x08081ad5
 8081a68:	08081ad5 	.word	0x08081ad5
 8081a6c:	08081ac9 	.word	0x08081ac9
 8081a70:	08081ad5 	.word	0x08081ad5
 8081a74:	08081ad5 	.word	0x08081ad5
 8081a78:	08081ad5 	.word	0x08081ad5
 8081a7c:	08081ad5 	.word	0x08081ad5
 8081a80:	08081ad5 	.word	0x08081ad5
 8081a84:	08081ad5 	.word	0x08081ad5
 8081a88:	08081ad5 	.word	0x08081ad5
 8081a8c:	08081abd 	.word	0x08081abd
 8081a90:	08081ad5 	.word	0x08081ad5
 8081a94:	08081ad5 	.word	0x08081ad5
 8081a98:	08081ad5 	.word	0x08081ad5
 8081a9c:	08081ad5 	.word	0x08081ad5
 8081aa0:	08081ad5 	.word	0x08081ad5
 8081aa4:	08081ad5 	.word	0x08081ad5
 8081aa8:	08081ad5 	.word	0x08081ad5
 8081aac:	08081ab1 	.word	0x08081ab1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8081ab0:	693b      	ldr	r3, [r7, #16]
 8081ab2:	2b06      	cmp	r3, #6
 8081ab4:	d913      	bls.n	8081ade <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8081ab6:	2301      	movs	r3, #1
 8081ab8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8081aba:	e010      	b.n	8081ade <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8081abc:	693b      	ldr	r3, [r7, #16]
 8081abe:	2b07      	cmp	r3, #7
 8081ac0:	d90f      	bls.n	8081ae2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8081ac2:	2301      	movs	r3, #1
 8081ac4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8081ac6:	e00c      	b.n	8081ae2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8081ac8:	693b      	ldr	r3, [r7, #16]
 8081aca:	2b0f      	cmp	r3, #15
 8081acc:	d90b      	bls.n	8081ae6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8081ace:	2301      	movs	r3, #1
 8081ad0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8081ad2:	e008      	b.n	8081ae6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8081ad4:	2301      	movs	r3, #1
 8081ad6:	75fb      	strb	r3, [r7, #23]
        break;
 8081ad8:	e006      	b.n	8081ae8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8081ada:	bf00      	nop
 8081adc:	e004      	b.n	8081ae8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8081ade:	bf00      	nop
 8081ae0:	e002      	b.n	8081ae8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8081ae2:	bf00      	nop
 8081ae4:	e000      	b.n	8081ae8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8081ae6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8081ae8:	7dfb      	ldrb	r3, [r7, #23]
 8081aea:	2b00      	cmp	r3, #0
 8081aec:	d10d      	bne.n	8081b0a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8081aee:	68fb      	ldr	r3, [r7, #12]
 8081af0:	681b      	ldr	r3, [r3, #0]
 8081af2:	68ba      	ldr	r2, [r7, #8]
 8081af4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8081af6:	68fb      	ldr	r3, [r7, #12]
 8081af8:	681b      	ldr	r3, [r3, #0]
 8081afa:	689b      	ldr	r3, [r3, #8]
 8081afc:	f023 0118 	bic.w	r1, r3, #24
 8081b00:	68fb      	ldr	r3, [r7, #12]
 8081b02:	681b      	ldr	r3, [r3, #0]
 8081b04:	687a      	ldr	r2, [r7, #4]
 8081b06:	430a      	orrs	r2, r1
 8081b08:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8081b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8081b0c:	4618      	mov	r0, r3
 8081b0e:	371c      	adds	r7, #28
 8081b10:	46bd      	mov	sp, r7
 8081b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081b16:	4770      	bx	lr

08081b18 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8081b18:	b580      	push	{r7, lr}
 8081b1a:	b086      	sub	sp, #24
 8081b1c:	af00      	add	r7, sp, #0
 8081b1e:	60f8      	str	r0, [r7, #12]
 8081b20:	60b9      	str	r1, [r7, #8]
 8081b22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8081b26:	2300      	movs	r3, #0
 8081b28:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8081b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8081be8 <HAL_FLASH_Program+0xd0>)
 8081b2c:	781b      	ldrb	r3, [r3, #0]
 8081b2e:	2b01      	cmp	r3, #1
 8081b30:	d101      	bne.n	8081b36 <HAL_FLASH_Program+0x1e>
 8081b32:	2302      	movs	r3, #2
 8081b34:	e053      	b.n	8081bde <HAL_FLASH_Program+0xc6>
 8081b36:	4b2c      	ldr	r3, [pc, #176]	@ (8081be8 <HAL_FLASH_Program+0xd0>)
 8081b38:	2201      	movs	r2, #1
 8081b3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8081b3c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8081b40:	f000 f888 	bl	8081c54 <FLASH_WaitForLastOperation>
 8081b44:	4603      	mov	r3, r0
 8081b46:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8081b48:	7dfb      	ldrb	r3, [r7, #23]
 8081b4a:	2b00      	cmp	r3, #0
 8081b4c:	d143      	bne.n	8081bd6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8081b4e:	4b26      	ldr	r3, [pc, #152]	@ (8081be8 <HAL_FLASH_Program+0xd0>)
 8081b50:	2200      	movs	r2, #0
 8081b52:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8081b54:	4b25      	ldr	r3, [pc, #148]	@ (8081bec <HAL_FLASH_Program+0xd4>)
 8081b56:	681b      	ldr	r3, [r3, #0]
 8081b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081b5c:	2b00      	cmp	r3, #0
 8081b5e:	d009      	beq.n	8081b74 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8081b60:	4b22      	ldr	r3, [pc, #136]	@ (8081bec <HAL_FLASH_Program+0xd4>)
 8081b62:	681b      	ldr	r3, [r3, #0]
 8081b64:	4a21      	ldr	r2, [pc, #132]	@ (8081bec <HAL_FLASH_Program+0xd4>)
 8081b66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8081b6a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8081b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8081be8 <HAL_FLASH_Program+0xd0>)
 8081b6e:	2202      	movs	r2, #2
 8081b70:	771a      	strb	r2, [r3, #28]
 8081b72:	e002      	b.n	8081b7a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8081b74:	4b1c      	ldr	r3, [pc, #112]	@ (8081be8 <HAL_FLASH_Program+0xd0>)
 8081b76:	2200      	movs	r2, #0
 8081b78:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8081b7a:	68fb      	ldr	r3, [r7, #12]
 8081b7c:	2b00      	cmp	r3, #0
 8081b7e:	d107      	bne.n	8081b90 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8081b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8081b84:	68b8      	ldr	r0, [r7, #8]
 8081b86:	f000 f8bb 	bl	8081d00 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8081b8a:	2301      	movs	r3, #1
 8081b8c:	613b      	str	r3, [r7, #16]
 8081b8e:	e010      	b.n	8081bb2 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8081b90:	68fb      	ldr	r3, [r7, #12]
 8081b92:	2b01      	cmp	r3, #1
 8081b94:	d002      	beq.n	8081b9c <HAL_FLASH_Program+0x84>
 8081b96:	68fb      	ldr	r3, [r7, #12]
 8081b98:	2b02      	cmp	r3, #2
 8081b9a:	d10a      	bne.n	8081bb2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8081b9c:	683b      	ldr	r3, [r7, #0]
 8081b9e:	4619      	mov	r1, r3
 8081ba0:	68b8      	ldr	r0, [r7, #8]
 8081ba2:	f000 f8d3 	bl	8081d4c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8081ba6:	68fb      	ldr	r3, [r7, #12]
 8081ba8:	2b02      	cmp	r3, #2
 8081baa:	d102      	bne.n	8081bb2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8081bac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8081bb0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8081bb2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8081bb6:	f000 f84d 	bl	8081c54 <FLASH_WaitForLastOperation>
 8081bba:	4603      	mov	r3, r0
 8081bbc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8081bbe:	693b      	ldr	r3, [r7, #16]
 8081bc0:	2b00      	cmp	r3, #0
 8081bc2:	d006      	beq.n	8081bd2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8081bc4:	4b09      	ldr	r3, [pc, #36]	@ (8081bec <HAL_FLASH_Program+0xd4>)
 8081bc6:	695a      	ldr	r2, [r3, #20]
 8081bc8:	693b      	ldr	r3, [r7, #16]
 8081bca:	43db      	mvns	r3, r3
 8081bcc:	4907      	ldr	r1, [pc, #28]	@ (8081bec <HAL_FLASH_Program+0xd4>)
 8081bce:	4013      	ands	r3, r2
 8081bd0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8081bd2:	f000 f9eb 	bl	8081fac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8081bd6:	4b04      	ldr	r3, [pc, #16]	@ (8081be8 <HAL_FLASH_Program+0xd0>)
 8081bd8:	2200      	movs	r2, #0
 8081bda:	701a      	strb	r2, [r3, #0]

  return status;
 8081bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8081bde:	4618      	mov	r0, r3
 8081be0:	3718      	adds	r7, #24
 8081be2:	46bd      	mov	sp, r7
 8081be4:	bd80      	pop	{r7, pc}
 8081be6:	bf00      	nop
 8081be8:	2000000c 	.word	0x2000000c
 8081bec:	40022000 	.word	0x40022000

08081bf0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8081bf0:	b480      	push	{r7}
 8081bf2:	b083      	sub	sp, #12
 8081bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8081bf6:	2300      	movs	r3, #0
 8081bf8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8081bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8081c28 <HAL_FLASH_Unlock+0x38>)
 8081bfc:	695b      	ldr	r3, [r3, #20]
 8081bfe:	2b00      	cmp	r3, #0
 8081c00:	da0b      	bge.n	8081c1a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8081c02:	4b09      	ldr	r3, [pc, #36]	@ (8081c28 <HAL_FLASH_Unlock+0x38>)
 8081c04:	4a09      	ldr	r2, [pc, #36]	@ (8081c2c <HAL_FLASH_Unlock+0x3c>)
 8081c06:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8081c08:	4b07      	ldr	r3, [pc, #28]	@ (8081c28 <HAL_FLASH_Unlock+0x38>)
 8081c0a:	4a09      	ldr	r2, [pc, #36]	@ (8081c30 <HAL_FLASH_Unlock+0x40>)
 8081c0c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8081c0e:	4b06      	ldr	r3, [pc, #24]	@ (8081c28 <HAL_FLASH_Unlock+0x38>)
 8081c10:	695b      	ldr	r3, [r3, #20]
 8081c12:	2b00      	cmp	r3, #0
 8081c14:	da01      	bge.n	8081c1a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8081c16:	2301      	movs	r3, #1
 8081c18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8081c1a:	79fb      	ldrb	r3, [r7, #7]
}
 8081c1c:	4618      	mov	r0, r3
 8081c1e:	370c      	adds	r7, #12
 8081c20:	46bd      	mov	sp, r7
 8081c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081c26:	4770      	bx	lr
 8081c28:	40022000 	.word	0x40022000
 8081c2c:	45670123 	.word	0x45670123
 8081c30:	cdef89ab 	.word	0xcdef89ab

08081c34 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8081c34:	b480      	push	{r7}
 8081c36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8081c38:	4b05      	ldr	r3, [pc, #20]	@ (8081c50 <HAL_FLASH_Lock+0x1c>)
 8081c3a:	695b      	ldr	r3, [r3, #20]
 8081c3c:	4a04      	ldr	r2, [pc, #16]	@ (8081c50 <HAL_FLASH_Lock+0x1c>)
 8081c3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8081c42:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8081c44:	2300      	movs	r3, #0
}
 8081c46:	4618      	mov	r0, r3
 8081c48:	46bd      	mov	sp, r7
 8081c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081c4e:	4770      	bx	lr
 8081c50:	40022000 	.word	0x40022000

08081c54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8081c54:	b580      	push	{r7, lr}
 8081c56:	b084      	sub	sp, #16
 8081c58:	af00      	add	r7, sp, #0
 8081c5a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8081c5c:	f7ff fc64 	bl	8081528 <HAL_GetTick>
 8081c60:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8081c62:	e00d      	b.n	8081c80 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8081c64:	687b      	ldr	r3, [r7, #4]
 8081c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8081c6a:	d009      	beq.n	8081c80 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8081c6c:	f7ff fc5c 	bl	8081528 <HAL_GetTick>
 8081c70:	4602      	mov	r2, r0
 8081c72:	68fb      	ldr	r3, [r7, #12]
 8081c74:	1ad3      	subs	r3, r2, r3
 8081c76:	687a      	ldr	r2, [r7, #4]
 8081c78:	429a      	cmp	r2, r3
 8081c7a:	d801      	bhi.n	8081c80 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8081c7c:	2303      	movs	r3, #3
 8081c7e:	e036      	b.n	8081cee <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8081c80:	4b1d      	ldr	r3, [pc, #116]	@ (8081cf8 <FLASH_WaitForLastOperation+0xa4>)
 8081c82:	691b      	ldr	r3, [r3, #16]
 8081c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8081c88:	2b00      	cmp	r3, #0
 8081c8a:	d1eb      	bne.n	8081c64 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8081c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8081cf8 <FLASH_WaitForLastOperation+0xa4>)
 8081c8e:	691a      	ldr	r2, [r3, #16]
 8081c90:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8081c94:	4013      	ands	r3, r2
 8081c96:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8081c98:	68bb      	ldr	r3, [r7, #8]
 8081c9a:	2b00      	cmp	r3, #0
 8081c9c:	d01d      	beq.n	8081cda <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8081c9e:	4b17      	ldr	r3, [pc, #92]	@ (8081cfc <FLASH_WaitForLastOperation+0xa8>)
 8081ca0:	685a      	ldr	r2, [r3, #4]
 8081ca2:	68bb      	ldr	r3, [r7, #8]
 8081ca4:	4313      	orrs	r3, r2
 8081ca6:	4a15      	ldr	r2, [pc, #84]	@ (8081cfc <FLASH_WaitForLastOperation+0xa8>)
 8081ca8:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8081caa:	68bb      	ldr	r3, [r7, #8]
 8081cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8081cb0:	d307      	bcc.n	8081cc2 <FLASH_WaitForLastOperation+0x6e>
 8081cb2:	4b11      	ldr	r3, [pc, #68]	@ (8081cf8 <FLASH_WaitForLastOperation+0xa4>)
 8081cb4:	699a      	ldr	r2, [r3, #24]
 8081cb6:	68bb      	ldr	r3, [r7, #8]
 8081cb8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8081cbc:	490e      	ldr	r1, [pc, #56]	@ (8081cf8 <FLASH_WaitForLastOperation+0xa4>)
 8081cbe:	4313      	orrs	r3, r2
 8081cc0:	618b      	str	r3, [r1, #24]
 8081cc2:	68bb      	ldr	r3, [r7, #8]
 8081cc4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8081cc8:	2b00      	cmp	r3, #0
 8081cca:	d004      	beq.n	8081cd6 <FLASH_WaitForLastOperation+0x82>
 8081ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8081cf8 <FLASH_WaitForLastOperation+0xa4>)
 8081cce:	68bb      	ldr	r3, [r7, #8]
 8081cd0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8081cd4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8081cd6:	2301      	movs	r3, #1
 8081cd8:	e009      	b.n	8081cee <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8081cda:	4b07      	ldr	r3, [pc, #28]	@ (8081cf8 <FLASH_WaitForLastOperation+0xa4>)
 8081cdc:	691b      	ldr	r3, [r3, #16]
 8081cde:	f003 0301 	and.w	r3, r3, #1
 8081ce2:	2b00      	cmp	r3, #0
 8081ce4:	d002      	beq.n	8081cec <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8081ce6:	4b04      	ldr	r3, [pc, #16]	@ (8081cf8 <FLASH_WaitForLastOperation+0xa4>)
 8081ce8:	2201      	movs	r2, #1
 8081cea:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8081cec:	2300      	movs	r3, #0
}
 8081cee:	4618      	mov	r0, r3
 8081cf0:	3710      	adds	r7, #16
 8081cf2:	46bd      	mov	sp, r7
 8081cf4:	bd80      	pop	{r7, pc}
 8081cf6:	bf00      	nop
 8081cf8:	40022000 	.word	0x40022000
 8081cfc:	2000000c 	.word	0x2000000c

08081d00 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8081d00:	b480      	push	{r7}
 8081d02:	b085      	sub	sp, #20
 8081d04:	af00      	add	r7, sp, #0
 8081d06:	60f8      	str	r0, [r7, #12]
 8081d08:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8081d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8081d48 <FLASH_Program_DoubleWord+0x48>)
 8081d0e:	695b      	ldr	r3, [r3, #20]
 8081d10:	4a0d      	ldr	r2, [pc, #52]	@ (8081d48 <FLASH_Program_DoubleWord+0x48>)
 8081d12:	f043 0301 	orr.w	r3, r3, #1
 8081d16:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8081d18:	68fb      	ldr	r3, [r7, #12]
 8081d1a:	683a      	ldr	r2, [r7, #0]
 8081d1c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8081d1e:	f3bf 8f6f 	isb	sy
}
 8081d22:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8081d24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8081d28:	f04f 0200 	mov.w	r2, #0
 8081d2c:	f04f 0300 	mov.w	r3, #0
 8081d30:	000a      	movs	r2, r1
 8081d32:	2300      	movs	r3, #0
 8081d34:	68f9      	ldr	r1, [r7, #12]
 8081d36:	3104      	adds	r1, #4
 8081d38:	4613      	mov	r3, r2
 8081d3a:	600b      	str	r3, [r1, #0]
}
 8081d3c:	bf00      	nop
 8081d3e:	3714      	adds	r7, #20
 8081d40:	46bd      	mov	sp, r7
 8081d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081d46:	4770      	bx	lr
 8081d48:	40022000 	.word	0x40022000

08081d4c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8081d4c:	b480      	push	{r7}
 8081d4e:	b089      	sub	sp, #36	@ 0x24
 8081d50:	af00      	add	r7, sp, #0
 8081d52:	6078      	str	r0, [r7, #4]
 8081d54:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8081d56:	2340      	movs	r3, #64	@ 0x40
 8081d58:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8081d5a:	687b      	ldr	r3, [r7, #4]
 8081d5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8081d5e:	683b      	ldr	r3, [r7, #0]
 8081d60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8081d62:	4b14      	ldr	r3, [pc, #80]	@ (8081db4 <FLASH_Program_Fast+0x68>)
 8081d64:	695b      	ldr	r3, [r3, #20]
 8081d66:	4a13      	ldr	r2, [pc, #76]	@ (8081db4 <FLASH_Program_Fast+0x68>)
 8081d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8081d6c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8081d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8081d72:	60fb      	str	r3, [r7, #12]
  return(result);
 8081d74:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8081d76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8081d78:	b672      	cpsid	i
}
 8081d7a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8081d7c:	697b      	ldr	r3, [r7, #20]
 8081d7e:	681a      	ldr	r2, [r3, #0]
 8081d80:	69bb      	ldr	r3, [r7, #24]
 8081d82:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8081d84:	69bb      	ldr	r3, [r7, #24]
 8081d86:	3304      	adds	r3, #4
 8081d88:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8081d8a:	697b      	ldr	r3, [r7, #20]
 8081d8c:	3304      	adds	r3, #4
 8081d8e:	617b      	str	r3, [r7, #20]
    row_index--;
 8081d90:	7ffb      	ldrb	r3, [r7, #31]
 8081d92:	3b01      	subs	r3, #1
 8081d94:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8081d96:	7ffb      	ldrb	r3, [r7, #31]
 8081d98:	2b00      	cmp	r3, #0
 8081d9a:	d1ef      	bne.n	8081d7c <FLASH_Program_Fast+0x30>
 8081d9c:	693b      	ldr	r3, [r7, #16]
 8081d9e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8081da0:	68bb      	ldr	r3, [r7, #8]
 8081da2:	f383 8810 	msr	PRIMASK, r3
}
 8081da6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8081da8:	bf00      	nop
 8081daa:	3724      	adds	r7, #36	@ 0x24
 8081dac:	46bd      	mov	sp, r7
 8081dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081db2:	4770      	bx	lr
 8081db4:	40022000 	.word	0x40022000

08081db8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8081db8:	b580      	push	{r7, lr}
 8081dba:	b084      	sub	sp, #16
 8081dbc:	af00      	add	r7, sp, #0
 8081dbe:	6078      	str	r0, [r7, #4]
 8081dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8081dc2:	4b49      	ldr	r3, [pc, #292]	@ (8081ee8 <HAL_FLASHEx_Erase+0x130>)
 8081dc4:	781b      	ldrb	r3, [r3, #0]
 8081dc6:	2b01      	cmp	r3, #1
 8081dc8:	d101      	bne.n	8081dce <HAL_FLASHEx_Erase+0x16>
 8081dca:	2302      	movs	r3, #2
 8081dcc:	e087      	b.n	8081ede <HAL_FLASHEx_Erase+0x126>
 8081dce:	4b46      	ldr	r3, [pc, #280]	@ (8081ee8 <HAL_FLASHEx_Erase+0x130>)
 8081dd0:	2201      	movs	r2, #1
 8081dd2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8081dd4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8081dd8:	f7ff ff3c 	bl	8081c54 <FLASH_WaitForLastOperation>
 8081ddc:	4603      	mov	r3, r0
 8081dde:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8081de0:	7bfb      	ldrb	r3, [r7, #15]
 8081de2:	2b00      	cmp	r3, #0
 8081de4:	d177      	bne.n	8081ed6 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8081de6:	4b40      	ldr	r3, [pc, #256]	@ (8081ee8 <HAL_FLASHEx_Erase+0x130>)
 8081de8:	2200      	movs	r2, #0
 8081dea:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8081dec:	4b3f      	ldr	r3, [pc, #252]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081dee:	681b      	ldr	r3, [r3, #0]
 8081df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8081df4:	2b00      	cmp	r3, #0
 8081df6:	d013      	beq.n	8081e20 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8081df8:	4b3c      	ldr	r3, [pc, #240]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081dfa:	681b      	ldr	r3, [r3, #0]
 8081dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081e00:	2b00      	cmp	r3, #0
 8081e02:	d009      	beq.n	8081e18 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8081e04:	4b39      	ldr	r3, [pc, #228]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081e06:	681b      	ldr	r3, [r3, #0]
 8081e08:	4a38      	ldr	r2, [pc, #224]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081e0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8081e0e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8081e10:	4b35      	ldr	r3, [pc, #212]	@ (8081ee8 <HAL_FLASHEx_Erase+0x130>)
 8081e12:	2203      	movs	r2, #3
 8081e14:	771a      	strb	r2, [r3, #28]
 8081e16:	e016      	b.n	8081e46 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8081e18:	4b33      	ldr	r3, [pc, #204]	@ (8081ee8 <HAL_FLASHEx_Erase+0x130>)
 8081e1a:	2201      	movs	r2, #1
 8081e1c:	771a      	strb	r2, [r3, #28]
 8081e1e:	e012      	b.n	8081e46 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8081e20:	4b32      	ldr	r3, [pc, #200]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081e22:	681b      	ldr	r3, [r3, #0]
 8081e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081e28:	2b00      	cmp	r3, #0
 8081e2a:	d009      	beq.n	8081e40 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8081e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081e2e:	681b      	ldr	r3, [r3, #0]
 8081e30:	4a2e      	ldr	r2, [pc, #184]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081e32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8081e36:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8081e38:	4b2b      	ldr	r3, [pc, #172]	@ (8081ee8 <HAL_FLASHEx_Erase+0x130>)
 8081e3a:	2202      	movs	r2, #2
 8081e3c:	771a      	strb	r2, [r3, #28]
 8081e3e:	e002      	b.n	8081e46 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8081e40:	4b29      	ldr	r3, [pc, #164]	@ (8081ee8 <HAL_FLASHEx_Erase+0x130>)
 8081e42:	2200      	movs	r2, #0
 8081e44:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8081e46:	687b      	ldr	r3, [r7, #4]
 8081e48:	681b      	ldr	r3, [r3, #0]
 8081e4a:	2b01      	cmp	r3, #1
 8081e4c:	d113      	bne.n	8081e76 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8081e4e:	687b      	ldr	r3, [r7, #4]
 8081e50:	685b      	ldr	r3, [r3, #4]
 8081e52:	4618      	mov	r0, r3
 8081e54:	f000 f84c 	bl	8081ef0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8081e58:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8081e5c:	f7ff fefa 	bl	8081c54 <FLASH_WaitForLastOperation>
 8081e60:	4603      	mov	r3, r0
 8081e62:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8081e64:	4b21      	ldr	r3, [pc, #132]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081e66:	695b      	ldr	r3, [r3, #20]
 8081e68:	4a20      	ldr	r2, [pc, #128]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081e6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8081e6e:	f023 0304 	bic.w	r3, r3, #4
 8081e72:	6153      	str	r3, [r2, #20]
 8081e74:	e02d      	b.n	8081ed2 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8081e76:	683b      	ldr	r3, [r7, #0]
 8081e78:	f04f 32ff 	mov.w	r2, #4294967295
 8081e7c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8081e7e:	687b      	ldr	r3, [r7, #4]
 8081e80:	689b      	ldr	r3, [r3, #8]
 8081e82:	60bb      	str	r3, [r7, #8]
 8081e84:	e01d      	b.n	8081ec2 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8081e86:	687b      	ldr	r3, [r7, #4]
 8081e88:	685b      	ldr	r3, [r3, #4]
 8081e8a:	4619      	mov	r1, r3
 8081e8c:	68b8      	ldr	r0, [r7, #8]
 8081e8e:	f000 f857 	bl	8081f40 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8081e92:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8081e96:	f7ff fedd 	bl	8081c54 <FLASH_WaitForLastOperation>
 8081e9a:	4603      	mov	r3, r0
 8081e9c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8081e9e:	4b13      	ldr	r3, [pc, #76]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081ea0:	695b      	ldr	r3, [r3, #20]
 8081ea2:	4a12      	ldr	r2, [pc, #72]	@ (8081eec <HAL_FLASHEx_Erase+0x134>)
 8081ea4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8081ea8:	f023 0302 	bic.w	r3, r3, #2
 8081eac:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8081eae:	7bfb      	ldrb	r3, [r7, #15]
 8081eb0:	2b00      	cmp	r3, #0
 8081eb2:	d003      	beq.n	8081ebc <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8081eb4:	683b      	ldr	r3, [r7, #0]
 8081eb6:	68ba      	ldr	r2, [r7, #8]
 8081eb8:	601a      	str	r2, [r3, #0]
          break;
 8081eba:	e00a      	b.n	8081ed2 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8081ebc:	68bb      	ldr	r3, [r7, #8]
 8081ebe:	3301      	adds	r3, #1
 8081ec0:	60bb      	str	r3, [r7, #8]
 8081ec2:	687b      	ldr	r3, [r7, #4]
 8081ec4:	689a      	ldr	r2, [r3, #8]
 8081ec6:	687b      	ldr	r3, [r7, #4]
 8081ec8:	68db      	ldr	r3, [r3, #12]
 8081eca:	4413      	add	r3, r2
 8081ecc:	68ba      	ldr	r2, [r7, #8]
 8081ece:	429a      	cmp	r2, r3
 8081ed0:	d3d9      	bcc.n	8081e86 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8081ed2:	f000 f86b 	bl	8081fac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8081ed6:	4b04      	ldr	r3, [pc, #16]	@ (8081ee8 <HAL_FLASHEx_Erase+0x130>)
 8081ed8:	2200      	movs	r2, #0
 8081eda:	701a      	strb	r2, [r3, #0]

  return status;
 8081edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8081ede:	4618      	mov	r0, r3
 8081ee0:	3710      	adds	r7, #16
 8081ee2:	46bd      	mov	sp, r7
 8081ee4:	bd80      	pop	{r7, pc}
 8081ee6:	bf00      	nop
 8081ee8:	2000000c 	.word	0x2000000c
 8081eec:	40022000 	.word	0x40022000

08081ef0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8081ef0:	b480      	push	{r7}
 8081ef2:	b083      	sub	sp, #12
 8081ef4:	af00      	add	r7, sp, #0
 8081ef6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8081ef8:	687b      	ldr	r3, [r7, #4]
 8081efa:	f003 0301 	and.w	r3, r3, #1
 8081efe:	2b00      	cmp	r3, #0
 8081f00:	d005      	beq.n	8081f0e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8081f02:	4b0e      	ldr	r3, [pc, #56]	@ (8081f3c <FLASH_MassErase+0x4c>)
 8081f04:	695b      	ldr	r3, [r3, #20]
 8081f06:	4a0d      	ldr	r2, [pc, #52]	@ (8081f3c <FLASH_MassErase+0x4c>)
 8081f08:	f043 0304 	orr.w	r3, r3, #4
 8081f0c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8081f0e:	687b      	ldr	r3, [r7, #4]
 8081f10:	f003 0302 	and.w	r3, r3, #2
 8081f14:	2b00      	cmp	r3, #0
 8081f16:	d005      	beq.n	8081f24 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8081f18:	4b08      	ldr	r3, [pc, #32]	@ (8081f3c <FLASH_MassErase+0x4c>)
 8081f1a:	695b      	ldr	r3, [r3, #20]
 8081f1c:	4a07      	ldr	r2, [pc, #28]	@ (8081f3c <FLASH_MassErase+0x4c>)
 8081f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8081f22:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8081f24:	4b05      	ldr	r3, [pc, #20]	@ (8081f3c <FLASH_MassErase+0x4c>)
 8081f26:	695b      	ldr	r3, [r3, #20]
 8081f28:	4a04      	ldr	r2, [pc, #16]	@ (8081f3c <FLASH_MassErase+0x4c>)
 8081f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8081f2e:	6153      	str	r3, [r2, #20]
}
 8081f30:	bf00      	nop
 8081f32:	370c      	adds	r7, #12
 8081f34:	46bd      	mov	sp, r7
 8081f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081f3a:	4770      	bx	lr
 8081f3c:	40022000 	.word	0x40022000

08081f40 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8081f40:	b480      	push	{r7}
 8081f42:	b083      	sub	sp, #12
 8081f44:	af00      	add	r7, sp, #0
 8081f46:	6078      	str	r0, [r7, #4]
 8081f48:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8081f4a:	683b      	ldr	r3, [r7, #0]
 8081f4c:	f003 0301 	and.w	r3, r3, #1
 8081f50:	2b00      	cmp	r3, #0
 8081f52:	d006      	beq.n	8081f62 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8081f54:	4b14      	ldr	r3, [pc, #80]	@ (8081fa8 <FLASH_PageErase+0x68>)
 8081f56:	695b      	ldr	r3, [r3, #20]
 8081f58:	4a13      	ldr	r2, [pc, #76]	@ (8081fa8 <FLASH_PageErase+0x68>)
 8081f5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8081f5e:	6153      	str	r3, [r2, #20]
 8081f60:	e005      	b.n	8081f6e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8081f62:	4b11      	ldr	r3, [pc, #68]	@ (8081fa8 <FLASH_PageErase+0x68>)
 8081f64:	695b      	ldr	r3, [r3, #20]
 8081f66:	4a10      	ldr	r2, [pc, #64]	@ (8081fa8 <FLASH_PageErase+0x68>)
 8081f68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8081f6c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8081f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8081fa8 <FLASH_PageErase+0x68>)
 8081f70:	695b      	ldr	r3, [r3, #20]
 8081f72:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8081f76:	687b      	ldr	r3, [r7, #4]
 8081f78:	00db      	lsls	r3, r3, #3
 8081f7a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8081f7e:	490a      	ldr	r1, [pc, #40]	@ (8081fa8 <FLASH_PageErase+0x68>)
 8081f80:	4313      	orrs	r3, r2
 8081f82:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8081f84:	4b08      	ldr	r3, [pc, #32]	@ (8081fa8 <FLASH_PageErase+0x68>)
 8081f86:	695b      	ldr	r3, [r3, #20]
 8081f88:	4a07      	ldr	r2, [pc, #28]	@ (8081fa8 <FLASH_PageErase+0x68>)
 8081f8a:	f043 0302 	orr.w	r3, r3, #2
 8081f8e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8081f90:	4b05      	ldr	r3, [pc, #20]	@ (8081fa8 <FLASH_PageErase+0x68>)
 8081f92:	695b      	ldr	r3, [r3, #20]
 8081f94:	4a04      	ldr	r2, [pc, #16]	@ (8081fa8 <FLASH_PageErase+0x68>)
 8081f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8081f9a:	6153      	str	r3, [r2, #20]
}
 8081f9c:	bf00      	nop
 8081f9e:	370c      	adds	r7, #12
 8081fa0:	46bd      	mov	sp, r7
 8081fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081fa6:	4770      	bx	lr
 8081fa8:	40022000 	.word	0x40022000

08081fac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8081fac:	b480      	push	{r7}
 8081fae:	b083      	sub	sp, #12
 8081fb0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8081fb2:	4b21      	ldr	r3, [pc, #132]	@ (8082038 <FLASH_FlushCaches+0x8c>)
 8081fb4:	7f1b      	ldrb	r3, [r3, #28]
 8081fb6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8081fb8:	79fb      	ldrb	r3, [r7, #7]
 8081fba:	2b01      	cmp	r3, #1
 8081fbc:	d002      	beq.n	8081fc4 <FLASH_FlushCaches+0x18>
 8081fbe:	79fb      	ldrb	r3, [r7, #7]
 8081fc0:	2b03      	cmp	r3, #3
 8081fc2:	d117      	bne.n	8081ff4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8081fc4:	4b1d      	ldr	r3, [pc, #116]	@ (808203c <FLASH_FlushCaches+0x90>)
 8081fc6:	681b      	ldr	r3, [r3, #0]
 8081fc8:	4a1c      	ldr	r2, [pc, #112]	@ (808203c <FLASH_FlushCaches+0x90>)
 8081fca:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8081fce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8081fd0:	4b1a      	ldr	r3, [pc, #104]	@ (808203c <FLASH_FlushCaches+0x90>)
 8081fd2:	681b      	ldr	r3, [r3, #0]
 8081fd4:	4a19      	ldr	r2, [pc, #100]	@ (808203c <FLASH_FlushCaches+0x90>)
 8081fd6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8081fda:	6013      	str	r3, [r2, #0]
 8081fdc:	4b17      	ldr	r3, [pc, #92]	@ (808203c <FLASH_FlushCaches+0x90>)
 8081fde:	681b      	ldr	r3, [r3, #0]
 8081fe0:	4a16      	ldr	r2, [pc, #88]	@ (808203c <FLASH_FlushCaches+0x90>)
 8081fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8081fe6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8081fe8:	4b14      	ldr	r3, [pc, #80]	@ (808203c <FLASH_FlushCaches+0x90>)
 8081fea:	681b      	ldr	r3, [r3, #0]
 8081fec:	4a13      	ldr	r2, [pc, #76]	@ (808203c <FLASH_FlushCaches+0x90>)
 8081fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8081ff2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8081ff4:	79fb      	ldrb	r3, [r7, #7]
 8081ff6:	2b02      	cmp	r3, #2
 8081ff8:	d002      	beq.n	8082000 <FLASH_FlushCaches+0x54>
 8081ffa:	79fb      	ldrb	r3, [r7, #7]
 8081ffc:	2b03      	cmp	r3, #3
 8081ffe:	d111      	bne.n	8082024 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8082000:	4b0e      	ldr	r3, [pc, #56]	@ (808203c <FLASH_FlushCaches+0x90>)
 8082002:	681b      	ldr	r3, [r3, #0]
 8082004:	4a0d      	ldr	r2, [pc, #52]	@ (808203c <FLASH_FlushCaches+0x90>)
 8082006:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 808200a:	6013      	str	r3, [r2, #0]
 808200c:	4b0b      	ldr	r3, [pc, #44]	@ (808203c <FLASH_FlushCaches+0x90>)
 808200e:	681b      	ldr	r3, [r3, #0]
 8082010:	4a0a      	ldr	r2, [pc, #40]	@ (808203c <FLASH_FlushCaches+0x90>)
 8082012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8082016:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8082018:	4b08      	ldr	r3, [pc, #32]	@ (808203c <FLASH_FlushCaches+0x90>)
 808201a:	681b      	ldr	r3, [r3, #0]
 808201c:	4a07      	ldr	r2, [pc, #28]	@ (808203c <FLASH_FlushCaches+0x90>)
 808201e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8082022:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8082024:	4b04      	ldr	r3, [pc, #16]	@ (8082038 <FLASH_FlushCaches+0x8c>)
 8082026:	2200      	movs	r2, #0
 8082028:	771a      	strb	r2, [r3, #28]
}
 808202a:	bf00      	nop
 808202c:	370c      	adds	r7, #12
 808202e:	46bd      	mov	sp, r7
 8082030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082034:	4770      	bx	lr
 8082036:	bf00      	nop
 8082038:	2000000c 	.word	0x2000000c
 808203c:	40022000 	.word	0x40022000

08082040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8082040:	b480      	push	{r7}
 8082042:	b087      	sub	sp, #28
 8082044:	af00      	add	r7, sp, #0
 8082046:	6078      	str	r0, [r7, #4]
 8082048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 808204a:	2300      	movs	r3, #0
 808204c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 808204e:	e166      	b.n	808231e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8082050:	683b      	ldr	r3, [r7, #0]
 8082052:	681a      	ldr	r2, [r3, #0]
 8082054:	2101      	movs	r1, #1
 8082056:	697b      	ldr	r3, [r7, #20]
 8082058:	fa01 f303 	lsl.w	r3, r1, r3
 808205c:	4013      	ands	r3, r2
 808205e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8082060:	68fb      	ldr	r3, [r7, #12]
 8082062:	2b00      	cmp	r3, #0
 8082064:	f000 8158 	beq.w	8082318 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8082068:	683b      	ldr	r3, [r7, #0]
 808206a:	685b      	ldr	r3, [r3, #4]
 808206c:	f003 0303 	and.w	r3, r3, #3
 8082070:	2b01      	cmp	r3, #1
 8082072:	d005      	beq.n	8082080 <HAL_GPIO_Init+0x40>
 8082074:	683b      	ldr	r3, [r7, #0]
 8082076:	685b      	ldr	r3, [r3, #4]
 8082078:	f003 0303 	and.w	r3, r3, #3
 808207c:	2b02      	cmp	r3, #2
 808207e:	d130      	bne.n	80820e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8082080:	687b      	ldr	r3, [r7, #4]
 8082082:	689b      	ldr	r3, [r3, #8]
 8082084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8082086:	697b      	ldr	r3, [r7, #20]
 8082088:	005b      	lsls	r3, r3, #1
 808208a:	2203      	movs	r2, #3
 808208c:	fa02 f303 	lsl.w	r3, r2, r3
 8082090:	43db      	mvns	r3, r3
 8082092:	693a      	ldr	r2, [r7, #16]
 8082094:	4013      	ands	r3, r2
 8082096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8082098:	683b      	ldr	r3, [r7, #0]
 808209a:	68da      	ldr	r2, [r3, #12]
 808209c:	697b      	ldr	r3, [r7, #20]
 808209e:	005b      	lsls	r3, r3, #1
 80820a0:	fa02 f303 	lsl.w	r3, r2, r3
 80820a4:	693a      	ldr	r2, [r7, #16]
 80820a6:	4313      	orrs	r3, r2
 80820a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80820aa:	687b      	ldr	r3, [r7, #4]
 80820ac:	693a      	ldr	r2, [r7, #16]
 80820ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80820b0:	687b      	ldr	r3, [r7, #4]
 80820b2:	685b      	ldr	r3, [r3, #4]
 80820b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80820b6:	2201      	movs	r2, #1
 80820b8:	697b      	ldr	r3, [r7, #20]
 80820ba:	fa02 f303 	lsl.w	r3, r2, r3
 80820be:	43db      	mvns	r3, r3
 80820c0:	693a      	ldr	r2, [r7, #16]
 80820c2:	4013      	ands	r3, r2
 80820c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80820c6:	683b      	ldr	r3, [r7, #0]
 80820c8:	685b      	ldr	r3, [r3, #4]
 80820ca:	091b      	lsrs	r3, r3, #4
 80820cc:	f003 0201 	and.w	r2, r3, #1
 80820d0:	697b      	ldr	r3, [r7, #20]
 80820d2:	fa02 f303 	lsl.w	r3, r2, r3
 80820d6:	693a      	ldr	r2, [r7, #16]
 80820d8:	4313      	orrs	r3, r2
 80820da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80820dc:	687b      	ldr	r3, [r7, #4]
 80820de:	693a      	ldr	r2, [r7, #16]
 80820e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80820e2:	683b      	ldr	r3, [r7, #0]
 80820e4:	685b      	ldr	r3, [r3, #4]
 80820e6:	f003 0303 	and.w	r3, r3, #3
 80820ea:	2b03      	cmp	r3, #3
 80820ec:	d017      	beq.n	808211e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80820ee:	687b      	ldr	r3, [r7, #4]
 80820f0:	68db      	ldr	r3, [r3, #12]
 80820f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80820f4:	697b      	ldr	r3, [r7, #20]
 80820f6:	005b      	lsls	r3, r3, #1
 80820f8:	2203      	movs	r2, #3
 80820fa:	fa02 f303 	lsl.w	r3, r2, r3
 80820fe:	43db      	mvns	r3, r3
 8082100:	693a      	ldr	r2, [r7, #16]
 8082102:	4013      	ands	r3, r2
 8082104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8082106:	683b      	ldr	r3, [r7, #0]
 8082108:	689a      	ldr	r2, [r3, #8]
 808210a:	697b      	ldr	r3, [r7, #20]
 808210c:	005b      	lsls	r3, r3, #1
 808210e:	fa02 f303 	lsl.w	r3, r2, r3
 8082112:	693a      	ldr	r2, [r7, #16]
 8082114:	4313      	orrs	r3, r2
 8082116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8082118:	687b      	ldr	r3, [r7, #4]
 808211a:	693a      	ldr	r2, [r7, #16]
 808211c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 808211e:	683b      	ldr	r3, [r7, #0]
 8082120:	685b      	ldr	r3, [r3, #4]
 8082122:	f003 0303 	and.w	r3, r3, #3
 8082126:	2b02      	cmp	r3, #2
 8082128:	d123      	bne.n	8082172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 808212a:	697b      	ldr	r3, [r7, #20]
 808212c:	08da      	lsrs	r2, r3, #3
 808212e:	687b      	ldr	r3, [r7, #4]
 8082130:	3208      	adds	r2, #8
 8082132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8082136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8082138:	697b      	ldr	r3, [r7, #20]
 808213a:	f003 0307 	and.w	r3, r3, #7
 808213e:	009b      	lsls	r3, r3, #2
 8082140:	220f      	movs	r2, #15
 8082142:	fa02 f303 	lsl.w	r3, r2, r3
 8082146:	43db      	mvns	r3, r3
 8082148:	693a      	ldr	r2, [r7, #16]
 808214a:	4013      	ands	r3, r2
 808214c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 808214e:	683b      	ldr	r3, [r7, #0]
 8082150:	691a      	ldr	r2, [r3, #16]
 8082152:	697b      	ldr	r3, [r7, #20]
 8082154:	f003 0307 	and.w	r3, r3, #7
 8082158:	009b      	lsls	r3, r3, #2
 808215a:	fa02 f303 	lsl.w	r3, r2, r3
 808215e:	693a      	ldr	r2, [r7, #16]
 8082160:	4313      	orrs	r3, r2
 8082162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8082164:	697b      	ldr	r3, [r7, #20]
 8082166:	08da      	lsrs	r2, r3, #3
 8082168:	687b      	ldr	r3, [r7, #4]
 808216a:	3208      	adds	r2, #8
 808216c:	6939      	ldr	r1, [r7, #16]
 808216e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8082172:	687b      	ldr	r3, [r7, #4]
 8082174:	681b      	ldr	r3, [r3, #0]
 8082176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8082178:	697b      	ldr	r3, [r7, #20]
 808217a:	005b      	lsls	r3, r3, #1
 808217c:	2203      	movs	r2, #3
 808217e:	fa02 f303 	lsl.w	r3, r2, r3
 8082182:	43db      	mvns	r3, r3
 8082184:	693a      	ldr	r2, [r7, #16]
 8082186:	4013      	ands	r3, r2
 8082188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 808218a:	683b      	ldr	r3, [r7, #0]
 808218c:	685b      	ldr	r3, [r3, #4]
 808218e:	f003 0203 	and.w	r2, r3, #3
 8082192:	697b      	ldr	r3, [r7, #20]
 8082194:	005b      	lsls	r3, r3, #1
 8082196:	fa02 f303 	lsl.w	r3, r2, r3
 808219a:	693a      	ldr	r2, [r7, #16]
 808219c:	4313      	orrs	r3, r2
 808219e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80821a0:	687b      	ldr	r3, [r7, #4]
 80821a2:	693a      	ldr	r2, [r7, #16]
 80821a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80821a6:	683b      	ldr	r3, [r7, #0]
 80821a8:	685b      	ldr	r3, [r3, #4]
 80821aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80821ae:	2b00      	cmp	r3, #0
 80821b0:	f000 80b2 	beq.w	8082318 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80821b4:	4b61      	ldr	r3, [pc, #388]	@ (808233c <HAL_GPIO_Init+0x2fc>)
 80821b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80821b8:	4a60      	ldr	r2, [pc, #384]	@ (808233c <HAL_GPIO_Init+0x2fc>)
 80821ba:	f043 0301 	orr.w	r3, r3, #1
 80821be:	6613      	str	r3, [r2, #96]	@ 0x60
 80821c0:	4b5e      	ldr	r3, [pc, #376]	@ (808233c <HAL_GPIO_Init+0x2fc>)
 80821c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80821c4:	f003 0301 	and.w	r3, r3, #1
 80821c8:	60bb      	str	r3, [r7, #8]
 80821ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80821cc:	4a5c      	ldr	r2, [pc, #368]	@ (8082340 <HAL_GPIO_Init+0x300>)
 80821ce:	697b      	ldr	r3, [r7, #20]
 80821d0:	089b      	lsrs	r3, r3, #2
 80821d2:	3302      	adds	r3, #2
 80821d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80821d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80821da:	697b      	ldr	r3, [r7, #20]
 80821dc:	f003 0303 	and.w	r3, r3, #3
 80821e0:	009b      	lsls	r3, r3, #2
 80821e2:	220f      	movs	r2, #15
 80821e4:	fa02 f303 	lsl.w	r3, r2, r3
 80821e8:	43db      	mvns	r3, r3
 80821ea:	693a      	ldr	r2, [r7, #16]
 80821ec:	4013      	ands	r3, r2
 80821ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80821f0:	687b      	ldr	r3, [r7, #4]
 80821f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80821f6:	d02b      	beq.n	8082250 <HAL_GPIO_Init+0x210>
 80821f8:	687b      	ldr	r3, [r7, #4]
 80821fa:	4a52      	ldr	r2, [pc, #328]	@ (8082344 <HAL_GPIO_Init+0x304>)
 80821fc:	4293      	cmp	r3, r2
 80821fe:	d025      	beq.n	808224c <HAL_GPIO_Init+0x20c>
 8082200:	687b      	ldr	r3, [r7, #4]
 8082202:	4a51      	ldr	r2, [pc, #324]	@ (8082348 <HAL_GPIO_Init+0x308>)
 8082204:	4293      	cmp	r3, r2
 8082206:	d01f      	beq.n	8082248 <HAL_GPIO_Init+0x208>
 8082208:	687b      	ldr	r3, [r7, #4]
 808220a:	4a50      	ldr	r2, [pc, #320]	@ (808234c <HAL_GPIO_Init+0x30c>)
 808220c:	4293      	cmp	r3, r2
 808220e:	d019      	beq.n	8082244 <HAL_GPIO_Init+0x204>
 8082210:	687b      	ldr	r3, [r7, #4]
 8082212:	4a4f      	ldr	r2, [pc, #316]	@ (8082350 <HAL_GPIO_Init+0x310>)
 8082214:	4293      	cmp	r3, r2
 8082216:	d013      	beq.n	8082240 <HAL_GPIO_Init+0x200>
 8082218:	687b      	ldr	r3, [r7, #4]
 808221a:	4a4e      	ldr	r2, [pc, #312]	@ (8082354 <HAL_GPIO_Init+0x314>)
 808221c:	4293      	cmp	r3, r2
 808221e:	d00d      	beq.n	808223c <HAL_GPIO_Init+0x1fc>
 8082220:	687b      	ldr	r3, [r7, #4]
 8082222:	4a4d      	ldr	r2, [pc, #308]	@ (8082358 <HAL_GPIO_Init+0x318>)
 8082224:	4293      	cmp	r3, r2
 8082226:	d007      	beq.n	8082238 <HAL_GPIO_Init+0x1f8>
 8082228:	687b      	ldr	r3, [r7, #4]
 808222a:	4a4c      	ldr	r2, [pc, #304]	@ (808235c <HAL_GPIO_Init+0x31c>)
 808222c:	4293      	cmp	r3, r2
 808222e:	d101      	bne.n	8082234 <HAL_GPIO_Init+0x1f4>
 8082230:	2307      	movs	r3, #7
 8082232:	e00e      	b.n	8082252 <HAL_GPIO_Init+0x212>
 8082234:	2308      	movs	r3, #8
 8082236:	e00c      	b.n	8082252 <HAL_GPIO_Init+0x212>
 8082238:	2306      	movs	r3, #6
 808223a:	e00a      	b.n	8082252 <HAL_GPIO_Init+0x212>
 808223c:	2305      	movs	r3, #5
 808223e:	e008      	b.n	8082252 <HAL_GPIO_Init+0x212>
 8082240:	2304      	movs	r3, #4
 8082242:	e006      	b.n	8082252 <HAL_GPIO_Init+0x212>
 8082244:	2303      	movs	r3, #3
 8082246:	e004      	b.n	8082252 <HAL_GPIO_Init+0x212>
 8082248:	2302      	movs	r3, #2
 808224a:	e002      	b.n	8082252 <HAL_GPIO_Init+0x212>
 808224c:	2301      	movs	r3, #1
 808224e:	e000      	b.n	8082252 <HAL_GPIO_Init+0x212>
 8082250:	2300      	movs	r3, #0
 8082252:	697a      	ldr	r2, [r7, #20]
 8082254:	f002 0203 	and.w	r2, r2, #3
 8082258:	0092      	lsls	r2, r2, #2
 808225a:	4093      	lsls	r3, r2
 808225c:	693a      	ldr	r2, [r7, #16]
 808225e:	4313      	orrs	r3, r2
 8082260:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8082262:	4937      	ldr	r1, [pc, #220]	@ (8082340 <HAL_GPIO_Init+0x300>)
 8082264:	697b      	ldr	r3, [r7, #20]
 8082266:	089b      	lsrs	r3, r3, #2
 8082268:	3302      	adds	r3, #2
 808226a:	693a      	ldr	r2, [r7, #16]
 808226c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8082270:	4b3b      	ldr	r3, [pc, #236]	@ (8082360 <HAL_GPIO_Init+0x320>)
 8082272:	689b      	ldr	r3, [r3, #8]
 8082274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8082276:	68fb      	ldr	r3, [r7, #12]
 8082278:	43db      	mvns	r3, r3
 808227a:	693a      	ldr	r2, [r7, #16]
 808227c:	4013      	ands	r3, r2
 808227e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8082280:	683b      	ldr	r3, [r7, #0]
 8082282:	685b      	ldr	r3, [r3, #4]
 8082284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8082288:	2b00      	cmp	r3, #0
 808228a:	d003      	beq.n	8082294 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 808228c:	693a      	ldr	r2, [r7, #16]
 808228e:	68fb      	ldr	r3, [r7, #12]
 8082290:	4313      	orrs	r3, r2
 8082292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8082294:	4a32      	ldr	r2, [pc, #200]	@ (8082360 <HAL_GPIO_Init+0x320>)
 8082296:	693b      	ldr	r3, [r7, #16]
 8082298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 808229a:	4b31      	ldr	r3, [pc, #196]	@ (8082360 <HAL_GPIO_Init+0x320>)
 808229c:	68db      	ldr	r3, [r3, #12]
 808229e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80822a0:	68fb      	ldr	r3, [r7, #12]
 80822a2:	43db      	mvns	r3, r3
 80822a4:	693a      	ldr	r2, [r7, #16]
 80822a6:	4013      	ands	r3, r2
 80822a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80822aa:	683b      	ldr	r3, [r7, #0]
 80822ac:	685b      	ldr	r3, [r3, #4]
 80822ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80822b2:	2b00      	cmp	r3, #0
 80822b4:	d003      	beq.n	80822be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80822b6:	693a      	ldr	r2, [r7, #16]
 80822b8:	68fb      	ldr	r3, [r7, #12]
 80822ba:	4313      	orrs	r3, r2
 80822bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80822be:	4a28      	ldr	r2, [pc, #160]	@ (8082360 <HAL_GPIO_Init+0x320>)
 80822c0:	693b      	ldr	r3, [r7, #16]
 80822c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80822c4:	4b26      	ldr	r3, [pc, #152]	@ (8082360 <HAL_GPIO_Init+0x320>)
 80822c6:	685b      	ldr	r3, [r3, #4]
 80822c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80822ca:	68fb      	ldr	r3, [r7, #12]
 80822cc:	43db      	mvns	r3, r3
 80822ce:	693a      	ldr	r2, [r7, #16]
 80822d0:	4013      	ands	r3, r2
 80822d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80822d4:	683b      	ldr	r3, [r7, #0]
 80822d6:	685b      	ldr	r3, [r3, #4]
 80822d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80822dc:	2b00      	cmp	r3, #0
 80822de:	d003      	beq.n	80822e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80822e0:	693a      	ldr	r2, [r7, #16]
 80822e2:	68fb      	ldr	r3, [r7, #12]
 80822e4:	4313      	orrs	r3, r2
 80822e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80822e8:	4a1d      	ldr	r2, [pc, #116]	@ (8082360 <HAL_GPIO_Init+0x320>)
 80822ea:	693b      	ldr	r3, [r7, #16]
 80822ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80822ee:	4b1c      	ldr	r3, [pc, #112]	@ (8082360 <HAL_GPIO_Init+0x320>)
 80822f0:	681b      	ldr	r3, [r3, #0]
 80822f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80822f4:	68fb      	ldr	r3, [r7, #12]
 80822f6:	43db      	mvns	r3, r3
 80822f8:	693a      	ldr	r2, [r7, #16]
 80822fa:	4013      	ands	r3, r2
 80822fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80822fe:	683b      	ldr	r3, [r7, #0]
 8082300:	685b      	ldr	r3, [r3, #4]
 8082302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8082306:	2b00      	cmp	r3, #0
 8082308:	d003      	beq.n	8082312 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 808230a:	693a      	ldr	r2, [r7, #16]
 808230c:	68fb      	ldr	r3, [r7, #12]
 808230e:	4313      	orrs	r3, r2
 8082310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8082312:	4a13      	ldr	r2, [pc, #76]	@ (8082360 <HAL_GPIO_Init+0x320>)
 8082314:	693b      	ldr	r3, [r7, #16]
 8082316:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8082318:	697b      	ldr	r3, [r7, #20]
 808231a:	3301      	adds	r3, #1
 808231c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 808231e:	683b      	ldr	r3, [r7, #0]
 8082320:	681a      	ldr	r2, [r3, #0]
 8082322:	697b      	ldr	r3, [r7, #20]
 8082324:	fa22 f303 	lsr.w	r3, r2, r3
 8082328:	2b00      	cmp	r3, #0
 808232a:	f47f ae91 	bne.w	8082050 <HAL_GPIO_Init+0x10>
  }
}
 808232e:	bf00      	nop
 8082330:	bf00      	nop
 8082332:	371c      	adds	r7, #28
 8082334:	46bd      	mov	sp, r7
 8082336:	f85d 7b04 	ldr.w	r7, [sp], #4
 808233a:	4770      	bx	lr
 808233c:	40021000 	.word	0x40021000
 8082340:	40010000 	.word	0x40010000
 8082344:	48000400 	.word	0x48000400
 8082348:	48000800 	.word	0x48000800
 808234c:	48000c00 	.word	0x48000c00
 8082350:	48001000 	.word	0x48001000
 8082354:	48001400 	.word	0x48001400
 8082358:	48001800 	.word	0x48001800
 808235c:	48001c00 	.word	0x48001c00
 8082360:	40010400 	.word	0x40010400

08082364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8082364:	b480      	push	{r7}
 8082366:	b085      	sub	sp, #20
 8082368:	af00      	add	r7, sp, #0
 808236a:	6078      	str	r0, [r7, #4]
 808236c:	460b      	mov	r3, r1
 808236e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8082370:	687b      	ldr	r3, [r7, #4]
 8082372:	691a      	ldr	r2, [r3, #16]
 8082374:	887b      	ldrh	r3, [r7, #2]
 8082376:	4013      	ands	r3, r2
 8082378:	2b00      	cmp	r3, #0
 808237a:	d002      	beq.n	8082382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 808237c:	2301      	movs	r3, #1
 808237e:	73fb      	strb	r3, [r7, #15]
 8082380:	e001      	b.n	8082386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8082382:	2300      	movs	r3, #0
 8082384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8082386:	7bfb      	ldrb	r3, [r7, #15]
}
 8082388:	4618      	mov	r0, r3
 808238a:	3714      	adds	r7, #20
 808238c:	46bd      	mov	sp, r7
 808238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082392:	4770      	bx	lr

08082394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8082394:	b480      	push	{r7}
 8082396:	b083      	sub	sp, #12
 8082398:	af00      	add	r7, sp, #0
 808239a:	6078      	str	r0, [r7, #4]
 808239c:	460b      	mov	r3, r1
 808239e:	807b      	strh	r3, [r7, #2]
 80823a0:	4613      	mov	r3, r2
 80823a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80823a4:	787b      	ldrb	r3, [r7, #1]
 80823a6:	2b00      	cmp	r3, #0
 80823a8:	d003      	beq.n	80823b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80823aa:	887a      	ldrh	r2, [r7, #2]
 80823ac:	687b      	ldr	r3, [r7, #4]
 80823ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80823b0:	e002      	b.n	80823b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80823b2:	887a      	ldrh	r2, [r7, #2]
 80823b4:	687b      	ldr	r3, [r7, #4]
 80823b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80823b8:	bf00      	nop
 80823ba:	370c      	adds	r7, #12
 80823bc:	46bd      	mov	sp, r7
 80823be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80823c2:	4770      	bx	lr

080823c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80823c4:	b480      	push	{r7}
 80823c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80823c8:	4b04      	ldr	r3, [pc, #16]	@ (80823dc <HAL_PWREx_GetVoltageRange+0x18>)
 80823ca:	681b      	ldr	r3, [r3, #0]
 80823cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80823d0:	4618      	mov	r0, r3
 80823d2:	46bd      	mov	sp, r7
 80823d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80823d8:	4770      	bx	lr
 80823da:	bf00      	nop
 80823dc:	40007000 	.word	0x40007000

080823e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80823e0:	b480      	push	{r7}
 80823e2:	b085      	sub	sp, #20
 80823e4:	af00      	add	r7, sp, #0
 80823e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80823e8:	687b      	ldr	r3, [r7, #4]
 80823ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80823ee:	d130      	bne.n	8082452 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80823f0:	4b23      	ldr	r3, [pc, #140]	@ (8082480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80823f2:	681b      	ldr	r3, [r3, #0]
 80823f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80823f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80823fc:	d038      	beq.n	8082470 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80823fe:	4b20      	ldr	r3, [pc, #128]	@ (8082480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8082400:	681b      	ldr	r3, [r3, #0]
 8082402:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8082406:	4a1e      	ldr	r2, [pc, #120]	@ (8082480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8082408:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 808240c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 808240e:	4b1d      	ldr	r3, [pc, #116]	@ (8082484 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8082410:	681b      	ldr	r3, [r3, #0]
 8082412:	2232      	movs	r2, #50	@ 0x32
 8082414:	fb02 f303 	mul.w	r3, r2, r3
 8082418:	4a1b      	ldr	r2, [pc, #108]	@ (8082488 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 808241a:	fba2 2303 	umull	r2, r3, r2, r3
 808241e:	0c9b      	lsrs	r3, r3, #18
 8082420:	3301      	adds	r3, #1
 8082422:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8082424:	e002      	b.n	808242c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8082426:	68fb      	ldr	r3, [r7, #12]
 8082428:	3b01      	subs	r3, #1
 808242a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 808242c:	4b14      	ldr	r3, [pc, #80]	@ (8082480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 808242e:	695b      	ldr	r3, [r3, #20]
 8082430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8082434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8082438:	d102      	bne.n	8082440 <HAL_PWREx_ControlVoltageScaling+0x60>
 808243a:	68fb      	ldr	r3, [r7, #12]
 808243c:	2b00      	cmp	r3, #0
 808243e:	d1f2      	bne.n	8082426 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8082440:	4b0f      	ldr	r3, [pc, #60]	@ (8082480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8082442:	695b      	ldr	r3, [r3, #20]
 8082444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8082448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 808244c:	d110      	bne.n	8082470 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 808244e:	2303      	movs	r3, #3
 8082450:	e00f      	b.n	8082472 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8082452:	4b0b      	ldr	r3, [pc, #44]	@ (8082480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8082454:	681b      	ldr	r3, [r3, #0]
 8082456:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 808245a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 808245e:	d007      	beq.n	8082470 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8082460:	4b07      	ldr	r3, [pc, #28]	@ (8082480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8082462:	681b      	ldr	r3, [r3, #0]
 8082464:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8082468:	4a05      	ldr	r2, [pc, #20]	@ (8082480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 808246a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 808246e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8082470:	2300      	movs	r3, #0
}
 8082472:	4618      	mov	r0, r3
 8082474:	3714      	adds	r7, #20
 8082476:	46bd      	mov	sp, r7
 8082478:	f85d 7b04 	ldr.w	r7, [sp], #4
 808247c:	4770      	bx	lr
 808247e:	bf00      	nop
 8082480:	40007000 	.word	0x40007000
 8082484:	20000000 	.word	0x20000000
 8082488:	431bde83 	.word	0x431bde83

0808248c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 808248c:	b480      	push	{r7}
 808248e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8082490:	4b05      	ldr	r3, [pc, #20]	@ (80824a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8082492:	685b      	ldr	r3, [r3, #4]
 8082494:	4a04      	ldr	r2, [pc, #16]	@ (80824a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8082496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 808249a:	6053      	str	r3, [r2, #4]
}
 808249c:	bf00      	nop
 808249e:	46bd      	mov	sp, r7
 80824a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80824a4:	4770      	bx	lr
 80824a6:	bf00      	nop
 80824a8:	40007000 	.word	0x40007000

080824ac <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80824ac:	b580      	push	{r7, lr}
 80824ae:	b082      	sub	sp, #8
 80824b0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80824b2:	4b4a      	ldr	r3, [pc, #296]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80824b4:	681b      	ldr	r3, [r3, #0]
 80824b6:	4a49      	ldr	r2, [pc, #292]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80824b8:	f043 0301 	orr.w	r3, r3, #1
 80824bc:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80824be:	f7ff f833 	bl	8081528 <HAL_GetTick>
 80824c2:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80824c4:	e008      	b.n	80824d8 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80824c6:	f7ff f82f 	bl	8081528 <HAL_GetTick>
 80824ca:	4602      	mov	r2, r0
 80824cc:	687b      	ldr	r3, [r7, #4]
 80824ce:	1ad3      	subs	r3, r2, r3
 80824d0:	2b02      	cmp	r3, #2
 80824d2:	d901      	bls.n	80824d8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80824d4:	2303      	movs	r3, #3
 80824d6:	e07c      	b.n	80825d2 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80824d8:	4b40      	ldr	r3, [pc, #256]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80824da:	681b      	ldr	r3, [r3, #0]
 80824dc:	f003 0302 	and.w	r3, r3, #2
 80824e0:	2b00      	cmp	r3, #0
 80824e2:	d0f0      	beq.n	80824c6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 80824e4:	4b3d      	ldr	r3, [pc, #244]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80824e6:	681b      	ldr	r3, [r3, #0]
 80824e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80824ec:	4a3b      	ldr	r2, [pc, #236]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80824ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80824f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 80824f4:	4b39      	ldr	r3, [pc, #228]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80824f6:	2200      	movs	r2, #0
 80824f8:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 80824fa:	4b39      	ldr	r3, [pc, #228]	@ (80825e0 <HAL_RCC_DeInit+0x134>)
 80824fc:	4a39      	ldr	r2, [pc, #228]	@ (80825e4 <HAL_RCC_DeInit+0x138>)
 80824fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8082500:	4b39      	ldr	r3, [pc, #228]	@ (80825e8 <HAL_RCC_DeInit+0x13c>)
 8082502:	681b      	ldr	r3, [r3, #0]
 8082504:	4618      	mov	r0, r3
 8082506:	f7fe ffbf 	bl	8081488 <HAL_InitTick>
 808250a:	4603      	mov	r3, r0
 808250c:	2b00      	cmp	r3, #0
 808250e:	d001      	beq.n	8082514 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8082510:	2301      	movs	r3, #1
 8082512:	e05e      	b.n	80825d2 <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8082514:	f7ff f808 	bl	8081528 <HAL_GetTick>
 8082518:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 808251a:	e00a      	b.n	8082532 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 808251c:	f7ff f804 	bl	8081528 <HAL_GetTick>
 8082520:	4602      	mov	r2, r0
 8082522:	687b      	ldr	r3, [r7, #4]
 8082524:	1ad3      	subs	r3, r2, r3
 8082526:	f241 3288 	movw	r2, #5000	@ 0x1388
 808252a:	4293      	cmp	r3, r2
 808252c:	d901      	bls.n	8082532 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 808252e:	2303      	movs	r3, #3
 8082530:	e04f      	b.n	80825d2 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8082532:	4b2a      	ldr	r3, [pc, #168]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 8082534:	689b      	ldr	r3, [r3, #8]
 8082536:	f003 030c 	and.w	r3, r3, #12
 808253a:	2b00      	cmp	r3, #0
 808253c:	d1ee      	bne.n	808251c <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 808253e:	4b27      	ldr	r3, [pc, #156]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 8082540:	681a      	ldr	r2, [r3, #0]
 8082542:	4926      	ldr	r1, [pc, #152]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 8082544:	4b29      	ldr	r3, [pc, #164]	@ (80825ec <HAL_RCC_DeInit+0x140>)
 8082546:	4013      	ands	r3, r2
 8082548:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 808254a:	f7fe ffed 	bl	8081528 <HAL_GetTick>
 808254e:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8082550:	e008      	b.n	8082564 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8082552:	f7fe ffe9 	bl	8081528 <HAL_GetTick>
 8082556:	4602      	mov	r2, r0
 8082558:	687b      	ldr	r3, [r7, #4]
 808255a:	1ad3      	subs	r3, r2, r3
 808255c:	2b02      	cmp	r3, #2
 808255e:	d901      	bls.n	8082564 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8082560:	2303      	movs	r3, #3
 8082562:	e036      	b.n	80825d2 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8082564:	4b1d      	ldr	r3, [pc, #116]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 8082566:	681b      	ldr	r3, [r3, #0]
 8082568:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 808256c:	2b00      	cmp	r3, #0
 808256e:	d1f0      	bne.n	8082552 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8082570:	4b1a      	ldr	r3, [pc, #104]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 8082572:	2200      	movs	r2, #0
 8082574:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8082576:	4b19      	ldr	r3, [pc, #100]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 8082578:	68db      	ldr	r3, [r3, #12]
 808257a:	4a18      	ldr	r2, [pc, #96]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 808257c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8082580:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8082582:	4b16      	ldr	r3, [pc, #88]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 8082584:	2200      	movs	r2, #0
 8082586:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8082588:	4b14      	ldr	r3, [pc, #80]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 808258a:	691b      	ldr	r3, [r3, #16]
 808258c:	4a13      	ldr	r2, [pc, #76]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 808258e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8082592:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8082594:	4b11      	ldr	r3, [pc, #68]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 8082596:	2200      	movs	r2, #0
 8082598:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 808259a:	4b10      	ldr	r3, [pc, #64]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 808259c:	695b      	ldr	r3, [r3, #20]
 808259e:	4a0f      	ldr	r2, [pc, #60]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80825a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80825a4:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80825a6:	4b0d      	ldr	r3, [pc, #52]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80825a8:	681b      	ldr	r3, [r3, #0]
 80825aa:	4a0c      	ldr	r2, [pc, #48]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80825ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80825b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80825b2:	4b0a      	ldr	r3, [pc, #40]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80825b4:	2200      	movs	r2, #0
 80825b6:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80825b8:	4b08      	ldr	r3, [pc, #32]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80825ba:	f04f 32ff 	mov.w	r2, #4294967295
 80825be:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80825c0:	4b06      	ldr	r3, [pc, #24]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80825c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80825c6:	4a05      	ldr	r2, [pc, #20]	@ (80825dc <HAL_RCC_DeInit+0x130>)
 80825c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80825cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  return HAL_OK;
 80825d0:	2300      	movs	r3, #0
}
 80825d2:	4618      	mov	r0, r3
 80825d4:	3708      	adds	r7, #8
 80825d6:	46bd      	mov	sp, r7
 80825d8:	bd80      	pop	{r7, pc}
 80825da:	bf00      	nop
 80825dc:	40021000 	.word	0x40021000
 80825e0:	20000000 	.word	0x20000000
 80825e4:	003d0900 	.word	0x003d0900
 80825e8:	20000004 	.word	0x20000004
 80825ec:	eafef4ff 	.word	0xeafef4ff

080825f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80825f0:	b580      	push	{r7, lr}
 80825f2:	b088      	sub	sp, #32
 80825f4:	af00      	add	r7, sp, #0
 80825f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80825f8:	687b      	ldr	r3, [r7, #4]
 80825fa:	2b00      	cmp	r3, #0
 80825fc:	d102      	bne.n	8082604 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80825fe:	2301      	movs	r3, #1
 8082600:	f000 bc08 	b.w	8082e14 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8082604:	4b96      	ldr	r3, [pc, #600]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082606:	689b      	ldr	r3, [r3, #8]
 8082608:	f003 030c 	and.w	r3, r3, #12
 808260c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 808260e:	4b94      	ldr	r3, [pc, #592]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082610:	68db      	ldr	r3, [r3, #12]
 8082612:	f003 0303 	and.w	r3, r3, #3
 8082616:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8082618:	687b      	ldr	r3, [r7, #4]
 808261a:	681b      	ldr	r3, [r3, #0]
 808261c:	f003 0310 	and.w	r3, r3, #16
 8082620:	2b00      	cmp	r3, #0
 8082622:	f000 80e4 	beq.w	80827ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8082626:	69bb      	ldr	r3, [r7, #24]
 8082628:	2b00      	cmp	r3, #0
 808262a:	d007      	beq.n	808263c <HAL_RCC_OscConfig+0x4c>
 808262c:	69bb      	ldr	r3, [r7, #24]
 808262e:	2b0c      	cmp	r3, #12
 8082630:	f040 808b 	bne.w	808274a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8082634:	697b      	ldr	r3, [r7, #20]
 8082636:	2b01      	cmp	r3, #1
 8082638:	f040 8087 	bne.w	808274a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 808263c:	4b88      	ldr	r3, [pc, #544]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 808263e:	681b      	ldr	r3, [r3, #0]
 8082640:	f003 0302 	and.w	r3, r3, #2
 8082644:	2b00      	cmp	r3, #0
 8082646:	d005      	beq.n	8082654 <HAL_RCC_OscConfig+0x64>
 8082648:	687b      	ldr	r3, [r7, #4]
 808264a:	699b      	ldr	r3, [r3, #24]
 808264c:	2b00      	cmp	r3, #0
 808264e:	d101      	bne.n	8082654 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8082650:	2301      	movs	r3, #1
 8082652:	e3df      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8082654:	687b      	ldr	r3, [r7, #4]
 8082656:	6a1a      	ldr	r2, [r3, #32]
 8082658:	4b81      	ldr	r3, [pc, #516]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 808265a:	681b      	ldr	r3, [r3, #0]
 808265c:	f003 0308 	and.w	r3, r3, #8
 8082660:	2b00      	cmp	r3, #0
 8082662:	d004      	beq.n	808266e <HAL_RCC_OscConfig+0x7e>
 8082664:	4b7e      	ldr	r3, [pc, #504]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082666:	681b      	ldr	r3, [r3, #0]
 8082668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 808266c:	e005      	b.n	808267a <HAL_RCC_OscConfig+0x8a>
 808266e:	4b7c      	ldr	r3, [pc, #496]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8082674:	091b      	lsrs	r3, r3, #4
 8082676:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 808267a:	4293      	cmp	r3, r2
 808267c:	d223      	bcs.n	80826c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 808267e:	687b      	ldr	r3, [r7, #4]
 8082680:	6a1b      	ldr	r3, [r3, #32]
 8082682:	4618      	mov	r0, r3
 8082684:	f000 fd92 	bl	80831ac <RCC_SetFlashLatencyFromMSIRange>
 8082688:	4603      	mov	r3, r0
 808268a:	2b00      	cmp	r3, #0
 808268c:	d001      	beq.n	8082692 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 808268e:	2301      	movs	r3, #1
 8082690:	e3c0      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8082692:	4b73      	ldr	r3, [pc, #460]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082694:	681b      	ldr	r3, [r3, #0]
 8082696:	4a72      	ldr	r2, [pc, #456]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082698:	f043 0308 	orr.w	r3, r3, #8
 808269c:	6013      	str	r3, [r2, #0]
 808269e:	4b70      	ldr	r3, [pc, #448]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80826a0:	681b      	ldr	r3, [r3, #0]
 80826a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80826a6:	687b      	ldr	r3, [r7, #4]
 80826a8:	6a1b      	ldr	r3, [r3, #32]
 80826aa:	496d      	ldr	r1, [pc, #436]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80826ac:	4313      	orrs	r3, r2
 80826ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80826b0:	4b6b      	ldr	r3, [pc, #428]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80826b2:	685b      	ldr	r3, [r3, #4]
 80826b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80826b8:	687b      	ldr	r3, [r7, #4]
 80826ba:	69db      	ldr	r3, [r3, #28]
 80826bc:	021b      	lsls	r3, r3, #8
 80826be:	4968      	ldr	r1, [pc, #416]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80826c0:	4313      	orrs	r3, r2
 80826c2:	604b      	str	r3, [r1, #4]
 80826c4:	e025      	b.n	8082712 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80826c6:	4b66      	ldr	r3, [pc, #408]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80826c8:	681b      	ldr	r3, [r3, #0]
 80826ca:	4a65      	ldr	r2, [pc, #404]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80826cc:	f043 0308 	orr.w	r3, r3, #8
 80826d0:	6013      	str	r3, [r2, #0]
 80826d2:	4b63      	ldr	r3, [pc, #396]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80826d4:	681b      	ldr	r3, [r3, #0]
 80826d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80826da:	687b      	ldr	r3, [r7, #4]
 80826dc:	6a1b      	ldr	r3, [r3, #32]
 80826de:	4960      	ldr	r1, [pc, #384]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80826e0:	4313      	orrs	r3, r2
 80826e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80826e4:	4b5e      	ldr	r3, [pc, #376]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80826e6:	685b      	ldr	r3, [r3, #4]
 80826e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80826ec:	687b      	ldr	r3, [r7, #4]
 80826ee:	69db      	ldr	r3, [r3, #28]
 80826f0:	021b      	lsls	r3, r3, #8
 80826f2:	495b      	ldr	r1, [pc, #364]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80826f4:	4313      	orrs	r3, r2
 80826f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80826f8:	69bb      	ldr	r3, [r7, #24]
 80826fa:	2b00      	cmp	r3, #0
 80826fc:	d109      	bne.n	8082712 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80826fe:	687b      	ldr	r3, [r7, #4]
 8082700:	6a1b      	ldr	r3, [r3, #32]
 8082702:	4618      	mov	r0, r3
 8082704:	f000 fd52 	bl	80831ac <RCC_SetFlashLatencyFromMSIRange>
 8082708:	4603      	mov	r3, r0
 808270a:	2b00      	cmp	r3, #0
 808270c:	d001      	beq.n	8082712 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 808270e:	2301      	movs	r3, #1
 8082710:	e380      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8082712:	f000 fc87 	bl	8083024 <HAL_RCC_GetSysClockFreq>
 8082716:	4602      	mov	r2, r0
 8082718:	4b51      	ldr	r3, [pc, #324]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 808271a:	689b      	ldr	r3, [r3, #8]
 808271c:	091b      	lsrs	r3, r3, #4
 808271e:	f003 030f 	and.w	r3, r3, #15
 8082722:	4950      	ldr	r1, [pc, #320]	@ (8082864 <HAL_RCC_OscConfig+0x274>)
 8082724:	5ccb      	ldrb	r3, [r1, r3]
 8082726:	f003 031f 	and.w	r3, r3, #31
 808272a:	fa22 f303 	lsr.w	r3, r2, r3
 808272e:	4a4e      	ldr	r2, [pc, #312]	@ (8082868 <HAL_RCC_OscConfig+0x278>)
 8082730:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8082732:	4b4e      	ldr	r3, [pc, #312]	@ (808286c <HAL_RCC_OscConfig+0x27c>)
 8082734:	681b      	ldr	r3, [r3, #0]
 8082736:	4618      	mov	r0, r3
 8082738:	f7fe fea6 	bl	8081488 <HAL_InitTick>
 808273c:	4603      	mov	r3, r0
 808273e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8082740:	7bfb      	ldrb	r3, [r7, #15]
 8082742:	2b00      	cmp	r3, #0
 8082744:	d052      	beq.n	80827ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8082746:	7bfb      	ldrb	r3, [r7, #15]
 8082748:	e364      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 808274a:	687b      	ldr	r3, [r7, #4]
 808274c:	699b      	ldr	r3, [r3, #24]
 808274e:	2b00      	cmp	r3, #0
 8082750:	d032      	beq.n	80827b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8082752:	4b43      	ldr	r3, [pc, #268]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082754:	681b      	ldr	r3, [r3, #0]
 8082756:	4a42      	ldr	r2, [pc, #264]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082758:	f043 0301 	orr.w	r3, r3, #1
 808275c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 808275e:	f7fe fee3 	bl	8081528 <HAL_GetTick>
 8082762:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8082764:	e008      	b.n	8082778 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8082766:	f7fe fedf 	bl	8081528 <HAL_GetTick>
 808276a:	4602      	mov	r2, r0
 808276c:	693b      	ldr	r3, [r7, #16]
 808276e:	1ad3      	subs	r3, r2, r3
 8082770:	2b02      	cmp	r3, #2
 8082772:	d901      	bls.n	8082778 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8082774:	2303      	movs	r3, #3
 8082776:	e34d      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8082778:	4b39      	ldr	r3, [pc, #228]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 808277a:	681b      	ldr	r3, [r3, #0]
 808277c:	f003 0302 	and.w	r3, r3, #2
 8082780:	2b00      	cmp	r3, #0
 8082782:	d0f0      	beq.n	8082766 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8082784:	4b36      	ldr	r3, [pc, #216]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082786:	681b      	ldr	r3, [r3, #0]
 8082788:	4a35      	ldr	r2, [pc, #212]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 808278a:	f043 0308 	orr.w	r3, r3, #8
 808278e:	6013      	str	r3, [r2, #0]
 8082790:	4b33      	ldr	r3, [pc, #204]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082792:	681b      	ldr	r3, [r3, #0]
 8082794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8082798:	687b      	ldr	r3, [r7, #4]
 808279a:	6a1b      	ldr	r3, [r3, #32]
 808279c:	4930      	ldr	r1, [pc, #192]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 808279e:	4313      	orrs	r3, r2
 80827a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80827a2:	4b2f      	ldr	r3, [pc, #188]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80827a4:	685b      	ldr	r3, [r3, #4]
 80827a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80827aa:	687b      	ldr	r3, [r7, #4]
 80827ac:	69db      	ldr	r3, [r3, #28]
 80827ae:	021b      	lsls	r3, r3, #8
 80827b0:	492b      	ldr	r1, [pc, #172]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80827b2:	4313      	orrs	r3, r2
 80827b4:	604b      	str	r3, [r1, #4]
 80827b6:	e01a      	b.n	80827ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80827b8:	4b29      	ldr	r3, [pc, #164]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80827ba:	681b      	ldr	r3, [r3, #0]
 80827bc:	4a28      	ldr	r2, [pc, #160]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80827be:	f023 0301 	bic.w	r3, r3, #1
 80827c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80827c4:	f7fe feb0 	bl	8081528 <HAL_GetTick>
 80827c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80827ca:	e008      	b.n	80827de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80827cc:	f7fe feac 	bl	8081528 <HAL_GetTick>
 80827d0:	4602      	mov	r2, r0
 80827d2:	693b      	ldr	r3, [r7, #16]
 80827d4:	1ad3      	subs	r3, r2, r3
 80827d6:	2b02      	cmp	r3, #2
 80827d8:	d901      	bls.n	80827de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80827da:	2303      	movs	r3, #3
 80827dc:	e31a      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80827de:	4b20      	ldr	r3, [pc, #128]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 80827e0:	681b      	ldr	r3, [r3, #0]
 80827e2:	f003 0302 	and.w	r3, r3, #2
 80827e6:	2b00      	cmp	r3, #0
 80827e8:	d1f0      	bne.n	80827cc <HAL_RCC_OscConfig+0x1dc>
 80827ea:	e000      	b.n	80827ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80827ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80827ee:	687b      	ldr	r3, [r7, #4]
 80827f0:	681b      	ldr	r3, [r3, #0]
 80827f2:	f003 0301 	and.w	r3, r3, #1
 80827f6:	2b00      	cmp	r3, #0
 80827f8:	d073      	beq.n	80828e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80827fa:	69bb      	ldr	r3, [r7, #24]
 80827fc:	2b08      	cmp	r3, #8
 80827fe:	d005      	beq.n	808280c <HAL_RCC_OscConfig+0x21c>
 8082800:	69bb      	ldr	r3, [r7, #24]
 8082802:	2b0c      	cmp	r3, #12
 8082804:	d10e      	bne.n	8082824 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8082806:	697b      	ldr	r3, [r7, #20]
 8082808:	2b03      	cmp	r3, #3
 808280a:	d10b      	bne.n	8082824 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 808280c:	4b14      	ldr	r3, [pc, #80]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 808280e:	681b      	ldr	r3, [r3, #0]
 8082810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8082814:	2b00      	cmp	r3, #0
 8082816:	d063      	beq.n	80828e0 <HAL_RCC_OscConfig+0x2f0>
 8082818:	687b      	ldr	r3, [r7, #4]
 808281a:	685b      	ldr	r3, [r3, #4]
 808281c:	2b00      	cmp	r3, #0
 808281e:	d15f      	bne.n	80828e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8082820:	2301      	movs	r3, #1
 8082822:	e2f7      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8082824:	687b      	ldr	r3, [r7, #4]
 8082826:	685b      	ldr	r3, [r3, #4]
 8082828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 808282c:	d106      	bne.n	808283c <HAL_RCC_OscConfig+0x24c>
 808282e:	4b0c      	ldr	r3, [pc, #48]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082830:	681b      	ldr	r3, [r3, #0]
 8082832:	4a0b      	ldr	r2, [pc, #44]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8082838:	6013      	str	r3, [r2, #0]
 808283a:	e025      	b.n	8082888 <HAL_RCC_OscConfig+0x298>
 808283c:	687b      	ldr	r3, [r7, #4]
 808283e:	685b      	ldr	r3, [r3, #4]
 8082840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8082844:	d114      	bne.n	8082870 <HAL_RCC_OscConfig+0x280>
 8082846:	4b06      	ldr	r3, [pc, #24]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082848:	681b      	ldr	r3, [r3, #0]
 808284a:	4a05      	ldr	r2, [pc, #20]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 808284c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8082850:	6013      	str	r3, [r2, #0]
 8082852:	4b03      	ldr	r3, [pc, #12]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082854:	681b      	ldr	r3, [r3, #0]
 8082856:	4a02      	ldr	r2, [pc, #8]	@ (8082860 <HAL_RCC_OscConfig+0x270>)
 8082858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 808285c:	6013      	str	r3, [r2, #0]
 808285e:	e013      	b.n	8082888 <HAL_RCC_OscConfig+0x298>
 8082860:	40021000 	.word	0x40021000
 8082864:	08084b20 	.word	0x08084b20
 8082868:	20000000 	.word	0x20000000
 808286c:	20000004 	.word	0x20000004
 8082870:	4ba0      	ldr	r3, [pc, #640]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082872:	681b      	ldr	r3, [r3, #0]
 8082874:	4a9f      	ldr	r2, [pc, #636]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 808287a:	6013      	str	r3, [r2, #0]
 808287c:	4b9d      	ldr	r3, [pc, #628]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 808287e:	681b      	ldr	r3, [r3, #0]
 8082880:	4a9c      	ldr	r2, [pc, #624]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8082886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8082888:	687b      	ldr	r3, [r7, #4]
 808288a:	685b      	ldr	r3, [r3, #4]
 808288c:	2b00      	cmp	r3, #0
 808288e:	d013      	beq.n	80828b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8082890:	f7fe fe4a 	bl	8081528 <HAL_GetTick>
 8082894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8082896:	e008      	b.n	80828aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8082898:	f7fe fe46 	bl	8081528 <HAL_GetTick>
 808289c:	4602      	mov	r2, r0
 808289e:	693b      	ldr	r3, [r7, #16]
 80828a0:	1ad3      	subs	r3, r2, r3
 80828a2:	2b64      	cmp	r3, #100	@ 0x64
 80828a4:	d901      	bls.n	80828aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80828a6:	2303      	movs	r3, #3
 80828a8:	e2b4      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80828aa:	4b92      	ldr	r3, [pc, #584]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 80828ac:	681b      	ldr	r3, [r3, #0]
 80828ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80828b2:	2b00      	cmp	r3, #0
 80828b4:	d0f0      	beq.n	8082898 <HAL_RCC_OscConfig+0x2a8>
 80828b6:	e014      	b.n	80828e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80828b8:	f7fe fe36 	bl	8081528 <HAL_GetTick>
 80828bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80828be:	e008      	b.n	80828d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80828c0:	f7fe fe32 	bl	8081528 <HAL_GetTick>
 80828c4:	4602      	mov	r2, r0
 80828c6:	693b      	ldr	r3, [r7, #16]
 80828c8:	1ad3      	subs	r3, r2, r3
 80828ca:	2b64      	cmp	r3, #100	@ 0x64
 80828cc:	d901      	bls.n	80828d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80828ce:	2303      	movs	r3, #3
 80828d0:	e2a0      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80828d2:	4b88      	ldr	r3, [pc, #544]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 80828d4:	681b      	ldr	r3, [r3, #0]
 80828d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80828da:	2b00      	cmp	r3, #0
 80828dc:	d1f0      	bne.n	80828c0 <HAL_RCC_OscConfig+0x2d0>
 80828de:	e000      	b.n	80828e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80828e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80828e2:	687b      	ldr	r3, [r7, #4]
 80828e4:	681b      	ldr	r3, [r3, #0]
 80828e6:	f003 0302 	and.w	r3, r3, #2
 80828ea:	2b00      	cmp	r3, #0
 80828ec:	d060      	beq.n	80829b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80828ee:	69bb      	ldr	r3, [r7, #24]
 80828f0:	2b04      	cmp	r3, #4
 80828f2:	d005      	beq.n	8082900 <HAL_RCC_OscConfig+0x310>
 80828f4:	69bb      	ldr	r3, [r7, #24]
 80828f6:	2b0c      	cmp	r3, #12
 80828f8:	d119      	bne.n	808292e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80828fa:	697b      	ldr	r3, [r7, #20]
 80828fc:	2b02      	cmp	r3, #2
 80828fe:	d116      	bne.n	808292e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8082900:	4b7c      	ldr	r3, [pc, #496]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082902:	681b      	ldr	r3, [r3, #0]
 8082904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8082908:	2b00      	cmp	r3, #0
 808290a:	d005      	beq.n	8082918 <HAL_RCC_OscConfig+0x328>
 808290c:	687b      	ldr	r3, [r7, #4]
 808290e:	68db      	ldr	r3, [r3, #12]
 8082910:	2b00      	cmp	r3, #0
 8082912:	d101      	bne.n	8082918 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8082914:	2301      	movs	r3, #1
 8082916:	e27d      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8082918:	4b76      	ldr	r3, [pc, #472]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 808291a:	685b      	ldr	r3, [r3, #4]
 808291c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8082920:	687b      	ldr	r3, [r7, #4]
 8082922:	691b      	ldr	r3, [r3, #16]
 8082924:	061b      	lsls	r3, r3, #24
 8082926:	4973      	ldr	r1, [pc, #460]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082928:	4313      	orrs	r3, r2
 808292a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 808292c:	e040      	b.n	80829b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 808292e:	687b      	ldr	r3, [r7, #4]
 8082930:	68db      	ldr	r3, [r3, #12]
 8082932:	2b00      	cmp	r3, #0
 8082934:	d023      	beq.n	808297e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8082936:	4b6f      	ldr	r3, [pc, #444]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082938:	681b      	ldr	r3, [r3, #0]
 808293a:	4a6e      	ldr	r2, [pc, #440]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 808293c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8082940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8082942:	f7fe fdf1 	bl	8081528 <HAL_GetTick>
 8082946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8082948:	e008      	b.n	808295c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 808294a:	f7fe fded 	bl	8081528 <HAL_GetTick>
 808294e:	4602      	mov	r2, r0
 8082950:	693b      	ldr	r3, [r7, #16]
 8082952:	1ad3      	subs	r3, r2, r3
 8082954:	2b02      	cmp	r3, #2
 8082956:	d901      	bls.n	808295c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8082958:	2303      	movs	r3, #3
 808295a:	e25b      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 808295c:	4b65      	ldr	r3, [pc, #404]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 808295e:	681b      	ldr	r3, [r3, #0]
 8082960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8082964:	2b00      	cmp	r3, #0
 8082966:	d0f0      	beq.n	808294a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8082968:	4b62      	ldr	r3, [pc, #392]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 808296a:	685b      	ldr	r3, [r3, #4]
 808296c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8082970:	687b      	ldr	r3, [r7, #4]
 8082972:	691b      	ldr	r3, [r3, #16]
 8082974:	061b      	lsls	r3, r3, #24
 8082976:	495f      	ldr	r1, [pc, #380]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082978:	4313      	orrs	r3, r2
 808297a:	604b      	str	r3, [r1, #4]
 808297c:	e018      	b.n	80829b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 808297e:	4b5d      	ldr	r3, [pc, #372]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082980:	681b      	ldr	r3, [r3, #0]
 8082982:	4a5c      	ldr	r2, [pc, #368]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8082988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 808298a:	f7fe fdcd 	bl	8081528 <HAL_GetTick>
 808298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8082990:	e008      	b.n	80829a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8082992:	f7fe fdc9 	bl	8081528 <HAL_GetTick>
 8082996:	4602      	mov	r2, r0
 8082998:	693b      	ldr	r3, [r7, #16]
 808299a:	1ad3      	subs	r3, r2, r3
 808299c:	2b02      	cmp	r3, #2
 808299e:	d901      	bls.n	80829a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80829a0:	2303      	movs	r3, #3
 80829a2:	e237      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80829a4:	4b53      	ldr	r3, [pc, #332]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 80829a6:	681b      	ldr	r3, [r3, #0]
 80829a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80829ac:	2b00      	cmp	r3, #0
 80829ae:	d1f0      	bne.n	8082992 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80829b0:	687b      	ldr	r3, [r7, #4]
 80829b2:	681b      	ldr	r3, [r3, #0]
 80829b4:	f003 0308 	and.w	r3, r3, #8
 80829b8:	2b00      	cmp	r3, #0
 80829ba:	d03c      	beq.n	8082a36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80829bc:	687b      	ldr	r3, [r7, #4]
 80829be:	695b      	ldr	r3, [r3, #20]
 80829c0:	2b00      	cmp	r3, #0
 80829c2:	d01c      	beq.n	80829fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80829c4:	4b4b      	ldr	r3, [pc, #300]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 80829c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80829ca:	4a4a      	ldr	r2, [pc, #296]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 80829cc:	f043 0301 	orr.w	r3, r3, #1
 80829d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80829d4:	f7fe fda8 	bl	8081528 <HAL_GetTick>
 80829d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80829da:	e008      	b.n	80829ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80829dc:	f7fe fda4 	bl	8081528 <HAL_GetTick>
 80829e0:	4602      	mov	r2, r0
 80829e2:	693b      	ldr	r3, [r7, #16]
 80829e4:	1ad3      	subs	r3, r2, r3
 80829e6:	2b02      	cmp	r3, #2
 80829e8:	d901      	bls.n	80829ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80829ea:	2303      	movs	r3, #3
 80829ec:	e212      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80829ee:	4b41      	ldr	r3, [pc, #260]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 80829f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80829f4:	f003 0302 	and.w	r3, r3, #2
 80829f8:	2b00      	cmp	r3, #0
 80829fa:	d0ef      	beq.n	80829dc <HAL_RCC_OscConfig+0x3ec>
 80829fc:	e01b      	b.n	8082a36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80829fe:	4b3d      	ldr	r3, [pc, #244]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8082a04:	4a3b      	ldr	r2, [pc, #236]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082a06:	f023 0301 	bic.w	r3, r3, #1
 8082a0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8082a0e:	f7fe fd8b 	bl	8081528 <HAL_GetTick>
 8082a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8082a14:	e008      	b.n	8082a28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8082a16:	f7fe fd87 	bl	8081528 <HAL_GetTick>
 8082a1a:	4602      	mov	r2, r0
 8082a1c:	693b      	ldr	r3, [r7, #16]
 8082a1e:	1ad3      	subs	r3, r2, r3
 8082a20:	2b02      	cmp	r3, #2
 8082a22:	d901      	bls.n	8082a28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8082a24:	2303      	movs	r3, #3
 8082a26:	e1f5      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8082a28:	4b32      	ldr	r3, [pc, #200]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8082a2e:	f003 0302 	and.w	r3, r3, #2
 8082a32:	2b00      	cmp	r3, #0
 8082a34:	d1ef      	bne.n	8082a16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8082a36:	687b      	ldr	r3, [r7, #4]
 8082a38:	681b      	ldr	r3, [r3, #0]
 8082a3a:	f003 0304 	and.w	r3, r3, #4
 8082a3e:	2b00      	cmp	r3, #0
 8082a40:	f000 80a6 	beq.w	8082b90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8082a44:	2300      	movs	r3, #0
 8082a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8082a48:	4b2a      	ldr	r3, [pc, #168]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8082a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8082a50:	2b00      	cmp	r3, #0
 8082a52:	d10d      	bne.n	8082a70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8082a54:	4b27      	ldr	r3, [pc, #156]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8082a58:	4a26      	ldr	r2, [pc, #152]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8082a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8082a60:	4b24      	ldr	r3, [pc, #144]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8082a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8082a68:	60bb      	str	r3, [r7, #8]
 8082a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8082a6c:	2301      	movs	r3, #1
 8082a6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8082a70:	4b21      	ldr	r3, [pc, #132]	@ (8082af8 <HAL_RCC_OscConfig+0x508>)
 8082a72:	681b      	ldr	r3, [r3, #0]
 8082a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8082a78:	2b00      	cmp	r3, #0
 8082a7a:	d118      	bne.n	8082aae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8082a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8082af8 <HAL_RCC_OscConfig+0x508>)
 8082a7e:	681b      	ldr	r3, [r3, #0]
 8082a80:	4a1d      	ldr	r2, [pc, #116]	@ (8082af8 <HAL_RCC_OscConfig+0x508>)
 8082a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8082a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8082a88:	f7fe fd4e 	bl	8081528 <HAL_GetTick>
 8082a8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8082a8e:	e008      	b.n	8082aa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8082a90:	f7fe fd4a 	bl	8081528 <HAL_GetTick>
 8082a94:	4602      	mov	r2, r0
 8082a96:	693b      	ldr	r3, [r7, #16]
 8082a98:	1ad3      	subs	r3, r2, r3
 8082a9a:	2b02      	cmp	r3, #2
 8082a9c:	d901      	bls.n	8082aa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8082a9e:	2303      	movs	r3, #3
 8082aa0:	e1b8      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8082aa2:	4b15      	ldr	r3, [pc, #84]	@ (8082af8 <HAL_RCC_OscConfig+0x508>)
 8082aa4:	681b      	ldr	r3, [r3, #0]
 8082aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8082aaa:	2b00      	cmp	r3, #0
 8082aac:	d0f0      	beq.n	8082a90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8082aae:	687b      	ldr	r3, [r7, #4]
 8082ab0:	689b      	ldr	r3, [r3, #8]
 8082ab2:	2b01      	cmp	r3, #1
 8082ab4:	d108      	bne.n	8082ac8 <HAL_RCC_OscConfig+0x4d8>
 8082ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082abc:	4a0d      	ldr	r2, [pc, #52]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082abe:	f043 0301 	orr.w	r3, r3, #1
 8082ac2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8082ac6:	e029      	b.n	8082b1c <HAL_RCC_OscConfig+0x52c>
 8082ac8:	687b      	ldr	r3, [r7, #4]
 8082aca:	689b      	ldr	r3, [r3, #8]
 8082acc:	2b05      	cmp	r3, #5
 8082ace:	d115      	bne.n	8082afc <HAL_RCC_OscConfig+0x50c>
 8082ad0:	4b08      	ldr	r3, [pc, #32]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082ad6:	4a07      	ldr	r2, [pc, #28]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082ad8:	f043 0304 	orr.w	r3, r3, #4
 8082adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8082ae0:	4b04      	ldr	r3, [pc, #16]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082ae6:	4a03      	ldr	r2, [pc, #12]	@ (8082af4 <HAL_RCC_OscConfig+0x504>)
 8082ae8:	f043 0301 	orr.w	r3, r3, #1
 8082aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8082af0:	e014      	b.n	8082b1c <HAL_RCC_OscConfig+0x52c>
 8082af2:	bf00      	nop
 8082af4:	40021000 	.word	0x40021000
 8082af8:	40007000 	.word	0x40007000
 8082afc:	4b9d      	ldr	r3, [pc, #628]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082b02:	4a9c      	ldr	r2, [pc, #624]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082b04:	f023 0301 	bic.w	r3, r3, #1
 8082b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8082b0c:	4b99      	ldr	r3, [pc, #612]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082b12:	4a98      	ldr	r2, [pc, #608]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082b14:	f023 0304 	bic.w	r3, r3, #4
 8082b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8082b1c:	687b      	ldr	r3, [r7, #4]
 8082b1e:	689b      	ldr	r3, [r3, #8]
 8082b20:	2b00      	cmp	r3, #0
 8082b22:	d016      	beq.n	8082b52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8082b24:	f7fe fd00 	bl	8081528 <HAL_GetTick>
 8082b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8082b2a:	e00a      	b.n	8082b42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8082b2c:	f7fe fcfc 	bl	8081528 <HAL_GetTick>
 8082b30:	4602      	mov	r2, r0
 8082b32:	693b      	ldr	r3, [r7, #16]
 8082b34:	1ad3      	subs	r3, r2, r3
 8082b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8082b3a:	4293      	cmp	r3, r2
 8082b3c:	d901      	bls.n	8082b42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8082b3e:	2303      	movs	r3, #3
 8082b40:	e168      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8082b42:	4b8c      	ldr	r3, [pc, #560]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082b48:	f003 0302 	and.w	r3, r3, #2
 8082b4c:	2b00      	cmp	r3, #0
 8082b4e:	d0ed      	beq.n	8082b2c <HAL_RCC_OscConfig+0x53c>
 8082b50:	e015      	b.n	8082b7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8082b52:	f7fe fce9 	bl	8081528 <HAL_GetTick>
 8082b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8082b58:	e00a      	b.n	8082b70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8082b5a:	f7fe fce5 	bl	8081528 <HAL_GetTick>
 8082b5e:	4602      	mov	r2, r0
 8082b60:	693b      	ldr	r3, [r7, #16]
 8082b62:	1ad3      	subs	r3, r2, r3
 8082b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8082b68:	4293      	cmp	r3, r2
 8082b6a:	d901      	bls.n	8082b70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8082b6c:	2303      	movs	r3, #3
 8082b6e:	e151      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8082b70:	4b80      	ldr	r3, [pc, #512]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082b76:	f003 0302 	and.w	r3, r3, #2
 8082b7a:	2b00      	cmp	r3, #0
 8082b7c:	d1ed      	bne.n	8082b5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8082b7e:	7ffb      	ldrb	r3, [r7, #31]
 8082b80:	2b01      	cmp	r3, #1
 8082b82:	d105      	bne.n	8082b90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8082b84:	4b7b      	ldr	r3, [pc, #492]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8082b88:	4a7a      	ldr	r2, [pc, #488]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8082b8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8082b90:	687b      	ldr	r3, [r7, #4]
 8082b92:	681b      	ldr	r3, [r3, #0]
 8082b94:	f003 0320 	and.w	r3, r3, #32
 8082b98:	2b00      	cmp	r3, #0
 8082b9a:	d03c      	beq.n	8082c16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8082b9c:	687b      	ldr	r3, [r7, #4]
 8082b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8082ba0:	2b00      	cmp	r3, #0
 8082ba2:	d01c      	beq.n	8082bde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8082ba4:	4b73      	ldr	r3, [pc, #460]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8082baa:	4a72      	ldr	r2, [pc, #456]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082bac:	f043 0301 	orr.w	r3, r3, #1
 8082bb0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8082bb4:	f7fe fcb8 	bl	8081528 <HAL_GetTick>
 8082bb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8082bba:	e008      	b.n	8082bce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8082bbc:	f7fe fcb4 	bl	8081528 <HAL_GetTick>
 8082bc0:	4602      	mov	r2, r0
 8082bc2:	693b      	ldr	r3, [r7, #16]
 8082bc4:	1ad3      	subs	r3, r2, r3
 8082bc6:	2b02      	cmp	r3, #2
 8082bc8:	d901      	bls.n	8082bce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8082bca:	2303      	movs	r3, #3
 8082bcc:	e122      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8082bce:	4b69      	ldr	r3, [pc, #420]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8082bd4:	f003 0302 	and.w	r3, r3, #2
 8082bd8:	2b00      	cmp	r3, #0
 8082bda:	d0ef      	beq.n	8082bbc <HAL_RCC_OscConfig+0x5cc>
 8082bdc:	e01b      	b.n	8082c16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8082bde:	4b65      	ldr	r3, [pc, #404]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8082be4:	4a63      	ldr	r2, [pc, #396]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082be6:	f023 0301 	bic.w	r3, r3, #1
 8082bea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8082bee:	f7fe fc9b 	bl	8081528 <HAL_GetTick>
 8082bf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8082bf4:	e008      	b.n	8082c08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8082bf6:	f7fe fc97 	bl	8081528 <HAL_GetTick>
 8082bfa:	4602      	mov	r2, r0
 8082bfc:	693b      	ldr	r3, [r7, #16]
 8082bfe:	1ad3      	subs	r3, r2, r3
 8082c00:	2b02      	cmp	r3, #2
 8082c02:	d901      	bls.n	8082c08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8082c04:	2303      	movs	r3, #3
 8082c06:	e105      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8082c08:	4b5a      	ldr	r3, [pc, #360]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8082c0e:	f003 0302 	and.w	r3, r3, #2
 8082c12:	2b00      	cmp	r3, #0
 8082c14:	d1ef      	bne.n	8082bf6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8082c16:	687b      	ldr	r3, [r7, #4]
 8082c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8082c1a:	2b00      	cmp	r3, #0
 8082c1c:	f000 80f9 	beq.w	8082e12 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8082c20:	687b      	ldr	r3, [r7, #4]
 8082c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8082c24:	2b02      	cmp	r3, #2
 8082c26:	f040 80cf 	bne.w	8082dc8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8082c2a:	4b52      	ldr	r3, [pc, #328]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082c2c:	68db      	ldr	r3, [r3, #12]
 8082c2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8082c30:	697b      	ldr	r3, [r7, #20]
 8082c32:	f003 0203 	and.w	r2, r3, #3
 8082c36:	687b      	ldr	r3, [r7, #4]
 8082c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8082c3a:	429a      	cmp	r2, r3
 8082c3c:	d12c      	bne.n	8082c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8082c3e:	697b      	ldr	r3, [r7, #20]
 8082c40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8082c44:	687b      	ldr	r3, [r7, #4]
 8082c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8082c48:	3b01      	subs	r3, #1
 8082c4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8082c4c:	429a      	cmp	r2, r3
 8082c4e:	d123      	bne.n	8082c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8082c50:	697b      	ldr	r3, [r7, #20]
 8082c52:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8082c56:	687b      	ldr	r3, [r7, #4]
 8082c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8082c5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8082c5c:	429a      	cmp	r2, r3
 8082c5e:	d11b      	bne.n	8082c98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8082c60:	697b      	ldr	r3, [r7, #20]
 8082c62:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8082c66:	687b      	ldr	r3, [r7, #4]
 8082c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8082c6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8082c6c:	429a      	cmp	r2, r3
 8082c6e:	d113      	bne.n	8082c98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8082c70:	697b      	ldr	r3, [r7, #20]
 8082c72:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8082c76:	687b      	ldr	r3, [r7, #4]
 8082c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8082c7a:	085b      	lsrs	r3, r3, #1
 8082c7c:	3b01      	subs	r3, #1
 8082c7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8082c80:	429a      	cmp	r2, r3
 8082c82:	d109      	bne.n	8082c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8082c84:	697b      	ldr	r3, [r7, #20]
 8082c86:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8082c8a:	687b      	ldr	r3, [r7, #4]
 8082c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8082c8e:	085b      	lsrs	r3, r3, #1
 8082c90:	3b01      	subs	r3, #1
 8082c92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8082c94:	429a      	cmp	r2, r3
 8082c96:	d071      	beq.n	8082d7c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8082c98:	69bb      	ldr	r3, [r7, #24]
 8082c9a:	2b0c      	cmp	r3, #12
 8082c9c:	d068      	beq.n	8082d70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8082c9e:	4b35      	ldr	r3, [pc, #212]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082ca0:	681b      	ldr	r3, [r3, #0]
 8082ca2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8082ca6:	2b00      	cmp	r3, #0
 8082ca8:	d105      	bne.n	8082cb6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8082caa:	4b32      	ldr	r3, [pc, #200]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082cac:	681b      	ldr	r3, [r3, #0]
 8082cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8082cb2:	2b00      	cmp	r3, #0
 8082cb4:	d001      	beq.n	8082cba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8082cb6:	2301      	movs	r3, #1
 8082cb8:	e0ac      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8082cba:	4b2e      	ldr	r3, [pc, #184]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082cbc:	681b      	ldr	r3, [r3, #0]
 8082cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082cc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8082cc4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8082cc6:	f7fe fc2f 	bl	8081528 <HAL_GetTick>
 8082cca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8082ccc:	e008      	b.n	8082ce0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8082cce:	f7fe fc2b 	bl	8081528 <HAL_GetTick>
 8082cd2:	4602      	mov	r2, r0
 8082cd4:	693b      	ldr	r3, [r7, #16]
 8082cd6:	1ad3      	subs	r3, r2, r3
 8082cd8:	2b02      	cmp	r3, #2
 8082cda:	d901      	bls.n	8082ce0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8082cdc:	2303      	movs	r3, #3
 8082cde:	e099      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8082ce0:	4b24      	ldr	r3, [pc, #144]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082ce2:	681b      	ldr	r3, [r3, #0]
 8082ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8082ce8:	2b00      	cmp	r3, #0
 8082cea:	d1f0      	bne.n	8082cce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8082cec:	4b21      	ldr	r3, [pc, #132]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082cee:	68da      	ldr	r2, [r3, #12]
 8082cf0:	4b21      	ldr	r3, [pc, #132]	@ (8082d78 <HAL_RCC_OscConfig+0x788>)
 8082cf2:	4013      	ands	r3, r2
 8082cf4:	687a      	ldr	r2, [r7, #4]
 8082cf6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8082cf8:	687a      	ldr	r2, [r7, #4]
 8082cfa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8082cfc:	3a01      	subs	r2, #1
 8082cfe:	0112      	lsls	r2, r2, #4
 8082d00:	4311      	orrs	r1, r2
 8082d02:	687a      	ldr	r2, [r7, #4]
 8082d04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8082d06:	0212      	lsls	r2, r2, #8
 8082d08:	4311      	orrs	r1, r2
 8082d0a:	687a      	ldr	r2, [r7, #4]
 8082d0c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8082d0e:	0852      	lsrs	r2, r2, #1
 8082d10:	3a01      	subs	r2, #1
 8082d12:	0552      	lsls	r2, r2, #21
 8082d14:	4311      	orrs	r1, r2
 8082d16:	687a      	ldr	r2, [r7, #4]
 8082d18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8082d1a:	0852      	lsrs	r2, r2, #1
 8082d1c:	3a01      	subs	r2, #1
 8082d1e:	0652      	lsls	r2, r2, #25
 8082d20:	4311      	orrs	r1, r2
 8082d22:	687a      	ldr	r2, [r7, #4]
 8082d24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8082d26:	06d2      	lsls	r2, r2, #27
 8082d28:	430a      	orrs	r2, r1
 8082d2a:	4912      	ldr	r1, [pc, #72]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082d2c:	4313      	orrs	r3, r2
 8082d2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8082d30:	4b10      	ldr	r3, [pc, #64]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082d32:	681b      	ldr	r3, [r3, #0]
 8082d34:	4a0f      	ldr	r2, [pc, #60]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8082d3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8082d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082d3e:	68db      	ldr	r3, [r3, #12]
 8082d40:	4a0c      	ldr	r2, [pc, #48]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8082d46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8082d48:	f7fe fbee 	bl	8081528 <HAL_GetTick>
 8082d4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8082d4e:	e008      	b.n	8082d62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8082d50:	f7fe fbea 	bl	8081528 <HAL_GetTick>
 8082d54:	4602      	mov	r2, r0
 8082d56:	693b      	ldr	r3, [r7, #16]
 8082d58:	1ad3      	subs	r3, r2, r3
 8082d5a:	2b02      	cmp	r3, #2
 8082d5c:	d901      	bls.n	8082d62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8082d5e:	2303      	movs	r3, #3
 8082d60:	e058      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8082d62:	4b04      	ldr	r3, [pc, #16]	@ (8082d74 <HAL_RCC_OscConfig+0x784>)
 8082d64:	681b      	ldr	r3, [r3, #0]
 8082d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8082d6a:	2b00      	cmp	r3, #0
 8082d6c:	d0f0      	beq.n	8082d50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8082d6e:	e050      	b.n	8082e12 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8082d70:	2301      	movs	r3, #1
 8082d72:	e04f      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
 8082d74:	40021000 	.word	0x40021000
 8082d78:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8082d7c:	4b27      	ldr	r3, [pc, #156]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082d7e:	681b      	ldr	r3, [r3, #0]
 8082d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8082d84:	2b00      	cmp	r3, #0
 8082d86:	d144      	bne.n	8082e12 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8082d88:	4b24      	ldr	r3, [pc, #144]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082d8a:	681b      	ldr	r3, [r3, #0]
 8082d8c:	4a23      	ldr	r2, [pc, #140]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8082d92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8082d94:	4b21      	ldr	r3, [pc, #132]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082d96:	68db      	ldr	r3, [r3, #12]
 8082d98:	4a20      	ldr	r2, [pc, #128]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8082d9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8082da0:	f7fe fbc2 	bl	8081528 <HAL_GetTick>
 8082da4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8082da6:	e008      	b.n	8082dba <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8082da8:	f7fe fbbe 	bl	8081528 <HAL_GetTick>
 8082dac:	4602      	mov	r2, r0
 8082dae:	693b      	ldr	r3, [r7, #16]
 8082db0:	1ad3      	subs	r3, r2, r3
 8082db2:	2b02      	cmp	r3, #2
 8082db4:	d901      	bls.n	8082dba <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8082db6:	2303      	movs	r3, #3
 8082db8:	e02c      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8082dba:	4b18      	ldr	r3, [pc, #96]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082dbc:	681b      	ldr	r3, [r3, #0]
 8082dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8082dc2:	2b00      	cmp	r3, #0
 8082dc4:	d0f0      	beq.n	8082da8 <HAL_RCC_OscConfig+0x7b8>
 8082dc6:	e024      	b.n	8082e12 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8082dc8:	69bb      	ldr	r3, [r7, #24]
 8082dca:	2b0c      	cmp	r3, #12
 8082dcc:	d01f      	beq.n	8082e0e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8082dce:	4b13      	ldr	r3, [pc, #76]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082dd0:	681b      	ldr	r3, [r3, #0]
 8082dd2:	4a12      	ldr	r2, [pc, #72]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082dd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8082dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8082dda:	f7fe fba5 	bl	8081528 <HAL_GetTick>
 8082dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8082de0:	e008      	b.n	8082df4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8082de2:	f7fe fba1 	bl	8081528 <HAL_GetTick>
 8082de6:	4602      	mov	r2, r0
 8082de8:	693b      	ldr	r3, [r7, #16]
 8082dea:	1ad3      	subs	r3, r2, r3
 8082dec:	2b02      	cmp	r3, #2
 8082dee:	d901      	bls.n	8082df4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8082df0:	2303      	movs	r3, #3
 8082df2:	e00f      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8082df4:	4b09      	ldr	r3, [pc, #36]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082df6:	681b      	ldr	r3, [r3, #0]
 8082df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8082dfc:	2b00      	cmp	r3, #0
 8082dfe:	d1f0      	bne.n	8082de2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8082e00:	4b06      	ldr	r3, [pc, #24]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082e02:	68da      	ldr	r2, [r3, #12]
 8082e04:	4905      	ldr	r1, [pc, #20]	@ (8082e1c <HAL_RCC_OscConfig+0x82c>)
 8082e06:	4b06      	ldr	r3, [pc, #24]	@ (8082e20 <HAL_RCC_OscConfig+0x830>)
 8082e08:	4013      	ands	r3, r2
 8082e0a:	60cb      	str	r3, [r1, #12]
 8082e0c:	e001      	b.n	8082e12 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8082e0e:	2301      	movs	r3, #1
 8082e10:	e000      	b.n	8082e14 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8082e12:	2300      	movs	r3, #0
}
 8082e14:	4618      	mov	r0, r3
 8082e16:	3720      	adds	r7, #32
 8082e18:	46bd      	mov	sp, r7
 8082e1a:	bd80      	pop	{r7, pc}
 8082e1c:	40021000 	.word	0x40021000
 8082e20:	feeefffc 	.word	0xfeeefffc

08082e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8082e24:	b580      	push	{r7, lr}
 8082e26:	b084      	sub	sp, #16
 8082e28:	af00      	add	r7, sp, #0
 8082e2a:	6078      	str	r0, [r7, #4]
 8082e2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8082e2e:	687b      	ldr	r3, [r7, #4]
 8082e30:	2b00      	cmp	r3, #0
 8082e32:	d101      	bne.n	8082e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8082e34:	2301      	movs	r3, #1
 8082e36:	e0e7      	b.n	8083008 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8082e38:	4b75      	ldr	r3, [pc, #468]	@ (8083010 <HAL_RCC_ClockConfig+0x1ec>)
 8082e3a:	681b      	ldr	r3, [r3, #0]
 8082e3c:	f003 0307 	and.w	r3, r3, #7
 8082e40:	683a      	ldr	r2, [r7, #0]
 8082e42:	429a      	cmp	r2, r3
 8082e44:	d910      	bls.n	8082e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8082e46:	4b72      	ldr	r3, [pc, #456]	@ (8083010 <HAL_RCC_ClockConfig+0x1ec>)
 8082e48:	681b      	ldr	r3, [r3, #0]
 8082e4a:	f023 0207 	bic.w	r2, r3, #7
 8082e4e:	4970      	ldr	r1, [pc, #448]	@ (8083010 <HAL_RCC_ClockConfig+0x1ec>)
 8082e50:	683b      	ldr	r3, [r7, #0]
 8082e52:	4313      	orrs	r3, r2
 8082e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8082e56:	4b6e      	ldr	r3, [pc, #440]	@ (8083010 <HAL_RCC_ClockConfig+0x1ec>)
 8082e58:	681b      	ldr	r3, [r3, #0]
 8082e5a:	f003 0307 	and.w	r3, r3, #7
 8082e5e:	683a      	ldr	r2, [r7, #0]
 8082e60:	429a      	cmp	r2, r3
 8082e62:	d001      	beq.n	8082e68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8082e64:	2301      	movs	r3, #1
 8082e66:	e0cf      	b.n	8083008 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8082e68:	687b      	ldr	r3, [r7, #4]
 8082e6a:	681b      	ldr	r3, [r3, #0]
 8082e6c:	f003 0302 	and.w	r3, r3, #2
 8082e70:	2b00      	cmp	r3, #0
 8082e72:	d010      	beq.n	8082e96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8082e74:	687b      	ldr	r3, [r7, #4]
 8082e76:	689a      	ldr	r2, [r3, #8]
 8082e78:	4b66      	ldr	r3, [pc, #408]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082e7a:	689b      	ldr	r3, [r3, #8]
 8082e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8082e80:	429a      	cmp	r2, r3
 8082e82:	d908      	bls.n	8082e96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8082e84:	4b63      	ldr	r3, [pc, #396]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082e86:	689b      	ldr	r3, [r3, #8]
 8082e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8082e8c:	687b      	ldr	r3, [r7, #4]
 8082e8e:	689b      	ldr	r3, [r3, #8]
 8082e90:	4960      	ldr	r1, [pc, #384]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082e92:	4313      	orrs	r3, r2
 8082e94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8082e96:	687b      	ldr	r3, [r7, #4]
 8082e98:	681b      	ldr	r3, [r3, #0]
 8082e9a:	f003 0301 	and.w	r3, r3, #1
 8082e9e:	2b00      	cmp	r3, #0
 8082ea0:	d04c      	beq.n	8082f3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8082ea2:	687b      	ldr	r3, [r7, #4]
 8082ea4:	685b      	ldr	r3, [r3, #4]
 8082ea6:	2b03      	cmp	r3, #3
 8082ea8:	d107      	bne.n	8082eba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8082eaa:	4b5a      	ldr	r3, [pc, #360]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082eac:	681b      	ldr	r3, [r3, #0]
 8082eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8082eb2:	2b00      	cmp	r3, #0
 8082eb4:	d121      	bne.n	8082efa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8082eb6:	2301      	movs	r3, #1
 8082eb8:	e0a6      	b.n	8083008 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8082eba:	687b      	ldr	r3, [r7, #4]
 8082ebc:	685b      	ldr	r3, [r3, #4]
 8082ebe:	2b02      	cmp	r3, #2
 8082ec0:	d107      	bne.n	8082ed2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8082ec2:	4b54      	ldr	r3, [pc, #336]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082ec4:	681b      	ldr	r3, [r3, #0]
 8082ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8082eca:	2b00      	cmp	r3, #0
 8082ecc:	d115      	bne.n	8082efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8082ece:	2301      	movs	r3, #1
 8082ed0:	e09a      	b.n	8083008 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8082ed2:	687b      	ldr	r3, [r7, #4]
 8082ed4:	685b      	ldr	r3, [r3, #4]
 8082ed6:	2b00      	cmp	r3, #0
 8082ed8:	d107      	bne.n	8082eea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8082eda:	4b4e      	ldr	r3, [pc, #312]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082edc:	681b      	ldr	r3, [r3, #0]
 8082ede:	f003 0302 	and.w	r3, r3, #2
 8082ee2:	2b00      	cmp	r3, #0
 8082ee4:	d109      	bne.n	8082efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8082ee6:	2301      	movs	r3, #1
 8082ee8:	e08e      	b.n	8083008 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8082eea:	4b4a      	ldr	r3, [pc, #296]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082eec:	681b      	ldr	r3, [r3, #0]
 8082eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8082ef2:	2b00      	cmp	r3, #0
 8082ef4:	d101      	bne.n	8082efa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8082ef6:	2301      	movs	r3, #1
 8082ef8:	e086      	b.n	8083008 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8082efa:	4b46      	ldr	r3, [pc, #280]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082efc:	689b      	ldr	r3, [r3, #8]
 8082efe:	f023 0203 	bic.w	r2, r3, #3
 8082f02:	687b      	ldr	r3, [r7, #4]
 8082f04:	685b      	ldr	r3, [r3, #4]
 8082f06:	4943      	ldr	r1, [pc, #268]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082f08:	4313      	orrs	r3, r2
 8082f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8082f0c:	f7fe fb0c 	bl	8081528 <HAL_GetTick>
 8082f10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8082f12:	e00a      	b.n	8082f2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8082f14:	f7fe fb08 	bl	8081528 <HAL_GetTick>
 8082f18:	4602      	mov	r2, r0
 8082f1a:	68fb      	ldr	r3, [r7, #12]
 8082f1c:	1ad3      	subs	r3, r2, r3
 8082f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8082f22:	4293      	cmp	r3, r2
 8082f24:	d901      	bls.n	8082f2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8082f26:	2303      	movs	r3, #3
 8082f28:	e06e      	b.n	8083008 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8082f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082f2c:	689b      	ldr	r3, [r3, #8]
 8082f2e:	f003 020c 	and.w	r2, r3, #12
 8082f32:	687b      	ldr	r3, [r7, #4]
 8082f34:	685b      	ldr	r3, [r3, #4]
 8082f36:	009b      	lsls	r3, r3, #2
 8082f38:	429a      	cmp	r2, r3
 8082f3a:	d1eb      	bne.n	8082f14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8082f3c:	687b      	ldr	r3, [r7, #4]
 8082f3e:	681b      	ldr	r3, [r3, #0]
 8082f40:	f003 0302 	and.w	r3, r3, #2
 8082f44:	2b00      	cmp	r3, #0
 8082f46:	d010      	beq.n	8082f6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8082f48:	687b      	ldr	r3, [r7, #4]
 8082f4a:	689a      	ldr	r2, [r3, #8]
 8082f4c:	4b31      	ldr	r3, [pc, #196]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082f4e:	689b      	ldr	r3, [r3, #8]
 8082f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8082f54:	429a      	cmp	r2, r3
 8082f56:	d208      	bcs.n	8082f6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8082f58:	4b2e      	ldr	r3, [pc, #184]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082f5a:	689b      	ldr	r3, [r3, #8]
 8082f5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8082f60:	687b      	ldr	r3, [r7, #4]
 8082f62:	689b      	ldr	r3, [r3, #8]
 8082f64:	492b      	ldr	r1, [pc, #172]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082f66:	4313      	orrs	r3, r2
 8082f68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8082f6a:	4b29      	ldr	r3, [pc, #164]	@ (8083010 <HAL_RCC_ClockConfig+0x1ec>)
 8082f6c:	681b      	ldr	r3, [r3, #0]
 8082f6e:	f003 0307 	and.w	r3, r3, #7
 8082f72:	683a      	ldr	r2, [r7, #0]
 8082f74:	429a      	cmp	r2, r3
 8082f76:	d210      	bcs.n	8082f9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8082f78:	4b25      	ldr	r3, [pc, #148]	@ (8083010 <HAL_RCC_ClockConfig+0x1ec>)
 8082f7a:	681b      	ldr	r3, [r3, #0]
 8082f7c:	f023 0207 	bic.w	r2, r3, #7
 8082f80:	4923      	ldr	r1, [pc, #140]	@ (8083010 <HAL_RCC_ClockConfig+0x1ec>)
 8082f82:	683b      	ldr	r3, [r7, #0]
 8082f84:	4313      	orrs	r3, r2
 8082f86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8082f88:	4b21      	ldr	r3, [pc, #132]	@ (8083010 <HAL_RCC_ClockConfig+0x1ec>)
 8082f8a:	681b      	ldr	r3, [r3, #0]
 8082f8c:	f003 0307 	and.w	r3, r3, #7
 8082f90:	683a      	ldr	r2, [r7, #0]
 8082f92:	429a      	cmp	r2, r3
 8082f94:	d001      	beq.n	8082f9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8082f96:	2301      	movs	r3, #1
 8082f98:	e036      	b.n	8083008 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8082f9a:	687b      	ldr	r3, [r7, #4]
 8082f9c:	681b      	ldr	r3, [r3, #0]
 8082f9e:	f003 0304 	and.w	r3, r3, #4
 8082fa2:	2b00      	cmp	r3, #0
 8082fa4:	d008      	beq.n	8082fb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8082fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082fa8:	689b      	ldr	r3, [r3, #8]
 8082faa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8082fae:	687b      	ldr	r3, [r7, #4]
 8082fb0:	68db      	ldr	r3, [r3, #12]
 8082fb2:	4918      	ldr	r1, [pc, #96]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082fb4:	4313      	orrs	r3, r2
 8082fb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8082fb8:	687b      	ldr	r3, [r7, #4]
 8082fba:	681b      	ldr	r3, [r3, #0]
 8082fbc:	f003 0308 	and.w	r3, r3, #8
 8082fc0:	2b00      	cmp	r3, #0
 8082fc2:	d009      	beq.n	8082fd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8082fc4:	4b13      	ldr	r3, [pc, #76]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082fc6:	689b      	ldr	r3, [r3, #8]
 8082fc8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8082fcc:	687b      	ldr	r3, [r7, #4]
 8082fce:	691b      	ldr	r3, [r3, #16]
 8082fd0:	00db      	lsls	r3, r3, #3
 8082fd2:	4910      	ldr	r1, [pc, #64]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082fd4:	4313      	orrs	r3, r2
 8082fd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8082fd8:	f000 f824 	bl	8083024 <HAL_RCC_GetSysClockFreq>
 8082fdc:	4602      	mov	r2, r0
 8082fde:	4b0d      	ldr	r3, [pc, #52]	@ (8083014 <HAL_RCC_ClockConfig+0x1f0>)
 8082fe0:	689b      	ldr	r3, [r3, #8]
 8082fe2:	091b      	lsrs	r3, r3, #4
 8082fe4:	f003 030f 	and.w	r3, r3, #15
 8082fe8:	490b      	ldr	r1, [pc, #44]	@ (8083018 <HAL_RCC_ClockConfig+0x1f4>)
 8082fea:	5ccb      	ldrb	r3, [r1, r3]
 8082fec:	f003 031f 	and.w	r3, r3, #31
 8082ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8082ff4:	4a09      	ldr	r2, [pc, #36]	@ (808301c <HAL_RCC_ClockConfig+0x1f8>)
 8082ff6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8082ff8:	4b09      	ldr	r3, [pc, #36]	@ (8083020 <HAL_RCC_ClockConfig+0x1fc>)
 8082ffa:	681b      	ldr	r3, [r3, #0]
 8082ffc:	4618      	mov	r0, r3
 8082ffe:	f7fe fa43 	bl	8081488 <HAL_InitTick>
 8083002:	4603      	mov	r3, r0
 8083004:	72fb      	strb	r3, [r7, #11]

  return status;
 8083006:	7afb      	ldrb	r3, [r7, #11]
}
 8083008:	4618      	mov	r0, r3
 808300a:	3710      	adds	r7, #16
 808300c:	46bd      	mov	sp, r7
 808300e:	bd80      	pop	{r7, pc}
 8083010:	40022000 	.word	0x40022000
 8083014:	40021000 	.word	0x40021000
 8083018:	08084b20 	.word	0x08084b20
 808301c:	20000000 	.word	0x20000000
 8083020:	20000004 	.word	0x20000004

08083024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8083024:	b480      	push	{r7}
 8083026:	b089      	sub	sp, #36	@ 0x24
 8083028:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 808302a:	2300      	movs	r3, #0
 808302c:	61fb      	str	r3, [r7, #28]
 808302e:	2300      	movs	r3, #0
 8083030:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8083032:	4b3e      	ldr	r3, [pc, #248]	@ (808312c <HAL_RCC_GetSysClockFreq+0x108>)
 8083034:	689b      	ldr	r3, [r3, #8]
 8083036:	f003 030c 	and.w	r3, r3, #12
 808303a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 808303c:	4b3b      	ldr	r3, [pc, #236]	@ (808312c <HAL_RCC_GetSysClockFreq+0x108>)
 808303e:	68db      	ldr	r3, [r3, #12]
 8083040:	f003 0303 	and.w	r3, r3, #3
 8083044:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8083046:	693b      	ldr	r3, [r7, #16]
 8083048:	2b00      	cmp	r3, #0
 808304a:	d005      	beq.n	8083058 <HAL_RCC_GetSysClockFreq+0x34>
 808304c:	693b      	ldr	r3, [r7, #16]
 808304e:	2b0c      	cmp	r3, #12
 8083050:	d121      	bne.n	8083096 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8083052:	68fb      	ldr	r3, [r7, #12]
 8083054:	2b01      	cmp	r3, #1
 8083056:	d11e      	bne.n	8083096 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8083058:	4b34      	ldr	r3, [pc, #208]	@ (808312c <HAL_RCC_GetSysClockFreq+0x108>)
 808305a:	681b      	ldr	r3, [r3, #0]
 808305c:	f003 0308 	and.w	r3, r3, #8
 8083060:	2b00      	cmp	r3, #0
 8083062:	d107      	bne.n	8083074 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8083064:	4b31      	ldr	r3, [pc, #196]	@ (808312c <HAL_RCC_GetSysClockFreq+0x108>)
 8083066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 808306a:	0a1b      	lsrs	r3, r3, #8
 808306c:	f003 030f 	and.w	r3, r3, #15
 8083070:	61fb      	str	r3, [r7, #28]
 8083072:	e005      	b.n	8083080 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8083074:	4b2d      	ldr	r3, [pc, #180]	@ (808312c <HAL_RCC_GetSysClockFreq+0x108>)
 8083076:	681b      	ldr	r3, [r3, #0]
 8083078:	091b      	lsrs	r3, r3, #4
 808307a:	f003 030f 	and.w	r3, r3, #15
 808307e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8083080:	4a2b      	ldr	r2, [pc, #172]	@ (8083130 <HAL_RCC_GetSysClockFreq+0x10c>)
 8083082:	69fb      	ldr	r3, [r7, #28]
 8083084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8083088:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 808308a:	693b      	ldr	r3, [r7, #16]
 808308c:	2b00      	cmp	r3, #0
 808308e:	d10d      	bne.n	80830ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8083090:	69fb      	ldr	r3, [r7, #28]
 8083092:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8083094:	e00a      	b.n	80830ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8083096:	693b      	ldr	r3, [r7, #16]
 8083098:	2b04      	cmp	r3, #4
 808309a:	d102      	bne.n	80830a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 808309c:	4b25      	ldr	r3, [pc, #148]	@ (8083134 <HAL_RCC_GetSysClockFreq+0x110>)
 808309e:	61bb      	str	r3, [r7, #24]
 80830a0:	e004      	b.n	80830ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80830a2:	693b      	ldr	r3, [r7, #16]
 80830a4:	2b08      	cmp	r3, #8
 80830a6:	d101      	bne.n	80830ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80830a8:	4b23      	ldr	r3, [pc, #140]	@ (8083138 <HAL_RCC_GetSysClockFreq+0x114>)
 80830aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80830ac:	693b      	ldr	r3, [r7, #16]
 80830ae:	2b0c      	cmp	r3, #12
 80830b0:	d134      	bne.n	808311c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80830b2:	4b1e      	ldr	r3, [pc, #120]	@ (808312c <HAL_RCC_GetSysClockFreq+0x108>)
 80830b4:	68db      	ldr	r3, [r3, #12]
 80830b6:	f003 0303 	and.w	r3, r3, #3
 80830ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80830bc:	68bb      	ldr	r3, [r7, #8]
 80830be:	2b02      	cmp	r3, #2
 80830c0:	d003      	beq.n	80830ca <HAL_RCC_GetSysClockFreq+0xa6>
 80830c2:	68bb      	ldr	r3, [r7, #8]
 80830c4:	2b03      	cmp	r3, #3
 80830c6:	d003      	beq.n	80830d0 <HAL_RCC_GetSysClockFreq+0xac>
 80830c8:	e005      	b.n	80830d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80830ca:	4b1a      	ldr	r3, [pc, #104]	@ (8083134 <HAL_RCC_GetSysClockFreq+0x110>)
 80830cc:	617b      	str	r3, [r7, #20]
      break;
 80830ce:	e005      	b.n	80830dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80830d0:	4b19      	ldr	r3, [pc, #100]	@ (8083138 <HAL_RCC_GetSysClockFreq+0x114>)
 80830d2:	617b      	str	r3, [r7, #20]
      break;
 80830d4:	e002      	b.n	80830dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80830d6:	69fb      	ldr	r3, [r7, #28]
 80830d8:	617b      	str	r3, [r7, #20]
      break;
 80830da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80830dc:	4b13      	ldr	r3, [pc, #76]	@ (808312c <HAL_RCC_GetSysClockFreq+0x108>)
 80830de:	68db      	ldr	r3, [r3, #12]
 80830e0:	091b      	lsrs	r3, r3, #4
 80830e2:	f003 0307 	and.w	r3, r3, #7
 80830e6:	3301      	adds	r3, #1
 80830e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80830ea:	4b10      	ldr	r3, [pc, #64]	@ (808312c <HAL_RCC_GetSysClockFreq+0x108>)
 80830ec:	68db      	ldr	r3, [r3, #12]
 80830ee:	0a1b      	lsrs	r3, r3, #8
 80830f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80830f4:	697a      	ldr	r2, [r7, #20]
 80830f6:	fb03 f202 	mul.w	r2, r3, r2
 80830fa:	687b      	ldr	r3, [r7, #4]
 80830fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8083100:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8083102:	4b0a      	ldr	r3, [pc, #40]	@ (808312c <HAL_RCC_GetSysClockFreq+0x108>)
 8083104:	68db      	ldr	r3, [r3, #12]
 8083106:	0e5b      	lsrs	r3, r3, #25
 8083108:	f003 0303 	and.w	r3, r3, #3
 808310c:	3301      	adds	r3, #1
 808310e:	005b      	lsls	r3, r3, #1
 8083110:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8083112:	697a      	ldr	r2, [r7, #20]
 8083114:	683b      	ldr	r3, [r7, #0]
 8083116:	fbb2 f3f3 	udiv	r3, r2, r3
 808311a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 808311c:	69bb      	ldr	r3, [r7, #24]
}
 808311e:	4618      	mov	r0, r3
 8083120:	3724      	adds	r7, #36	@ 0x24
 8083122:	46bd      	mov	sp, r7
 8083124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083128:	4770      	bx	lr
 808312a:	bf00      	nop
 808312c:	40021000 	.word	0x40021000
 8083130:	08084b38 	.word	0x08084b38
 8083134:	00f42400 	.word	0x00f42400
 8083138:	007a1200 	.word	0x007a1200

0808313c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 808313c:	b480      	push	{r7}
 808313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8083140:	4b03      	ldr	r3, [pc, #12]	@ (8083150 <HAL_RCC_GetHCLKFreq+0x14>)
 8083142:	681b      	ldr	r3, [r3, #0]
}
 8083144:	4618      	mov	r0, r3
 8083146:	46bd      	mov	sp, r7
 8083148:	f85d 7b04 	ldr.w	r7, [sp], #4
 808314c:	4770      	bx	lr
 808314e:	bf00      	nop
 8083150:	20000000 	.word	0x20000000

08083154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8083154:	b580      	push	{r7, lr}
 8083156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8083158:	f7ff fff0 	bl	808313c <HAL_RCC_GetHCLKFreq>
 808315c:	4602      	mov	r2, r0
 808315e:	4b06      	ldr	r3, [pc, #24]	@ (8083178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8083160:	689b      	ldr	r3, [r3, #8]
 8083162:	0a1b      	lsrs	r3, r3, #8
 8083164:	f003 0307 	and.w	r3, r3, #7
 8083168:	4904      	ldr	r1, [pc, #16]	@ (808317c <HAL_RCC_GetPCLK1Freq+0x28>)
 808316a:	5ccb      	ldrb	r3, [r1, r3]
 808316c:	f003 031f 	and.w	r3, r3, #31
 8083170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8083174:	4618      	mov	r0, r3
 8083176:	bd80      	pop	{r7, pc}
 8083178:	40021000 	.word	0x40021000
 808317c:	08084b30 	.word	0x08084b30

08083180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8083180:	b580      	push	{r7, lr}
 8083182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8083184:	f7ff ffda 	bl	808313c <HAL_RCC_GetHCLKFreq>
 8083188:	4602      	mov	r2, r0
 808318a:	4b06      	ldr	r3, [pc, #24]	@ (80831a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 808318c:	689b      	ldr	r3, [r3, #8]
 808318e:	0adb      	lsrs	r3, r3, #11
 8083190:	f003 0307 	and.w	r3, r3, #7
 8083194:	4904      	ldr	r1, [pc, #16]	@ (80831a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8083196:	5ccb      	ldrb	r3, [r1, r3]
 8083198:	f003 031f 	and.w	r3, r3, #31
 808319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80831a0:	4618      	mov	r0, r3
 80831a2:	bd80      	pop	{r7, pc}
 80831a4:	40021000 	.word	0x40021000
 80831a8:	08084b30 	.word	0x08084b30

080831ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80831ac:	b580      	push	{r7, lr}
 80831ae:	b086      	sub	sp, #24
 80831b0:	af00      	add	r7, sp, #0
 80831b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80831b4:	2300      	movs	r3, #0
 80831b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80831b8:	4b2a      	ldr	r3, [pc, #168]	@ (8083264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80831ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80831bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80831c0:	2b00      	cmp	r3, #0
 80831c2:	d003      	beq.n	80831cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80831c4:	f7ff f8fe 	bl	80823c4 <HAL_PWREx_GetVoltageRange>
 80831c8:	6178      	str	r0, [r7, #20]
 80831ca:	e014      	b.n	80831f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80831cc:	4b25      	ldr	r3, [pc, #148]	@ (8083264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80831ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80831d0:	4a24      	ldr	r2, [pc, #144]	@ (8083264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80831d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80831d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80831d8:	4b22      	ldr	r3, [pc, #136]	@ (8083264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80831da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80831dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80831e0:	60fb      	str	r3, [r7, #12]
 80831e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80831e4:	f7ff f8ee 	bl	80823c4 <HAL_PWREx_GetVoltageRange>
 80831e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80831ea:	4b1e      	ldr	r3, [pc, #120]	@ (8083264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80831ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80831ee:	4a1d      	ldr	r2, [pc, #116]	@ (8083264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80831f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80831f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80831f6:	697b      	ldr	r3, [r7, #20]
 80831f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80831fc:	d10b      	bne.n	8083216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80831fe:	687b      	ldr	r3, [r7, #4]
 8083200:	2b80      	cmp	r3, #128	@ 0x80
 8083202:	d919      	bls.n	8083238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8083204:	687b      	ldr	r3, [r7, #4]
 8083206:	2ba0      	cmp	r3, #160	@ 0xa0
 8083208:	d902      	bls.n	8083210 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 808320a:	2302      	movs	r3, #2
 808320c:	613b      	str	r3, [r7, #16]
 808320e:	e013      	b.n	8083238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8083210:	2301      	movs	r3, #1
 8083212:	613b      	str	r3, [r7, #16]
 8083214:	e010      	b.n	8083238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8083216:	687b      	ldr	r3, [r7, #4]
 8083218:	2b80      	cmp	r3, #128	@ 0x80
 808321a:	d902      	bls.n	8083222 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 808321c:	2303      	movs	r3, #3
 808321e:	613b      	str	r3, [r7, #16]
 8083220:	e00a      	b.n	8083238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8083222:	687b      	ldr	r3, [r7, #4]
 8083224:	2b80      	cmp	r3, #128	@ 0x80
 8083226:	d102      	bne.n	808322e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8083228:	2302      	movs	r3, #2
 808322a:	613b      	str	r3, [r7, #16]
 808322c:	e004      	b.n	8083238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 808322e:	687b      	ldr	r3, [r7, #4]
 8083230:	2b70      	cmp	r3, #112	@ 0x70
 8083232:	d101      	bne.n	8083238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8083234:	2301      	movs	r3, #1
 8083236:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8083238:	4b0b      	ldr	r3, [pc, #44]	@ (8083268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 808323a:	681b      	ldr	r3, [r3, #0]
 808323c:	f023 0207 	bic.w	r2, r3, #7
 8083240:	4909      	ldr	r1, [pc, #36]	@ (8083268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8083242:	693b      	ldr	r3, [r7, #16]
 8083244:	4313      	orrs	r3, r2
 8083246:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8083248:	4b07      	ldr	r3, [pc, #28]	@ (8083268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 808324a:	681b      	ldr	r3, [r3, #0]
 808324c:	f003 0307 	and.w	r3, r3, #7
 8083250:	693a      	ldr	r2, [r7, #16]
 8083252:	429a      	cmp	r2, r3
 8083254:	d001      	beq.n	808325a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8083256:	2301      	movs	r3, #1
 8083258:	e000      	b.n	808325c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 808325a:	2300      	movs	r3, #0
}
 808325c:	4618      	mov	r0, r3
 808325e:	3718      	adds	r7, #24
 8083260:	46bd      	mov	sp, r7
 8083262:	bd80      	pop	{r7, pc}
 8083264:	40021000 	.word	0x40021000
 8083268:	40022000 	.word	0x40022000

0808326c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 808326c:	b580      	push	{r7, lr}
 808326e:	b086      	sub	sp, #24
 8083270:	af00      	add	r7, sp, #0
 8083272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8083274:	2300      	movs	r3, #0
 8083276:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8083278:	2300      	movs	r3, #0
 808327a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 808327c:	687b      	ldr	r3, [r7, #4]
 808327e:	681b      	ldr	r3, [r3, #0]
 8083280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8083284:	2b00      	cmp	r3, #0
 8083286:	d041      	beq.n	808330c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8083288:	687b      	ldr	r3, [r7, #4]
 808328a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 808328c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8083290:	d02a      	beq.n	80832e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8083292:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8083296:	d824      	bhi.n	80832e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8083298:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 808329c:	d008      	beq.n	80832b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 808329e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80832a2:	d81e      	bhi.n	80832e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80832a4:	2b00      	cmp	r3, #0
 80832a6:	d00a      	beq.n	80832be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80832a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80832ac:	d010      	beq.n	80832d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80832ae:	e018      	b.n	80832e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80832b0:	4b86      	ldr	r3, [pc, #536]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80832b2:	68db      	ldr	r3, [r3, #12]
 80832b4:	4a85      	ldr	r2, [pc, #532]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80832b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80832ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80832bc:	e015      	b.n	80832ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80832be:	687b      	ldr	r3, [r7, #4]
 80832c0:	3304      	adds	r3, #4
 80832c2:	2100      	movs	r1, #0
 80832c4:	4618      	mov	r0, r3
 80832c6:	f000 facd 	bl	8083864 <RCCEx_PLLSAI1_Config>
 80832ca:	4603      	mov	r3, r0
 80832cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80832ce:	e00c      	b.n	80832ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80832d0:	687b      	ldr	r3, [r7, #4]
 80832d2:	3320      	adds	r3, #32
 80832d4:	2100      	movs	r1, #0
 80832d6:	4618      	mov	r0, r3
 80832d8:	f000 fbb6 	bl	8083a48 <RCCEx_PLLSAI2_Config>
 80832dc:	4603      	mov	r3, r0
 80832de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80832e0:	e003      	b.n	80832ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80832e2:	2301      	movs	r3, #1
 80832e4:	74fb      	strb	r3, [r7, #19]
      break;
 80832e6:	e000      	b.n	80832ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80832e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80832ea:	7cfb      	ldrb	r3, [r7, #19]
 80832ec:	2b00      	cmp	r3, #0
 80832ee:	d10b      	bne.n	8083308 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80832f0:	4b76      	ldr	r3, [pc, #472]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80832f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80832f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80832fa:	687b      	ldr	r3, [r7, #4]
 80832fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80832fe:	4973      	ldr	r1, [pc, #460]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8083300:	4313      	orrs	r3, r2
 8083302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8083306:	e001      	b.n	808330c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8083308:	7cfb      	ldrb	r3, [r7, #19]
 808330a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 808330c:	687b      	ldr	r3, [r7, #4]
 808330e:	681b      	ldr	r3, [r3, #0]
 8083310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8083314:	2b00      	cmp	r3, #0
 8083316:	d041      	beq.n	808339c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8083318:	687b      	ldr	r3, [r7, #4]
 808331a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 808331c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8083320:	d02a      	beq.n	8083378 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8083322:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8083326:	d824      	bhi.n	8083372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8083328:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 808332c:	d008      	beq.n	8083340 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 808332e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8083332:	d81e      	bhi.n	8083372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8083334:	2b00      	cmp	r3, #0
 8083336:	d00a      	beq.n	808334e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8083338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 808333c:	d010      	beq.n	8083360 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 808333e:	e018      	b.n	8083372 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8083340:	4b62      	ldr	r3, [pc, #392]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8083342:	68db      	ldr	r3, [r3, #12]
 8083344:	4a61      	ldr	r2, [pc, #388]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8083346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 808334a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 808334c:	e015      	b.n	808337a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 808334e:	687b      	ldr	r3, [r7, #4]
 8083350:	3304      	adds	r3, #4
 8083352:	2100      	movs	r1, #0
 8083354:	4618      	mov	r0, r3
 8083356:	f000 fa85 	bl	8083864 <RCCEx_PLLSAI1_Config>
 808335a:	4603      	mov	r3, r0
 808335c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 808335e:	e00c      	b.n	808337a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8083360:	687b      	ldr	r3, [r7, #4]
 8083362:	3320      	adds	r3, #32
 8083364:	2100      	movs	r1, #0
 8083366:	4618      	mov	r0, r3
 8083368:	f000 fb6e 	bl	8083a48 <RCCEx_PLLSAI2_Config>
 808336c:	4603      	mov	r3, r0
 808336e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8083370:	e003      	b.n	808337a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8083372:	2301      	movs	r3, #1
 8083374:	74fb      	strb	r3, [r7, #19]
      break;
 8083376:	e000      	b.n	808337a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8083378:	bf00      	nop
    }

    if(ret == HAL_OK)
 808337a:	7cfb      	ldrb	r3, [r7, #19]
 808337c:	2b00      	cmp	r3, #0
 808337e:	d10b      	bne.n	8083398 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8083380:	4b52      	ldr	r3, [pc, #328]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8083382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083386:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 808338a:	687b      	ldr	r3, [r7, #4]
 808338c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 808338e:	494f      	ldr	r1, [pc, #316]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8083390:	4313      	orrs	r3, r2
 8083392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8083396:	e001      	b.n	808339c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8083398:	7cfb      	ldrb	r3, [r7, #19]
 808339a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 808339c:	687b      	ldr	r3, [r7, #4]
 808339e:	681b      	ldr	r3, [r3, #0]
 80833a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80833a4:	2b00      	cmp	r3, #0
 80833a6:	f000 80a0 	beq.w	80834ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80833aa:	2300      	movs	r3, #0
 80833ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80833ae:	4b47      	ldr	r3, [pc, #284]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80833b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80833b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80833b6:	2b00      	cmp	r3, #0
 80833b8:	d101      	bne.n	80833be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80833ba:	2301      	movs	r3, #1
 80833bc:	e000      	b.n	80833c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80833be:	2300      	movs	r3, #0
 80833c0:	2b00      	cmp	r3, #0
 80833c2:	d00d      	beq.n	80833e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80833c4:	4b41      	ldr	r3, [pc, #260]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80833c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80833c8:	4a40      	ldr	r2, [pc, #256]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80833ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80833ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80833d0:	4b3e      	ldr	r3, [pc, #248]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80833d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80833d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80833d8:	60bb      	str	r3, [r7, #8]
 80833da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80833dc:	2301      	movs	r3, #1
 80833de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80833e0:	4b3b      	ldr	r3, [pc, #236]	@ (80834d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80833e2:	681b      	ldr	r3, [r3, #0]
 80833e4:	4a3a      	ldr	r2, [pc, #232]	@ (80834d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80833e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80833ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80833ec:	f7fe f89c 	bl	8081528 <HAL_GetTick>
 80833f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80833f2:	e009      	b.n	8083408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80833f4:	f7fe f898 	bl	8081528 <HAL_GetTick>
 80833f8:	4602      	mov	r2, r0
 80833fa:	68fb      	ldr	r3, [r7, #12]
 80833fc:	1ad3      	subs	r3, r2, r3
 80833fe:	2b02      	cmp	r3, #2
 8083400:	d902      	bls.n	8083408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8083402:	2303      	movs	r3, #3
 8083404:	74fb      	strb	r3, [r7, #19]
        break;
 8083406:	e005      	b.n	8083414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8083408:	4b31      	ldr	r3, [pc, #196]	@ (80834d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 808340a:	681b      	ldr	r3, [r3, #0]
 808340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8083410:	2b00      	cmp	r3, #0
 8083412:	d0ef      	beq.n	80833f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8083414:	7cfb      	ldrb	r3, [r7, #19]
 8083416:	2b00      	cmp	r3, #0
 8083418:	d15c      	bne.n	80834d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 808341a:	4b2c      	ldr	r3, [pc, #176]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 808341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8083420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8083424:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8083426:	697b      	ldr	r3, [r7, #20]
 8083428:	2b00      	cmp	r3, #0
 808342a:	d01f      	beq.n	808346c <HAL_RCCEx_PeriphCLKConfig+0x200>
 808342c:	687b      	ldr	r3, [r7, #4]
 808342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083432:	697a      	ldr	r2, [r7, #20]
 8083434:	429a      	cmp	r2, r3
 8083436:	d019      	beq.n	808346c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8083438:	4b24      	ldr	r3, [pc, #144]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 808343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 808343e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8083442:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8083444:	4b21      	ldr	r3, [pc, #132]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8083446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 808344a:	4a20      	ldr	r2, [pc, #128]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 808344c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8083450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8083454:	4b1d      	ldr	r3, [pc, #116]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8083456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 808345a:	4a1c      	ldr	r2, [pc, #112]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 808345c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8083460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8083464:	4a19      	ldr	r2, [pc, #100]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8083466:	697b      	ldr	r3, [r7, #20]
 8083468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 808346c:	697b      	ldr	r3, [r7, #20]
 808346e:	f003 0301 	and.w	r3, r3, #1
 8083472:	2b00      	cmp	r3, #0
 8083474:	d016      	beq.n	80834a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8083476:	f7fe f857 	bl	8081528 <HAL_GetTick>
 808347a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 808347c:	e00b      	b.n	8083496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 808347e:	f7fe f853 	bl	8081528 <HAL_GetTick>
 8083482:	4602      	mov	r2, r0
 8083484:	68fb      	ldr	r3, [r7, #12]
 8083486:	1ad3      	subs	r3, r2, r3
 8083488:	f241 3288 	movw	r2, #5000	@ 0x1388
 808348c:	4293      	cmp	r3, r2
 808348e:	d902      	bls.n	8083496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8083490:	2303      	movs	r3, #3
 8083492:	74fb      	strb	r3, [r7, #19]
            break;
 8083494:	e006      	b.n	80834a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8083496:	4b0d      	ldr	r3, [pc, #52]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8083498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 808349c:	f003 0302 	and.w	r3, r3, #2
 80834a0:	2b00      	cmp	r3, #0
 80834a2:	d0ec      	beq.n	808347e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80834a4:	7cfb      	ldrb	r3, [r7, #19]
 80834a6:	2b00      	cmp	r3, #0
 80834a8:	d10c      	bne.n	80834c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80834aa:	4b08      	ldr	r3, [pc, #32]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80834ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80834b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80834b4:	687b      	ldr	r3, [r7, #4]
 80834b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80834ba:	4904      	ldr	r1, [pc, #16]	@ (80834cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80834bc:	4313      	orrs	r3, r2
 80834be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80834c2:	e009      	b.n	80834d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80834c4:	7cfb      	ldrb	r3, [r7, #19]
 80834c6:	74bb      	strb	r3, [r7, #18]
 80834c8:	e006      	b.n	80834d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80834ca:	bf00      	nop
 80834cc:	40021000 	.word	0x40021000
 80834d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80834d4:	7cfb      	ldrb	r3, [r7, #19]
 80834d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80834d8:	7c7b      	ldrb	r3, [r7, #17]
 80834da:	2b01      	cmp	r3, #1
 80834dc:	d105      	bne.n	80834ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80834de:	4ba6      	ldr	r3, [pc, #664]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80834e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80834e2:	4aa5      	ldr	r2, [pc, #660]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80834e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80834e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80834ea:	687b      	ldr	r3, [r7, #4]
 80834ec:	681b      	ldr	r3, [r3, #0]
 80834ee:	f003 0301 	and.w	r3, r3, #1
 80834f2:	2b00      	cmp	r3, #0
 80834f4:	d00a      	beq.n	808350c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80834f6:	4ba0      	ldr	r3, [pc, #640]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80834f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80834fc:	f023 0203 	bic.w	r2, r3, #3
 8083500:	687b      	ldr	r3, [r7, #4]
 8083502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8083504:	499c      	ldr	r1, [pc, #624]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8083506:	4313      	orrs	r3, r2
 8083508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 808350c:	687b      	ldr	r3, [r7, #4]
 808350e:	681b      	ldr	r3, [r3, #0]
 8083510:	f003 0302 	and.w	r3, r3, #2
 8083514:	2b00      	cmp	r3, #0
 8083516:	d00a      	beq.n	808352e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8083518:	4b97      	ldr	r3, [pc, #604]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 808351e:	f023 020c 	bic.w	r2, r3, #12
 8083522:	687b      	ldr	r3, [r7, #4]
 8083524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8083526:	4994      	ldr	r1, [pc, #592]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8083528:	4313      	orrs	r3, r2
 808352a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 808352e:	687b      	ldr	r3, [r7, #4]
 8083530:	681b      	ldr	r3, [r3, #0]
 8083532:	f003 0304 	and.w	r3, r3, #4
 8083536:	2b00      	cmp	r3, #0
 8083538:	d00a      	beq.n	8083550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 808353a:	4b8f      	ldr	r3, [pc, #572]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083540:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8083544:	687b      	ldr	r3, [r7, #4]
 8083546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8083548:	498b      	ldr	r1, [pc, #556]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808354a:	4313      	orrs	r3, r2
 808354c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8083550:	687b      	ldr	r3, [r7, #4]
 8083552:	681b      	ldr	r3, [r3, #0]
 8083554:	f003 0308 	and.w	r3, r3, #8
 8083558:	2b00      	cmp	r3, #0
 808355a:	d00a      	beq.n	8083572 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 808355c:	4b86      	ldr	r3, [pc, #536]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083562:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8083566:	687b      	ldr	r3, [r7, #4]
 8083568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 808356a:	4983      	ldr	r1, [pc, #524]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808356c:	4313      	orrs	r3, r2
 808356e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8083572:	687b      	ldr	r3, [r7, #4]
 8083574:	681b      	ldr	r3, [r3, #0]
 8083576:	f003 0310 	and.w	r3, r3, #16
 808357a:	2b00      	cmp	r3, #0
 808357c:	d00a      	beq.n	8083594 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 808357e:	4b7e      	ldr	r3, [pc, #504]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8083580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8083588:	687b      	ldr	r3, [r7, #4]
 808358a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 808358c:	497a      	ldr	r1, [pc, #488]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808358e:	4313      	orrs	r3, r2
 8083590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8083594:	687b      	ldr	r3, [r7, #4]
 8083596:	681b      	ldr	r3, [r3, #0]
 8083598:	f003 0320 	and.w	r3, r3, #32
 808359c:	2b00      	cmp	r3, #0
 808359e:	d00a      	beq.n	80835b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80835a0:	4b75      	ldr	r3, [pc, #468]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80835a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80835a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80835aa:	687b      	ldr	r3, [r7, #4]
 80835ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80835ae:	4972      	ldr	r1, [pc, #456]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80835b0:	4313      	orrs	r3, r2
 80835b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80835b6:	687b      	ldr	r3, [r7, #4]
 80835b8:	681b      	ldr	r3, [r3, #0]
 80835ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80835be:	2b00      	cmp	r3, #0
 80835c0:	d00a      	beq.n	80835d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80835c2:	4b6d      	ldr	r3, [pc, #436]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80835c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80835c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80835cc:	687b      	ldr	r3, [r7, #4]
 80835ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80835d0:	4969      	ldr	r1, [pc, #420]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80835d2:	4313      	orrs	r3, r2
 80835d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80835d8:	687b      	ldr	r3, [r7, #4]
 80835da:	681b      	ldr	r3, [r3, #0]
 80835dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80835e0:	2b00      	cmp	r3, #0
 80835e2:	d00a      	beq.n	80835fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80835e4:	4b64      	ldr	r3, [pc, #400]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80835e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80835ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80835ee:	687b      	ldr	r3, [r7, #4]
 80835f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80835f2:	4961      	ldr	r1, [pc, #388]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80835f4:	4313      	orrs	r3, r2
 80835f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80835fa:	687b      	ldr	r3, [r7, #4]
 80835fc:	681b      	ldr	r3, [r3, #0]
 80835fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8083602:	2b00      	cmp	r3, #0
 8083604:	d00a      	beq.n	808361c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8083606:	4b5c      	ldr	r3, [pc, #368]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8083608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 808360c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8083610:	687b      	ldr	r3, [r7, #4]
 8083612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8083614:	4958      	ldr	r1, [pc, #352]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8083616:	4313      	orrs	r3, r2
 8083618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 808361c:	687b      	ldr	r3, [r7, #4]
 808361e:	681b      	ldr	r3, [r3, #0]
 8083620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8083624:	2b00      	cmp	r3, #0
 8083626:	d00a      	beq.n	808363e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8083628:	4b53      	ldr	r3, [pc, #332]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 808362e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8083632:	687b      	ldr	r3, [r7, #4]
 8083634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8083636:	4950      	ldr	r1, [pc, #320]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8083638:	4313      	orrs	r3, r2
 808363a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 808363e:	687b      	ldr	r3, [r7, #4]
 8083640:	681b      	ldr	r3, [r3, #0]
 8083642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8083646:	2b00      	cmp	r3, #0
 8083648:	d00a      	beq.n	8083660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 808364a:	4b4b      	ldr	r3, [pc, #300]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083650:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8083654:	687b      	ldr	r3, [r7, #4]
 8083656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8083658:	4947      	ldr	r1, [pc, #284]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808365a:	4313      	orrs	r3, r2
 808365c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8083660:	687b      	ldr	r3, [r7, #4]
 8083662:	681b      	ldr	r3, [r3, #0]
 8083664:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8083668:	2b00      	cmp	r3, #0
 808366a:	d00a      	beq.n	8083682 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 808366c:	4b42      	ldr	r3, [pc, #264]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808366e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8083672:	f023 0203 	bic.w	r2, r3, #3
 8083676:	687b      	ldr	r3, [r7, #4]
 8083678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 808367a:	493f      	ldr	r1, [pc, #252]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808367c:	4313      	orrs	r3, r2
 808367e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8083682:	687b      	ldr	r3, [r7, #4]
 8083684:	681b      	ldr	r3, [r3, #0]
 8083686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 808368a:	2b00      	cmp	r3, #0
 808368c:	d028      	beq.n	80836e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 808368e:	4b3a      	ldr	r3, [pc, #232]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8083690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083694:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8083698:	687b      	ldr	r3, [r7, #4]
 808369a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 808369c:	4936      	ldr	r1, [pc, #216]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808369e:	4313      	orrs	r3, r2
 80836a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80836a4:	687b      	ldr	r3, [r7, #4]
 80836a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80836a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80836ac:	d106      	bne.n	80836bc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80836ae:	4b32      	ldr	r3, [pc, #200]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80836b0:	68db      	ldr	r3, [r3, #12]
 80836b2:	4a31      	ldr	r2, [pc, #196]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80836b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80836b8:	60d3      	str	r3, [r2, #12]
 80836ba:	e011      	b.n	80836e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80836bc:	687b      	ldr	r3, [r7, #4]
 80836be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80836c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80836c4:	d10c      	bne.n	80836e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80836c6:	687b      	ldr	r3, [r7, #4]
 80836c8:	3304      	adds	r3, #4
 80836ca:	2101      	movs	r1, #1
 80836cc:	4618      	mov	r0, r3
 80836ce:	f000 f8c9 	bl	8083864 <RCCEx_PLLSAI1_Config>
 80836d2:	4603      	mov	r3, r0
 80836d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80836d6:	7cfb      	ldrb	r3, [r7, #19]
 80836d8:	2b00      	cmp	r3, #0
 80836da:	d001      	beq.n	80836e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80836dc:	7cfb      	ldrb	r3, [r7, #19]
 80836de:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80836e0:	687b      	ldr	r3, [r7, #4]
 80836e2:	681b      	ldr	r3, [r3, #0]
 80836e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80836e8:	2b00      	cmp	r3, #0
 80836ea:	d028      	beq.n	808373e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80836ec:	4b22      	ldr	r3, [pc, #136]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80836ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80836f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80836f6:	687b      	ldr	r3, [r7, #4]
 80836f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80836fa:	491f      	ldr	r1, [pc, #124]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80836fc:	4313      	orrs	r3, r2
 80836fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8083702:	687b      	ldr	r3, [r7, #4]
 8083704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8083706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 808370a:	d106      	bne.n	808371a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 808370c:	4b1a      	ldr	r3, [pc, #104]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808370e:	68db      	ldr	r3, [r3, #12]
 8083710:	4a19      	ldr	r2, [pc, #100]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8083712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8083716:	60d3      	str	r3, [r2, #12]
 8083718:	e011      	b.n	808373e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 808371a:	687b      	ldr	r3, [r7, #4]
 808371c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 808371e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8083722:	d10c      	bne.n	808373e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8083724:	687b      	ldr	r3, [r7, #4]
 8083726:	3304      	adds	r3, #4
 8083728:	2101      	movs	r1, #1
 808372a:	4618      	mov	r0, r3
 808372c:	f000 f89a 	bl	8083864 <RCCEx_PLLSAI1_Config>
 8083730:	4603      	mov	r3, r0
 8083732:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8083734:	7cfb      	ldrb	r3, [r7, #19]
 8083736:	2b00      	cmp	r3, #0
 8083738:	d001      	beq.n	808373e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 808373a:	7cfb      	ldrb	r3, [r7, #19]
 808373c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 808373e:	687b      	ldr	r3, [r7, #4]
 8083740:	681b      	ldr	r3, [r3, #0]
 8083742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8083746:	2b00      	cmp	r3, #0
 8083748:	d02a      	beq.n	80837a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 808374a:	4b0b      	ldr	r3, [pc, #44]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083750:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8083754:	687b      	ldr	r3, [r7, #4]
 8083756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8083758:	4907      	ldr	r1, [pc, #28]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808375a:	4313      	orrs	r3, r2
 808375c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8083760:	687b      	ldr	r3, [r7, #4]
 8083762:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8083764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8083768:	d108      	bne.n	808377c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 808376a:	4b03      	ldr	r3, [pc, #12]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 808376c:	68db      	ldr	r3, [r3, #12]
 808376e:	4a02      	ldr	r2, [pc, #8]	@ (8083778 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8083770:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8083774:	60d3      	str	r3, [r2, #12]
 8083776:	e013      	b.n	80837a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8083778:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 808377c:	687b      	ldr	r3, [r7, #4]
 808377e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8083780:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8083784:	d10c      	bne.n	80837a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8083786:	687b      	ldr	r3, [r7, #4]
 8083788:	3304      	adds	r3, #4
 808378a:	2101      	movs	r1, #1
 808378c:	4618      	mov	r0, r3
 808378e:	f000 f869 	bl	8083864 <RCCEx_PLLSAI1_Config>
 8083792:	4603      	mov	r3, r0
 8083794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8083796:	7cfb      	ldrb	r3, [r7, #19]
 8083798:	2b00      	cmp	r3, #0
 808379a:	d001      	beq.n	80837a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 808379c:	7cfb      	ldrb	r3, [r7, #19]
 808379e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80837a0:	687b      	ldr	r3, [r7, #4]
 80837a2:	681b      	ldr	r3, [r3, #0]
 80837a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80837a8:	2b00      	cmp	r3, #0
 80837aa:	d02f      	beq.n	808380c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80837ac:	4b2c      	ldr	r3, [pc, #176]	@ (8083860 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80837ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80837b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80837b6:	687b      	ldr	r3, [r7, #4]
 80837b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80837ba:	4929      	ldr	r1, [pc, #164]	@ (8083860 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80837bc:	4313      	orrs	r3, r2
 80837be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80837c2:	687b      	ldr	r3, [r7, #4]
 80837c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80837c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80837ca:	d10d      	bne.n	80837e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80837cc:	687b      	ldr	r3, [r7, #4]
 80837ce:	3304      	adds	r3, #4
 80837d0:	2102      	movs	r1, #2
 80837d2:	4618      	mov	r0, r3
 80837d4:	f000 f846 	bl	8083864 <RCCEx_PLLSAI1_Config>
 80837d8:	4603      	mov	r3, r0
 80837da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80837dc:	7cfb      	ldrb	r3, [r7, #19]
 80837de:	2b00      	cmp	r3, #0
 80837e0:	d014      	beq.n	808380c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80837e2:	7cfb      	ldrb	r3, [r7, #19]
 80837e4:	74bb      	strb	r3, [r7, #18]
 80837e6:	e011      	b.n	808380c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80837e8:	687b      	ldr	r3, [r7, #4]
 80837ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80837ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80837f0:	d10c      	bne.n	808380c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80837f2:	687b      	ldr	r3, [r7, #4]
 80837f4:	3320      	adds	r3, #32
 80837f6:	2102      	movs	r1, #2
 80837f8:	4618      	mov	r0, r3
 80837fa:	f000 f925 	bl	8083a48 <RCCEx_PLLSAI2_Config>
 80837fe:	4603      	mov	r3, r0
 8083800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8083802:	7cfb      	ldrb	r3, [r7, #19]
 8083804:	2b00      	cmp	r3, #0
 8083806:	d001      	beq.n	808380c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8083808:	7cfb      	ldrb	r3, [r7, #19]
 808380a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 808380c:	687b      	ldr	r3, [r7, #4]
 808380e:	681b      	ldr	r3, [r3, #0]
 8083810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8083814:	2b00      	cmp	r3, #0
 8083816:	d00b      	beq.n	8083830 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8083818:	4b11      	ldr	r3, [pc, #68]	@ (8083860 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 808381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 808381e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8083822:	687b      	ldr	r3, [r7, #4]
 8083824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8083828:	490d      	ldr	r1, [pc, #52]	@ (8083860 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 808382a:	4313      	orrs	r3, r2
 808382c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8083830:	687b      	ldr	r3, [r7, #4]
 8083832:	681b      	ldr	r3, [r3, #0]
 8083834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8083838:	2b00      	cmp	r3, #0
 808383a:	d00b      	beq.n	8083854 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 808383c:	4b08      	ldr	r3, [pc, #32]	@ (8083860 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 808383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083842:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8083846:	687b      	ldr	r3, [r7, #4]
 8083848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 808384c:	4904      	ldr	r1, [pc, #16]	@ (8083860 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 808384e:	4313      	orrs	r3, r2
 8083850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8083854:	7cbb      	ldrb	r3, [r7, #18]
}
 8083856:	4618      	mov	r0, r3
 8083858:	3718      	adds	r7, #24
 808385a:	46bd      	mov	sp, r7
 808385c:	bd80      	pop	{r7, pc}
 808385e:	bf00      	nop
 8083860:	40021000 	.word	0x40021000

08083864 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8083864:	b580      	push	{r7, lr}
 8083866:	b084      	sub	sp, #16
 8083868:	af00      	add	r7, sp, #0
 808386a:	6078      	str	r0, [r7, #4]
 808386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 808386e:	2300      	movs	r3, #0
 8083870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8083872:	4b74      	ldr	r3, [pc, #464]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083874:	68db      	ldr	r3, [r3, #12]
 8083876:	f003 0303 	and.w	r3, r3, #3
 808387a:	2b00      	cmp	r3, #0
 808387c:	d018      	beq.n	80838b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 808387e:	4b71      	ldr	r3, [pc, #452]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083880:	68db      	ldr	r3, [r3, #12]
 8083882:	f003 0203 	and.w	r2, r3, #3
 8083886:	687b      	ldr	r3, [r7, #4]
 8083888:	681b      	ldr	r3, [r3, #0]
 808388a:	429a      	cmp	r2, r3
 808388c:	d10d      	bne.n	80838aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 808388e:	687b      	ldr	r3, [r7, #4]
 8083890:	681b      	ldr	r3, [r3, #0]
       ||
 8083892:	2b00      	cmp	r3, #0
 8083894:	d009      	beq.n	80838aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8083896:	4b6b      	ldr	r3, [pc, #428]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083898:	68db      	ldr	r3, [r3, #12]
 808389a:	091b      	lsrs	r3, r3, #4
 808389c:	f003 0307 	and.w	r3, r3, #7
 80838a0:	1c5a      	adds	r2, r3, #1
 80838a2:	687b      	ldr	r3, [r7, #4]
 80838a4:	685b      	ldr	r3, [r3, #4]
       ||
 80838a6:	429a      	cmp	r2, r3
 80838a8:	d047      	beq.n	808393a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80838aa:	2301      	movs	r3, #1
 80838ac:	73fb      	strb	r3, [r7, #15]
 80838ae:	e044      	b.n	808393a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80838b0:	687b      	ldr	r3, [r7, #4]
 80838b2:	681b      	ldr	r3, [r3, #0]
 80838b4:	2b03      	cmp	r3, #3
 80838b6:	d018      	beq.n	80838ea <RCCEx_PLLSAI1_Config+0x86>
 80838b8:	2b03      	cmp	r3, #3
 80838ba:	d825      	bhi.n	8083908 <RCCEx_PLLSAI1_Config+0xa4>
 80838bc:	2b01      	cmp	r3, #1
 80838be:	d002      	beq.n	80838c6 <RCCEx_PLLSAI1_Config+0x62>
 80838c0:	2b02      	cmp	r3, #2
 80838c2:	d009      	beq.n	80838d8 <RCCEx_PLLSAI1_Config+0x74>
 80838c4:	e020      	b.n	8083908 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80838c6:	4b5f      	ldr	r3, [pc, #380]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80838c8:	681b      	ldr	r3, [r3, #0]
 80838ca:	f003 0302 	and.w	r3, r3, #2
 80838ce:	2b00      	cmp	r3, #0
 80838d0:	d11d      	bne.n	808390e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80838d2:	2301      	movs	r3, #1
 80838d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80838d6:	e01a      	b.n	808390e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80838d8:	4b5a      	ldr	r3, [pc, #360]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80838da:	681b      	ldr	r3, [r3, #0]
 80838dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80838e0:	2b00      	cmp	r3, #0
 80838e2:	d116      	bne.n	8083912 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80838e4:	2301      	movs	r3, #1
 80838e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80838e8:	e013      	b.n	8083912 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80838ea:	4b56      	ldr	r3, [pc, #344]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80838ec:	681b      	ldr	r3, [r3, #0]
 80838ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80838f2:	2b00      	cmp	r3, #0
 80838f4:	d10f      	bne.n	8083916 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80838f6:	4b53      	ldr	r3, [pc, #332]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80838f8:	681b      	ldr	r3, [r3, #0]
 80838fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80838fe:	2b00      	cmp	r3, #0
 8083900:	d109      	bne.n	8083916 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8083902:	2301      	movs	r3, #1
 8083904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8083906:	e006      	b.n	8083916 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8083908:	2301      	movs	r3, #1
 808390a:	73fb      	strb	r3, [r7, #15]
      break;
 808390c:	e004      	b.n	8083918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 808390e:	bf00      	nop
 8083910:	e002      	b.n	8083918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8083912:	bf00      	nop
 8083914:	e000      	b.n	8083918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8083916:	bf00      	nop
    }

    if(status == HAL_OK)
 8083918:	7bfb      	ldrb	r3, [r7, #15]
 808391a:	2b00      	cmp	r3, #0
 808391c:	d10d      	bne.n	808393a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 808391e:	4b49      	ldr	r3, [pc, #292]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083920:	68db      	ldr	r3, [r3, #12]
 8083922:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8083926:	687b      	ldr	r3, [r7, #4]
 8083928:	6819      	ldr	r1, [r3, #0]
 808392a:	687b      	ldr	r3, [r7, #4]
 808392c:	685b      	ldr	r3, [r3, #4]
 808392e:	3b01      	subs	r3, #1
 8083930:	011b      	lsls	r3, r3, #4
 8083932:	430b      	orrs	r3, r1
 8083934:	4943      	ldr	r1, [pc, #268]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083936:	4313      	orrs	r3, r2
 8083938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 808393a:	7bfb      	ldrb	r3, [r7, #15]
 808393c:	2b00      	cmp	r3, #0
 808393e:	d17c      	bne.n	8083a3a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8083940:	4b40      	ldr	r3, [pc, #256]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083942:	681b      	ldr	r3, [r3, #0]
 8083944:	4a3f      	ldr	r2, [pc, #252]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083946:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 808394a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 808394c:	f7fd fdec 	bl	8081528 <HAL_GetTick>
 8083950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8083952:	e009      	b.n	8083968 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8083954:	f7fd fde8 	bl	8081528 <HAL_GetTick>
 8083958:	4602      	mov	r2, r0
 808395a:	68bb      	ldr	r3, [r7, #8]
 808395c:	1ad3      	subs	r3, r2, r3
 808395e:	2b02      	cmp	r3, #2
 8083960:	d902      	bls.n	8083968 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8083962:	2303      	movs	r3, #3
 8083964:	73fb      	strb	r3, [r7, #15]
        break;
 8083966:	e005      	b.n	8083974 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8083968:	4b36      	ldr	r3, [pc, #216]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 808396a:	681b      	ldr	r3, [r3, #0]
 808396c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8083970:	2b00      	cmp	r3, #0
 8083972:	d1ef      	bne.n	8083954 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8083974:	7bfb      	ldrb	r3, [r7, #15]
 8083976:	2b00      	cmp	r3, #0
 8083978:	d15f      	bne.n	8083a3a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 808397a:	683b      	ldr	r3, [r7, #0]
 808397c:	2b00      	cmp	r3, #0
 808397e:	d110      	bne.n	80839a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8083980:	4b30      	ldr	r3, [pc, #192]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083982:	691b      	ldr	r3, [r3, #16]
 8083984:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8083988:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 808398c:	687a      	ldr	r2, [r7, #4]
 808398e:	6892      	ldr	r2, [r2, #8]
 8083990:	0211      	lsls	r1, r2, #8
 8083992:	687a      	ldr	r2, [r7, #4]
 8083994:	68d2      	ldr	r2, [r2, #12]
 8083996:	06d2      	lsls	r2, r2, #27
 8083998:	430a      	orrs	r2, r1
 808399a:	492a      	ldr	r1, [pc, #168]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 808399c:	4313      	orrs	r3, r2
 808399e:	610b      	str	r3, [r1, #16]
 80839a0:	e027      	b.n	80839f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80839a2:	683b      	ldr	r3, [r7, #0]
 80839a4:	2b01      	cmp	r3, #1
 80839a6:	d112      	bne.n	80839ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80839a8:	4b26      	ldr	r3, [pc, #152]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80839aa:	691b      	ldr	r3, [r3, #16]
 80839ac:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80839b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80839b4:	687a      	ldr	r2, [r7, #4]
 80839b6:	6892      	ldr	r2, [r2, #8]
 80839b8:	0211      	lsls	r1, r2, #8
 80839ba:	687a      	ldr	r2, [r7, #4]
 80839bc:	6912      	ldr	r2, [r2, #16]
 80839be:	0852      	lsrs	r2, r2, #1
 80839c0:	3a01      	subs	r2, #1
 80839c2:	0552      	lsls	r2, r2, #21
 80839c4:	430a      	orrs	r2, r1
 80839c6:	491f      	ldr	r1, [pc, #124]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80839c8:	4313      	orrs	r3, r2
 80839ca:	610b      	str	r3, [r1, #16]
 80839cc:	e011      	b.n	80839f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80839ce:	4b1d      	ldr	r3, [pc, #116]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80839d0:	691b      	ldr	r3, [r3, #16]
 80839d2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80839d6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80839da:	687a      	ldr	r2, [r7, #4]
 80839dc:	6892      	ldr	r2, [r2, #8]
 80839de:	0211      	lsls	r1, r2, #8
 80839e0:	687a      	ldr	r2, [r7, #4]
 80839e2:	6952      	ldr	r2, [r2, #20]
 80839e4:	0852      	lsrs	r2, r2, #1
 80839e6:	3a01      	subs	r2, #1
 80839e8:	0652      	lsls	r2, r2, #25
 80839ea:	430a      	orrs	r2, r1
 80839ec:	4915      	ldr	r1, [pc, #84]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80839ee:	4313      	orrs	r3, r2
 80839f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80839f2:	4b14      	ldr	r3, [pc, #80]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80839f4:	681b      	ldr	r3, [r3, #0]
 80839f6:	4a13      	ldr	r2, [pc, #76]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80839f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80839fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80839fe:	f7fd fd93 	bl	8081528 <HAL_GetTick>
 8083a02:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8083a04:	e009      	b.n	8083a1a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8083a06:	f7fd fd8f 	bl	8081528 <HAL_GetTick>
 8083a0a:	4602      	mov	r2, r0
 8083a0c:	68bb      	ldr	r3, [r7, #8]
 8083a0e:	1ad3      	subs	r3, r2, r3
 8083a10:	2b02      	cmp	r3, #2
 8083a12:	d902      	bls.n	8083a1a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8083a14:	2303      	movs	r3, #3
 8083a16:	73fb      	strb	r3, [r7, #15]
          break;
 8083a18:	e005      	b.n	8083a26 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8083a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083a1c:	681b      	ldr	r3, [r3, #0]
 8083a1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8083a22:	2b00      	cmp	r3, #0
 8083a24:	d0ef      	beq.n	8083a06 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8083a26:	7bfb      	ldrb	r3, [r7, #15]
 8083a28:	2b00      	cmp	r3, #0
 8083a2a:	d106      	bne.n	8083a3a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8083a2c:	4b05      	ldr	r3, [pc, #20]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083a2e:	691a      	ldr	r2, [r3, #16]
 8083a30:	687b      	ldr	r3, [r7, #4]
 8083a32:	699b      	ldr	r3, [r3, #24]
 8083a34:	4903      	ldr	r1, [pc, #12]	@ (8083a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8083a36:	4313      	orrs	r3, r2
 8083a38:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8083a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8083a3c:	4618      	mov	r0, r3
 8083a3e:	3710      	adds	r7, #16
 8083a40:	46bd      	mov	sp, r7
 8083a42:	bd80      	pop	{r7, pc}
 8083a44:	40021000 	.word	0x40021000

08083a48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8083a48:	b580      	push	{r7, lr}
 8083a4a:	b084      	sub	sp, #16
 8083a4c:	af00      	add	r7, sp, #0
 8083a4e:	6078      	str	r0, [r7, #4]
 8083a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8083a52:	2300      	movs	r3, #0
 8083a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8083a56:	4b69      	ldr	r3, [pc, #420]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083a58:	68db      	ldr	r3, [r3, #12]
 8083a5a:	f003 0303 	and.w	r3, r3, #3
 8083a5e:	2b00      	cmp	r3, #0
 8083a60:	d018      	beq.n	8083a94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8083a62:	4b66      	ldr	r3, [pc, #408]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083a64:	68db      	ldr	r3, [r3, #12]
 8083a66:	f003 0203 	and.w	r2, r3, #3
 8083a6a:	687b      	ldr	r3, [r7, #4]
 8083a6c:	681b      	ldr	r3, [r3, #0]
 8083a6e:	429a      	cmp	r2, r3
 8083a70:	d10d      	bne.n	8083a8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8083a72:	687b      	ldr	r3, [r7, #4]
 8083a74:	681b      	ldr	r3, [r3, #0]
       ||
 8083a76:	2b00      	cmp	r3, #0
 8083a78:	d009      	beq.n	8083a8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8083a7a:	4b60      	ldr	r3, [pc, #384]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083a7c:	68db      	ldr	r3, [r3, #12]
 8083a7e:	091b      	lsrs	r3, r3, #4
 8083a80:	f003 0307 	and.w	r3, r3, #7
 8083a84:	1c5a      	adds	r2, r3, #1
 8083a86:	687b      	ldr	r3, [r7, #4]
 8083a88:	685b      	ldr	r3, [r3, #4]
       ||
 8083a8a:	429a      	cmp	r2, r3
 8083a8c:	d047      	beq.n	8083b1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8083a8e:	2301      	movs	r3, #1
 8083a90:	73fb      	strb	r3, [r7, #15]
 8083a92:	e044      	b.n	8083b1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8083a94:	687b      	ldr	r3, [r7, #4]
 8083a96:	681b      	ldr	r3, [r3, #0]
 8083a98:	2b03      	cmp	r3, #3
 8083a9a:	d018      	beq.n	8083ace <RCCEx_PLLSAI2_Config+0x86>
 8083a9c:	2b03      	cmp	r3, #3
 8083a9e:	d825      	bhi.n	8083aec <RCCEx_PLLSAI2_Config+0xa4>
 8083aa0:	2b01      	cmp	r3, #1
 8083aa2:	d002      	beq.n	8083aaa <RCCEx_PLLSAI2_Config+0x62>
 8083aa4:	2b02      	cmp	r3, #2
 8083aa6:	d009      	beq.n	8083abc <RCCEx_PLLSAI2_Config+0x74>
 8083aa8:	e020      	b.n	8083aec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8083aaa:	4b54      	ldr	r3, [pc, #336]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083aac:	681b      	ldr	r3, [r3, #0]
 8083aae:	f003 0302 	and.w	r3, r3, #2
 8083ab2:	2b00      	cmp	r3, #0
 8083ab4:	d11d      	bne.n	8083af2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8083ab6:	2301      	movs	r3, #1
 8083ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8083aba:	e01a      	b.n	8083af2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8083abc:	4b4f      	ldr	r3, [pc, #316]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083abe:	681b      	ldr	r3, [r3, #0]
 8083ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8083ac4:	2b00      	cmp	r3, #0
 8083ac6:	d116      	bne.n	8083af6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8083ac8:	2301      	movs	r3, #1
 8083aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8083acc:	e013      	b.n	8083af6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8083ace:	4b4b      	ldr	r3, [pc, #300]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083ad0:	681b      	ldr	r3, [r3, #0]
 8083ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8083ad6:	2b00      	cmp	r3, #0
 8083ad8:	d10f      	bne.n	8083afa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8083ada:	4b48      	ldr	r3, [pc, #288]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083adc:	681b      	ldr	r3, [r3, #0]
 8083ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8083ae2:	2b00      	cmp	r3, #0
 8083ae4:	d109      	bne.n	8083afa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8083ae6:	2301      	movs	r3, #1
 8083ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8083aea:	e006      	b.n	8083afa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8083aec:	2301      	movs	r3, #1
 8083aee:	73fb      	strb	r3, [r7, #15]
      break;
 8083af0:	e004      	b.n	8083afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8083af2:	bf00      	nop
 8083af4:	e002      	b.n	8083afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8083af6:	bf00      	nop
 8083af8:	e000      	b.n	8083afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8083afa:	bf00      	nop
    }

    if(status == HAL_OK)
 8083afc:	7bfb      	ldrb	r3, [r7, #15]
 8083afe:	2b00      	cmp	r3, #0
 8083b00:	d10d      	bne.n	8083b1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8083b02:	4b3e      	ldr	r3, [pc, #248]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083b04:	68db      	ldr	r3, [r3, #12]
 8083b06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8083b0a:	687b      	ldr	r3, [r7, #4]
 8083b0c:	6819      	ldr	r1, [r3, #0]
 8083b0e:	687b      	ldr	r3, [r7, #4]
 8083b10:	685b      	ldr	r3, [r3, #4]
 8083b12:	3b01      	subs	r3, #1
 8083b14:	011b      	lsls	r3, r3, #4
 8083b16:	430b      	orrs	r3, r1
 8083b18:	4938      	ldr	r1, [pc, #224]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083b1a:	4313      	orrs	r3, r2
 8083b1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8083b1e:	7bfb      	ldrb	r3, [r7, #15]
 8083b20:	2b00      	cmp	r3, #0
 8083b22:	d166      	bne.n	8083bf2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8083b24:	4b35      	ldr	r3, [pc, #212]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083b26:	681b      	ldr	r3, [r3, #0]
 8083b28:	4a34      	ldr	r2, [pc, #208]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8083b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8083b30:	f7fd fcfa 	bl	8081528 <HAL_GetTick>
 8083b34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8083b36:	e009      	b.n	8083b4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8083b38:	f7fd fcf6 	bl	8081528 <HAL_GetTick>
 8083b3c:	4602      	mov	r2, r0
 8083b3e:	68bb      	ldr	r3, [r7, #8]
 8083b40:	1ad3      	subs	r3, r2, r3
 8083b42:	2b02      	cmp	r3, #2
 8083b44:	d902      	bls.n	8083b4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8083b46:	2303      	movs	r3, #3
 8083b48:	73fb      	strb	r3, [r7, #15]
        break;
 8083b4a:	e005      	b.n	8083b58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8083b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083b4e:	681b      	ldr	r3, [r3, #0]
 8083b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8083b54:	2b00      	cmp	r3, #0
 8083b56:	d1ef      	bne.n	8083b38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8083b58:	7bfb      	ldrb	r3, [r7, #15]
 8083b5a:	2b00      	cmp	r3, #0
 8083b5c:	d149      	bne.n	8083bf2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8083b5e:	683b      	ldr	r3, [r7, #0]
 8083b60:	2b00      	cmp	r3, #0
 8083b62:	d110      	bne.n	8083b86 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8083b64:	4b25      	ldr	r3, [pc, #148]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083b66:	695b      	ldr	r3, [r3, #20]
 8083b68:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8083b6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8083b70:	687a      	ldr	r2, [r7, #4]
 8083b72:	6892      	ldr	r2, [r2, #8]
 8083b74:	0211      	lsls	r1, r2, #8
 8083b76:	687a      	ldr	r2, [r7, #4]
 8083b78:	68d2      	ldr	r2, [r2, #12]
 8083b7a:	06d2      	lsls	r2, r2, #27
 8083b7c:	430a      	orrs	r2, r1
 8083b7e:	491f      	ldr	r1, [pc, #124]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083b80:	4313      	orrs	r3, r2
 8083b82:	614b      	str	r3, [r1, #20]
 8083b84:	e011      	b.n	8083baa <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8083b86:	4b1d      	ldr	r3, [pc, #116]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083b88:	695b      	ldr	r3, [r3, #20]
 8083b8a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8083b8e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8083b92:	687a      	ldr	r2, [r7, #4]
 8083b94:	6892      	ldr	r2, [r2, #8]
 8083b96:	0211      	lsls	r1, r2, #8
 8083b98:	687a      	ldr	r2, [r7, #4]
 8083b9a:	6912      	ldr	r2, [r2, #16]
 8083b9c:	0852      	lsrs	r2, r2, #1
 8083b9e:	3a01      	subs	r2, #1
 8083ba0:	0652      	lsls	r2, r2, #25
 8083ba2:	430a      	orrs	r2, r1
 8083ba4:	4915      	ldr	r1, [pc, #84]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083ba6:	4313      	orrs	r3, r2
 8083ba8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8083baa:	4b14      	ldr	r3, [pc, #80]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083bac:	681b      	ldr	r3, [r3, #0]
 8083bae:	4a13      	ldr	r2, [pc, #76]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8083bb4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8083bb6:	f7fd fcb7 	bl	8081528 <HAL_GetTick>
 8083bba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8083bbc:	e009      	b.n	8083bd2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8083bbe:	f7fd fcb3 	bl	8081528 <HAL_GetTick>
 8083bc2:	4602      	mov	r2, r0
 8083bc4:	68bb      	ldr	r3, [r7, #8]
 8083bc6:	1ad3      	subs	r3, r2, r3
 8083bc8:	2b02      	cmp	r3, #2
 8083bca:	d902      	bls.n	8083bd2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8083bcc:	2303      	movs	r3, #3
 8083bce:	73fb      	strb	r3, [r7, #15]
          break;
 8083bd0:	e005      	b.n	8083bde <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8083bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083bd4:	681b      	ldr	r3, [r3, #0]
 8083bd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8083bda:	2b00      	cmp	r3, #0
 8083bdc:	d0ef      	beq.n	8083bbe <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8083bde:	7bfb      	ldrb	r3, [r7, #15]
 8083be0:	2b00      	cmp	r3, #0
 8083be2:	d106      	bne.n	8083bf2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8083be4:	4b05      	ldr	r3, [pc, #20]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083be6:	695a      	ldr	r2, [r3, #20]
 8083be8:	687b      	ldr	r3, [r7, #4]
 8083bea:	695b      	ldr	r3, [r3, #20]
 8083bec:	4903      	ldr	r1, [pc, #12]	@ (8083bfc <RCCEx_PLLSAI2_Config+0x1b4>)
 8083bee:	4313      	orrs	r3, r2
 8083bf0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8083bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8083bf4:	4618      	mov	r0, r3
 8083bf6:	3710      	adds	r7, #16
 8083bf8:	46bd      	mov	sp, r7
 8083bfa:	bd80      	pop	{r7, pc}
 8083bfc:	40021000 	.word	0x40021000

08083c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8083c00:	b580      	push	{r7, lr}
 8083c02:	b082      	sub	sp, #8
 8083c04:	af00      	add	r7, sp, #0
 8083c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8083c08:	687b      	ldr	r3, [r7, #4]
 8083c0a:	2b00      	cmp	r3, #0
 8083c0c:	d101      	bne.n	8083c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8083c0e:	2301      	movs	r3, #1
 8083c10:	e040      	b.n	8083c94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8083c12:	687b      	ldr	r3, [r7, #4]
 8083c14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8083c16:	2b00      	cmp	r3, #0
 8083c18:	d106      	bne.n	8083c28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8083c1a:	687b      	ldr	r3, [r7, #4]
 8083c1c:	2200      	movs	r2, #0
 8083c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8083c22:	6878      	ldr	r0, [r7, #4]
 8083c24:	f7fd f91c 	bl	8080e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8083c28:	687b      	ldr	r3, [r7, #4]
 8083c2a:	2224      	movs	r2, #36	@ 0x24
 8083c2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8083c2e:	687b      	ldr	r3, [r7, #4]
 8083c30:	681b      	ldr	r3, [r3, #0]
 8083c32:	681a      	ldr	r2, [r3, #0]
 8083c34:	687b      	ldr	r3, [r7, #4]
 8083c36:	681b      	ldr	r3, [r3, #0]
 8083c38:	f022 0201 	bic.w	r2, r2, #1
 8083c3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8083c3e:	687b      	ldr	r3, [r7, #4]
 8083c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8083c42:	2b00      	cmp	r3, #0
 8083c44:	d002      	beq.n	8083c4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8083c46:	6878      	ldr	r0, [r7, #4]
 8083c48:	f000 fc32 	bl	80844b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8083c4c:	6878      	ldr	r0, [r7, #4]
 8083c4e:	f000 f977 	bl	8083f40 <UART_SetConfig>
 8083c52:	4603      	mov	r3, r0
 8083c54:	2b01      	cmp	r3, #1
 8083c56:	d101      	bne.n	8083c5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8083c58:	2301      	movs	r3, #1
 8083c5a:	e01b      	b.n	8083c94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8083c5c:	687b      	ldr	r3, [r7, #4]
 8083c5e:	681b      	ldr	r3, [r3, #0]
 8083c60:	685a      	ldr	r2, [r3, #4]
 8083c62:	687b      	ldr	r3, [r7, #4]
 8083c64:	681b      	ldr	r3, [r3, #0]
 8083c66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8083c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8083c6c:	687b      	ldr	r3, [r7, #4]
 8083c6e:	681b      	ldr	r3, [r3, #0]
 8083c70:	689a      	ldr	r2, [r3, #8]
 8083c72:	687b      	ldr	r3, [r7, #4]
 8083c74:	681b      	ldr	r3, [r3, #0]
 8083c76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8083c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8083c7c:	687b      	ldr	r3, [r7, #4]
 8083c7e:	681b      	ldr	r3, [r3, #0]
 8083c80:	681a      	ldr	r2, [r3, #0]
 8083c82:	687b      	ldr	r3, [r7, #4]
 8083c84:	681b      	ldr	r3, [r3, #0]
 8083c86:	f042 0201 	orr.w	r2, r2, #1
 8083c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8083c8c:	6878      	ldr	r0, [r7, #4]
 8083c8e:	f000 fcb1 	bl	80845f4 <UART_CheckIdleState>
 8083c92:	4603      	mov	r3, r0
}
 8083c94:	4618      	mov	r0, r3
 8083c96:	3708      	adds	r7, #8
 8083c98:	46bd      	mov	sp, r7
 8083c9a:	bd80      	pop	{r7, pc}

08083c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8083c9c:	b580      	push	{r7, lr}
 8083c9e:	b08a      	sub	sp, #40	@ 0x28
 8083ca0:	af02      	add	r7, sp, #8
 8083ca2:	60f8      	str	r0, [r7, #12]
 8083ca4:	60b9      	str	r1, [r7, #8]
 8083ca6:	603b      	str	r3, [r7, #0]
 8083ca8:	4613      	mov	r3, r2
 8083caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8083cac:	68fb      	ldr	r3, [r7, #12]
 8083cae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8083cb0:	2b20      	cmp	r3, #32
 8083cb2:	d177      	bne.n	8083da4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8083cb4:	68bb      	ldr	r3, [r7, #8]
 8083cb6:	2b00      	cmp	r3, #0
 8083cb8:	d002      	beq.n	8083cc0 <HAL_UART_Transmit+0x24>
 8083cba:	88fb      	ldrh	r3, [r7, #6]
 8083cbc:	2b00      	cmp	r3, #0
 8083cbe:	d101      	bne.n	8083cc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8083cc0:	2301      	movs	r3, #1
 8083cc2:	e070      	b.n	8083da6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8083cc4:	68fb      	ldr	r3, [r7, #12]
 8083cc6:	2200      	movs	r2, #0
 8083cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8083ccc:	68fb      	ldr	r3, [r7, #12]
 8083cce:	2221      	movs	r2, #33	@ 0x21
 8083cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8083cd2:	f7fd fc29 	bl	8081528 <HAL_GetTick>
 8083cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8083cd8:	68fb      	ldr	r3, [r7, #12]
 8083cda:	88fa      	ldrh	r2, [r7, #6]
 8083cdc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8083ce0:	68fb      	ldr	r3, [r7, #12]
 8083ce2:	88fa      	ldrh	r2, [r7, #6]
 8083ce4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8083ce8:	68fb      	ldr	r3, [r7, #12]
 8083cea:	689b      	ldr	r3, [r3, #8]
 8083cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8083cf0:	d108      	bne.n	8083d04 <HAL_UART_Transmit+0x68>
 8083cf2:	68fb      	ldr	r3, [r7, #12]
 8083cf4:	691b      	ldr	r3, [r3, #16]
 8083cf6:	2b00      	cmp	r3, #0
 8083cf8:	d104      	bne.n	8083d04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8083cfa:	2300      	movs	r3, #0
 8083cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8083cfe:	68bb      	ldr	r3, [r7, #8]
 8083d00:	61bb      	str	r3, [r7, #24]
 8083d02:	e003      	b.n	8083d0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8083d04:	68bb      	ldr	r3, [r7, #8]
 8083d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8083d08:	2300      	movs	r3, #0
 8083d0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8083d0c:	e02f      	b.n	8083d6e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8083d0e:	683b      	ldr	r3, [r7, #0]
 8083d10:	9300      	str	r3, [sp, #0]
 8083d12:	697b      	ldr	r3, [r7, #20]
 8083d14:	2200      	movs	r2, #0
 8083d16:	2180      	movs	r1, #128	@ 0x80
 8083d18:	68f8      	ldr	r0, [r7, #12]
 8083d1a:	f000 fd13 	bl	8084744 <UART_WaitOnFlagUntilTimeout>
 8083d1e:	4603      	mov	r3, r0
 8083d20:	2b00      	cmp	r3, #0
 8083d22:	d004      	beq.n	8083d2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8083d24:	68fb      	ldr	r3, [r7, #12]
 8083d26:	2220      	movs	r2, #32
 8083d28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8083d2a:	2303      	movs	r3, #3
 8083d2c:	e03b      	b.n	8083da6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8083d2e:	69fb      	ldr	r3, [r7, #28]
 8083d30:	2b00      	cmp	r3, #0
 8083d32:	d10b      	bne.n	8083d4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8083d34:	69bb      	ldr	r3, [r7, #24]
 8083d36:	881a      	ldrh	r2, [r3, #0]
 8083d38:	68fb      	ldr	r3, [r7, #12]
 8083d3a:	681b      	ldr	r3, [r3, #0]
 8083d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8083d40:	b292      	uxth	r2, r2
 8083d42:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8083d44:	69bb      	ldr	r3, [r7, #24]
 8083d46:	3302      	adds	r3, #2
 8083d48:	61bb      	str	r3, [r7, #24]
 8083d4a:	e007      	b.n	8083d5c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8083d4c:	69fb      	ldr	r3, [r7, #28]
 8083d4e:	781a      	ldrb	r2, [r3, #0]
 8083d50:	68fb      	ldr	r3, [r7, #12]
 8083d52:	681b      	ldr	r3, [r3, #0]
 8083d54:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8083d56:	69fb      	ldr	r3, [r7, #28]
 8083d58:	3301      	adds	r3, #1
 8083d5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8083d5c:	68fb      	ldr	r3, [r7, #12]
 8083d5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8083d62:	b29b      	uxth	r3, r3
 8083d64:	3b01      	subs	r3, #1
 8083d66:	b29a      	uxth	r2, r3
 8083d68:	68fb      	ldr	r3, [r7, #12]
 8083d6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8083d6e:	68fb      	ldr	r3, [r7, #12]
 8083d70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8083d74:	b29b      	uxth	r3, r3
 8083d76:	2b00      	cmp	r3, #0
 8083d78:	d1c9      	bne.n	8083d0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8083d7a:	683b      	ldr	r3, [r7, #0]
 8083d7c:	9300      	str	r3, [sp, #0]
 8083d7e:	697b      	ldr	r3, [r7, #20]
 8083d80:	2200      	movs	r2, #0
 8083d82:	2140      	movs	r1, #64	@ 0x40
 8083d84:	68f8      	ldr	r0, [r7, #12]
 8083d86:	f000 fcdd 	bl	8084744 <UART_WaitOnFlagUntilTimeout>
 8083d8a:	4603      	mov	r3, r0
 8083d8c:	2b00      	cmp	r3, #0
 8083d8e:	d004      	beq.n	8083d9a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8083d90:	68fb      	ldr	r3, [r7, #12]
 8083d92:	2220      	movs	r2, #32
 8083d94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8083d96:	2303      	movs	r3, #3
 8083d98:	e005      	b.n	8083da6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8083d9a:	68fb      	ldr	r3, [r7, #12]
 8083d9c:	2220      	movs	r2, #32
 8083d9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8083da0:	2300      	movs	r3, #0
 8083da2:	e000      	b.n	8083da6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8083da4:	2302      	movs	r3, #2
  }
}
 8083da6:	4618      	mov	r0, r3
 8083da8:	3720      	adds	r7, #32
 8083daa:	46bd      	mov	sp, r7
 8083dac:	bd80      	pop	{r7, pc}

08083dae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8083dae:	b580      	push	{r7, lr}
 8083db0:	b08a      	sub	sp, #40	@ 0x28
 8083db2:	af02      	add	r7, sp, #8
 8083db4:	60f8      	str	r0, [r7, #12]
 8083db6:	60b9      	str	r1, [r7, #8]
 8083db8:	603b      	str	r3, [r7, #0]
 8083dba:	4613      	mov	r3, r2
 8083dbc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8083dbe:	68fb      	ldr	r3, [r7, #12]
 8083dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8083dc4:	2b20      	cmp	r3, #32
 8083dc6:	f040 80b6 	bne.w	8083f36 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8083dca:	68bb      	ldr	r3, [r7, #8]
 8083dcc:	2b00      	cmp	r3, #0
 8083dce:	d002      	beq.n	8083dd6 <HAL_UART_Receive+0x28>
 8083dd0:	88fb      	ldrh	r3, [r7, #6]
 8083dd2:	2b00      	cmp	r3, #0
 8083dd4:	d101      	bne.n	8083dda <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8083dd6:	2301      	movs	r3, #1
 8083dd8:	e0ae      	b.n	8083f38 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8083dda:	68fb      	ldr	r3, [r7, #12]
 8083ddc:	2200      	movs	r2, #0
 8083dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8083de2:	68fb      	ldr	r3, [r7, #12]
 8083de4:	2222      	movs	r2, #34	@ 0x22
 8083de6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8083dea:	68fb      	ldr	r3, [r7, #12]
 8083dec:	2200      	movs	r2, #0
 8083dee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8083df0:	f7fd fb9a 	bl	8081528 <HAL_GetTick>
 8083df4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8083df6:	68fb      	ldr	r3, [r7, #12]
 8083df8:	88fa      	ldrh	r2, [r7, #6]
 8083dfa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8083dfe:	68fb      	ldr	r3, [r7, #12]
 8083e00:	88fa      	ldrh	r2, [r7, #6]
 8083e02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8083e06:	68fb      	ldr	r3, [r7, #12]
 8083e08:	689b      	ldr	r3, [r3, #8]
 8083e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8083e0e:	d10e      	bne.n	8083e2e <HAL_UART_Receive+0x80>
 8083e10:	68fb      	ldr	r3, [r7, #12]
 8083e12:	691b      	ldr	r3, [r3, #16]
 8083e14:	2b00      	cmp	r3, #0
 8083e16:	d105      	bne.n	8083e24 <HAL_UART_Receive+0x76>
 8083e18:	68fb      	ldr	r3, [r7, #12]
 8083e1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8083e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8083e22:	e02d      	b.n	8083e80 <HAL_UART_Receive+0xd2>
 8083e24:	68fb      	ldr	r3, [r7, #12]
 8083e26:	22ff      	movs	r2, #255	@ 0xff
 8083e28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8083e2c:	e028      	b.n	8083e80 <HAL_UART_Receive+0xd2>
 8083e2e:	68fb      	ldr	r3, [r7, #12]
 8083e30:	689b      	ldr	r3, [r3, #8]
 8083e32:	2b00      	cmp	r3, #0
 8083e34:	d10d      	bne.n	8083e52 <HAL_UART_Receive+0xa4>
 8083e36:	68fb      	ldr	r3, [r7, #12]
 8083e38:	691b      	ldr	r3, [r3, #16]
 8083e3a:	2b00      	cmp	r3, #0
 8083e3c:	d104      	bne.n	8083e48 <HAL_UART_Receive+0x9a>
 8083e3e:	68fb      	ldr	r3, [r7, #12]
 8083e40:	22ff      	movs	r2, #255	@ 0xff
 8083e42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8083e46:	e01b      	b.n	8083e80 <HAL_UART_Receive+0xd2>
 8083e48:	68fb      	ldr	r3, [r7, #12]
 8083e4a:	227f      	movs	r2, #127	@ 0x7f
 8083e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8083e50:	e016      	b.n	8083e80 <HAL_UART_Receive+0xd2>
 8083e52:	68fb      	ldr	r3, [r7, #12]
 8083e54:	689b      	ldr	r3, [r3, #8]
 8083e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8083e5a:	d10d      	bne.n	8083e78 <HAL_UART_Receive+0xca>
 8083e5c:	68fb      	ldr	r3, [r7, #12]
 8083e5e:	691b      	ldr	r3, [r3, #16]
 8083e60:	2b00      	cmp	r3, #0
 8083e62:	d104      	bne.n	8083e6e <HAL_UART_Receive+0xc0>
 8083e64:	68fb      	ldr	r3, [r7, #12]
 8083e66:	227f      	movs	r2, #127	@ 0x7f
 8083e68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8083e6c:	e008      	b.n	8083e80 <HAL_UART_Receive+0xd2>
 8083e6e:	68fb      	ldr	r3, [r7, #12]
 8083e70:	223f      	movs	r2, #63	@ 0x3f
 8083e72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8083e76:	e003      	b.n	8083e80 <HAL_UART_Receive+0xd2>
 8083e78:	68fb      	ldr	r3, [r7, #12]
 8083e7a:	2200      	movs	r2, #0
 8083e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8083e80:	68fb      	ldr	r3, [r7, #12]
 8083e82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8083e86:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8083e88:	68fb      	ldr	r3, [r7, #12]
 8083e8a:	689b      	ldr	r3, [r3, #8]
 8083e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8083e90:	d108      	bne.n	8083ea4 <HAL_UART_Receive+0xf6>
 8083e92:	68fb      	ldr	r3, [r7, #12]
 8083e94:	691b      	ldr	r3, [r3, #16]
 8083e96:	2b00      	cmp	r3, #0
 8083e98:	d104      	bne.n	8083ea4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8083e9a:	2300      	movs	r3, #0
 8083e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8083e9e:	68bb      	ldr	r3, [r7, #8]
 8083ea0:	61bb      	str	r3, [r7, #24]
 8083ea2:	e003      	b.n	8083eac <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8083ea4:	68bb      	ldr	r3, [r7, #8]
 8083ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8083ea8:	2300      	movs	r3, #0
 8083eaa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8083eac:	e037      	b.n	8083f1e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8083eae:	683b      	ldr	r3, [r7, #0]
 8083eb0:	9300      	str	r3, [sp, #0]
 8083eb2:	697b      	ldr	r3, [r7, #20]
 8083eb4:	2200      	movs	r2, #0
 8083eb6:	2120      	movs	r1, #32
 8083eb8:	68f8      	ldr	r0, [r7, #12]
 8083eba:	f000 fc43 	bl	8084744 <UART_WaitOnFlagUntilTimeout>
 8083ebe:	4603      	mov	r3, r0
 8083ec0:	2b00      	cmp	r3, #0
 8083ec2:	d005      	beq.n	8083ed0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8083ec4:	68fb      	ldr	r3, [r7, #12]
 8083ec6:	2220      	movs	r2, #32
 8083ec8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8083ecc:	2303      	movs	r3, #3
 8083ece:	e033      	b.n	8083f38 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8083ed0:	69fb      	ldr	r3, [r7, #28]
 8083ed2:	2b00      	cmp	r3, #0
 8083ed4:	d10c      	bne.n	8083ef0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8083ed6:	68fb      	ldr	r3, [r7, #12]
 8083ed8:	681b      	ldr	r3, [r3, #0]
 8083eda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8083edc:	b29a      	uxth	r2, r3
 8083ede:	8a7b      	ldrh	r3, [r7, #18]
 8083ee0:	4013      	ands	r3, r2
 8083ee2:	b29a      	uxth	r2, r3
 8083ee4:	69bb      	ldr	r3, [r7, #24]
 8083ee6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8083ee8:	69bb      	ldr	r3, [r7, #24]
 8083eea:	3302      	adds	r3, #2
 8083eec:	61bb      	str	r3, [r7, #24]
 8083eee:	e00d      	b.n	8083f0c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8083ef0:	68fb      	ldr	r3, [r7, #12]
 8083ef2:	681b      	ldr	r3, [r3, #0]
 8083ef4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8083ef6:	b29b      	uxth	r3, r3
 8083ef8:	b2da      	uxtb	r2, r3
 8083efa:	8a7b      	ldrh	r3, [r7, #18]
 8083efc:	b2db      	uxtb	r3, r3
 8083efe:	4013      	ands	r3, r2
 8083f00:	b2da      	uxtb	r2, r3
 8083f02:	69fb      	ldr	r3, [r7, #28]
 8083f04:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8083f06:	69fb      	ldr	r3, [r7, #28]
 8083f08:	3301      	adds	r3, #1
 8083f0a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8083f0c:	68fb      	ldr	r3, [r7, #12]
 8083f0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8083f12:	b29b      	uxth	r3, r3
 8083f14:	3b01      	subs	r3, #1
 8083f16:	b29a      	uxth	r2, r3
 8083f18:	68fb      	ldr	r3, [r7, #12]
 8083f1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8083f1e:	68fb      	ldr	r3, [r7, #12]
 8083f20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8083f24:	b29b      	uxth	r3, r3
 8083f26:	2b00      	cmp	r3, #0
 8083f28:	d1c1      	bne.n	8083eae <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8083f2a:	68fb      	ldr	r3, [r7, #12]
 8083f2c:	2220      	movs	r2, #32
 8083f2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8083f32:	2300      	movs	r3, #0
 8083f34:	e000      	b.n	8083f38 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8083f36:	2302      	movs	r3, #2
  }
}
 8083f38:	4618      	mov	r0, r3
 8083f3a:	3720      	adds	r7, #32
 8083f3c:	46bd      	mov	sp, r7
 8083f3e:	bd80      	pop	{r7, pc}

08083f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8083f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8083f44:	b08a      	sub	sp, #40	@ 0x28
 8083f46:	af00      	add	r7, sp, #0
 8083f48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8083f4a:	2300      	movs	r3, #0
 8083f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8083f50:	68fb      	ldr	r3, [r7, #12]
 8083f52:	689a      	ldr	r2, [r3, #8]
 8083f54:	68fb      	ldr	r3, [r7, #12]
 8083f56:	691b      	ldr	r3, [r3, #16]
 8083f58:	431a      	orrs	r2, r3
 8083f5a:	68fb      	ldr	r3, [r7, #12]
 8083f5c:	695b      	ldr	r3, [r3, #20]
 8083f5e:	431a      	orrs	r2, r3
 8083f60:	68fb      	ldr	r3, [r7, #12]
 8083f62:	69db      	ldr	r3, [r3, #28]
 8083f64:	4313      	orrs	r3, r2
 8083f66:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8083f68:	68fb      	ldr	r3, [r7, #12]
 8083f6a:	681b      	ldr	r3, [r3, #0]
 8083f6c:	681a      	ldr	r2, [r3, #0]
 8083f6e:	4ba4      	ldr	r3, [pc, #656]	@ (8084200 <UART_SetConfig+0x2c0>)
 8083f70:	4013      	ands	r3, r2
 8083f72:	68fa      	ldr	r2, [r7, #12]
 8083f74:	6812      	ldr	r2, [r2, #0]
 8083f76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8083f78:	430b      	orrs	r3, r1
 8083f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8083f7c:	68fb      	ldr	r3, [r7, #12]
 8083f7e:	681b      	ldr	r3, [r3, #0]
 8083f80:	685b      	ldr	r3, [r3, #4]
 8083f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8083f86:	68fb      	ldr	r3, [r7, #12]
 8083f88:	68da      	ldr	r2, [r3, #12]
 8083f8a:	68fb      	ldr	r3, [r7, #12]
 8083f8c:	681b      	ldr	r3, [r3, #0]
 8083f8e:	430a      	orrs	r2, r1
 8083f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8083f92:	68fb      	ldr	r3, [r7, #12]
 8083f94:	699b      	ldr	r3, [r3, #24]
 8083f96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8083f98:	68fb      	ldr	r3, [r7, #12]
 8083f9a:	681b      	ldr	r3, [r3, #0]
 8083f9c:	4a99      	ldr	r2, [pc, #612]	@ (8084204 <UART_SetConfig+0x2c4>)
 8083f9e:	4293      	cmp	r3, r2
 8083fa0:	d004      	beq.n	8083fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8083fa2:	68fb      	ldr	r3, [r7, #12]
 8083fa4:	6a1b      	ldr	r3, [r3, #32]
 8083fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8083fa8:	4313      	orrs	r3, r2
 8083faa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8083fac:	68fb      	ldr	r3, [r7, #12]
 8083fae:	681b      	ldr	r3, [r3, #0]
 8083fb0:	689b      	ldr	r3, [r3, #8]
 8083fb2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8083fb6:	68fb      	ldr	r3, [r7, #12]
 8083fb8:	681b      	ldr	r3, [r3, #0]
 8083fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8083fbc:	430a      	orrs	r2, r1
 8083fbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8083fc0:	68fb      	ldr	r3, [r7, #12]
 8083fc2:	681b      	ldr	r3, [r3, #0]
 8083fc4:	4a90      	ldr	r2, [pc, #576]	@ (8084208 <UART_SetConfig+0x2c8>)
 8083fc6:	4293      	cmp	r3, r2
 8083fc8:	d126      	bne.n	8084018 <UART_SetConfig+0xd8>
 8083fca:	4b90      	ldr	r3, [pc, #576]	@ (808420c <UART_SetConfig+0x2cc>)
 8083fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083fd0:	f003 0303 	and.w	r3, r3, #3
 8083fd4:	2b03      	cmp	r3, #3
 8083fd6:	d81b      	bhi.n	8084010 <UART_SetConfig+0xd0>
 8083fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8083fe0 <UART_SetConfig+0xa0>)
 8083fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8083fde:	bf00      	nop
 8083fe0:	08083ff1 	.word	0x08083ff1
 8083fe4:	08084001 	.word	0x08084001
 8083fe8:	08083ff9 	.word	0x08083ff9
 8083fec:	08084009 	.word	0x08084009
 8083ff0:	2301      	movs	r3, #1
 8083ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083ff6:	e116      	b.n	8084226 <UART_SetConfig+0x2e6>
 8083ff8:	2302      	movs	r3, #2
 8083ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083ffe:	e112      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084000:	2304      	movs	r3, #4
 8084002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8084006:	e10e      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084008:	2308      	movs	r3, #8
 808400a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808400e:	e10a      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084010:	2310      	movs	r3, #16
 8084012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8084016:	e106      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084018:	68fb      	ldr	r3, [r7, #12]
 808401a:	681b      	ldr	r3, [r3, #0]
 808401c:	4a7c      	ldr	r2, [pc, #496]	@ (8084210 <UART_SetConfig+0x2d0>)
 808401e:	4293      	cmp	r3, r2
 8084020:	d138      	bne.n	8084094 <UART_SetConfig+0x154>
 8084022:	4b7a      	ldr	r3, [pc, #488]	@ (808420c <UART_SetConfig+0x2cc>)
 8084024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8084028:	f003 030c 	and.w	r3, r3, #12
 808402c:	2b0c      	cmp	r3, #12
 808402e:	d82d      	bhi.n	808408c <UART_SetConfig+0x14c>
 8084030:	a201      	add	r2, pc, #4	@ (adr r2, 8084038 <UART_SetConfig+0xf8>)
 8084032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8084036:	bf00      	nop
 8084038:	0808406d 	.word	0x0808406d
 808403c:	0808408d 	.word	0x0808408d
 8084040:	0808408d 	.word	0x0808408d
 8084044:	0808408d 	.word	0x0808408d
 8084048:	0808407d 	.word	0x0808407d
 808404c:	0808408d 	.word	0x0808408d
 8084050:	0808408d 	.word	0x0808408d
 8084054:	0808408d 	.word	0x0808408d
 8084058:	08084075 	.word	0x08084075
 808405c:	0808408d 	.word	0x0808408d
 8084060:	0808408d 	.word	0x0808408d
 8084064:	0808408d 	.word	0x0808408d
 8084068:	08084085 	.word	0x08084085
 808406c:	2300      	movs	r3, #0
 808406e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8084072:	e0d8      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084074:	2302      	movs	r3, #2
 8084076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808407a:	e0d4      	b.n	8084226 <UART_SetConfig+0x2e6>
 808407c:	2304      	movs	r3, #4
 808407e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8084082:	e0d0      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084084:	2308      	movs	r3, #8
 8084086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808408a:	e0cc      	b.n	8084226 <UART_SetConfig+0x2e6>
 808408c:	2310      	movs	r3, #16
 808408e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8084092:	e0c8      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084094:	68fb      	ldr	r3, [r7, #12]
 8084096:	681b      	ldr	r3, [r3, #0]
 8084098:	4a5e      	ldr	r2, [pc, #376]	@ (8084214 <UART_SetConfig+0x2d4>)
 808409a:	4293      	cmp	r3, r2
 808409c:	d125      	bne.n	80840ea <UART_SetConfig+0x1aa>
 808409e:	4b5b      	ldr	r3, [pc, #364]	@ (808420c <UART_SetConfig+0x2cc>)
 80840a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80840a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80840a8:	2b30      	cmp	r3, #48	@ 0x30
 80840aa:	d016      	beq.n	80840da <UART_SetConfig+0x19a>
 80840ac:	2b30      	cmp	r3, #48	@ 0x30
 80840ae:	d818      	bhi.n	80840e2 <UART_SetConfig+0x1a2>
 80840b0:	2b20      	cmp	r3, #32
 80840b2:	d00a      	beq.n	80840ca <UART_SetConfig+0x18a>
 80840b4:	2b20      	cmp	r3, #32
 80840b6:	d814      	bhi.n	80840e2 <UART_SetConfig+0x1a2>
 80840b8:	2b00      	cmp	r3, #0
 80840ba:	d002      	beq.n	80840c2 <UART_SetConfig+0x182>
 80840bc:	2b10      	cmp	r3, #16
 80840be:	d008      	beq.n	80840d2 <UART_SetConfig+0x192>
 80840c0:	e00f      	b.n	80840e2 <UART_SetConfig+0x1a2>
 80840c2:	2300      	movs	r3, #0
 80840c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80840c8:	e0ad      	b.n	8084226 <UART_SetConfig+0x2e6>
 80840ca:	2302      	movs	r3, #2
 80840cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80840d0:	e0a9      	b.n	8084226 <UART_SetConfig+0x2e6>
 80840d2:	2304      	movs	r3, #4
 80840d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80840d8:	e0a5      	b.n	8084226 <UART_SetConfig+0x2e6>
 80840da:	2308      	movs	r3, #8
 80840dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80840e0:	e0a1      	b.n	8084226 <UART_SetConfig+0x2e6>
 80840e2:	2310      	movs	r3, #16
 80840e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80840e8:	e09d      	b.n	8084226 <UART_SetConfig+0x2e6>
 80840ea:	68fb      	ldr	r3, [r7, #12]
 80840ec:	681b      	ldr	r3, [r3, #0]
 80840ee:	4a4a      	ldr	r2, [pc, #296]	@ (8084218 <UART_SetConfig+0x2d8>)
 80840f0:	4293      	cmp	r3, r2
 80840f2:	d125      	bne.n	8084140 <UART_SetConfig+0x200>
 80840f4:	4b45      	ldr	r3, [pc, #276]	@ (808420c <UART_SetConfig+0x2cc>)
 80840f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80840fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80840fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8084100:	d016      	beq.n	8084130 <UART_SetConfig+0x1f0>
 8084102:	2bc0      	cmp	r3, #192	@ 0xc0
 8084104:	d818      	bhi.n	8084138 <UART_SetConfig+0x1f8>
 8084106:	2b80      	cmp	r3, #128	@ 0x80
 8084108:	d00a      	beq.n	8084120 <UART_SetConfig+0x1e0>
 808410a:	2b80      	cmp	r3, #128	@ 0x80
 808410c:	d814      	bhi.n	8084138 <UART_SetConfig+0x1f8>
 808410e:	2b00      	cmp	r3, #0
 8084110:	d002      	beq.n	8084118 <UART_SetConfig+0x1d8>
 8084112:	2b40      	cmp	r3, #64	@ 0x40
 8084114:	d008      	beq.n	8084128 <UART_SetConfig+0x1e8>
 8084116:	e00f      	b.n	8084138 <UART_SetConfig+0x1f8>
 8084118:	2300      	movs	r3, #0
 808411a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808411e:	e082      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084120:	2302      	movs	r3, #2
 8084122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8084126:	e07e      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084128:	2304      	movs	r3, #4
 808412a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808412e:	e07a      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084130:	2308      	movs	r3, #8
 8084132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8084136:	e076      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084138:	2310      	movs	r3, #16
 808413a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808413e:	e072      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084140:	68fb      	ldr	r3, [r7, #12]
 8084142:	681b      	ldr	r3, [r3, #0]
 8084144:	4a35      	ldr	r2, [pc, #212]	@ (808421c <UART_SetConfig+0x2dc>)
 8084146:	4293      	cmp	r3, r2
 8084148:	d12a      	bne.n	80841a0 <UART_SetConfig+0x260>
 808414a:	4b30      	ldr	r3, [pc, #192]	@ (808420c <UART_SetConfig+0x2cc>)
 808414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8084150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8084154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8084158:	d01a      	beq.n	8084190 <UART_SetConfig+0x250>
 808415a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 808415e:	d81b      	bhi.n	8084198 <UART_SetConfig+0x258>
 8084160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8084164:	d00c      	beq.n	8084180 <UART_SetConfig+0x240>
 8084166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 808416a:	d815      	bhi.n	8084198 <UART_SetConfig+0x258>
 808416c:	2b00      	cmp	r3, #0
 808416e:	d003      	beq.n	8084178 <UART_SetConfig+0x238>
 8084170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8084174:	d008      	beq.n	8084188 <UART_SetConfig+0x248>
 8084176:	e00f      	b.n	8084198 <UART_SetConfig+0x258>
 8084178:	2300      	movs	r3, #0
 808417a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808417e:	e052      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084180:	2302      	movs	r3, #2
 8084182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8084186:	e04e      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084188:	2304      	movs	r3, #4
 808418a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808418e:	e04a      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084190:	2308      	movs	r3, #8
 8084192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8084196:	e046      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084198:	2310      	movs	r3, #16
 808419a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808419e:	e042      	b.n	8084226 <UART_SetConfig+0x2e6>
 80841a0:	68fb      	ldr	r3, [r7, #12]
 80841a2:	681b      	ldr	r3, [r3, #0]
 80841a4:	4a17      	ldr	r2, [pc, #92]	@ (8084204 <UART_SetConfig+0x2c4>)
 80841a6:	4293      	cmp	r3, r2
 80841a8:	d13a      	bne.n	8084220 <UART_SetConfig+0x2e0>
 80841aa:	4b18      	ldr	r3, [pc, #96]	@ (808420c <UART_SetConfig+0x2cc>)
 80841ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80841b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80841b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80841b8:	d01a      	beq.n	80841f0 <UART_SetConfig+0x2b0>
 80841ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80841be:	d81b      	bhi.n	80841f8 <UART_SetConfig+0x2b8>
 80841c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80841c4:	d00c      	beq.n	80841e0 <UART_SetConfig+0x2a0>
 80841c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80841ca:	d815      	bhi.n	80841f8 <UART_SetConfig+0x2b8>
 80841cc:	2b00      	cmp	r3, #0
 80841ce:	d003      	beq.n	80841d8 <UART_SetConfig+0x298>
 80841d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80841d4:	d008      	beq.n	80841e8 <UART_SetConfig+0x2a8>
 80841d6:	e00f      	b.n	80841f8 <UART_SetConfig+0x2b8>
 80841d8:	2300      	movs	r3, #0
 80841da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80841de:	e022      	b.n	8084226 <UART_SetConfig+0x2e6>
 80841e0:	2302      	movs	r3, #2
 80841e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80841e6:	e01e      	b.n	8084226 <UART_SetConfig+0x2e6>
 80841e8:	2304      	movs	r3, #4
 80841ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80841ee:	e01a      	b.n	8084226 <UART_SetConfig+0x2e6>
 80841f0:	2308      	movs	r3, #8
 80841f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80841f6:	e016      	b.n	8084226 <UART_SetConfig+0x2e6>
 80841f8:	2310      	movs	r3, #16
 80841fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80841fe:	e012      	b.n	8084226 <UART_SetConfig+0x2e6>
 8084200:	efff69f3 	.word	0xefff69f3
 8084204:	40008000 	.word	0x40008000
 8084208:	40013800 	.word	0x40013800
 808420c:	40021000 	.word	0x40021000
 8084210:	40004400 	.word	0x40004400
 8084214:	40004800 	.word	0x40004800
 8084218:	40004c00 	.word	0x40004c00
 808421c:	40005000 	.word	0x40005000
 8084220:	2310      	movs	r3, #16
 8084222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8084226:	68fb      	ldr	r3, [r7, #12]
 8084228:	681b      	ldr	r3, [r3, #0]
 808422a:	4a9f      	ldr	r2, [pc, #636]	@ (80844a8 <UART_SetConfig+0x568>)
 808422c:	4293      	cmp	r3, r2
 808422e:	d17a      	bne.n	8084326 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8084230:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8084234:	2b08      	cmp	r3, #8
 8084236:	d824      	bhi.n	8084282 <UART_SetConfig+0x342>
 8084238:	a201      	add	r2, pc, #4	@ (adr r2, 8084240 <UART_SetConfig+0x300>)
 808423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 808423e:	bf00      	nop
 8084240:	08084265 	.word	0x08084265
 8084244:	08084283 	.word	0x08084283
 8084248:	0808426d 	.word	0x0808426d
 808424c:	08084283 	.word	0x08084283
 8084250:	08084273 	.word	0x08084273
 8084254:	08084283 	.word	0x08084283
 8084258:	08084283 	.word	0x08084283
 808425c:	08084283 	.word	0x08084283
 8084260:	0808427b 	.word	0x0808427b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8084264:	f7fe ff76 	bl	8083154 <HAL_RCC_GetPCLK1Freq>
 8084268:	61f8      	str	r0, [r7, #28]
        break;
 808426a:	e010      	b.n	808428e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 808426c:	4b8f      	ldr	r3, [pc, #572]	@ (80844ac <UART_SetConfig+0x56c>)
 808426e:	61fb      	str	r3, [r7, #28]
        break;
 8084270:	e00d      	b.n	808428e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8084272:	f7fe fed7 	bl	8083024 <HAL_RCC_GetSysClockFreq>
 8084276:	61f8      	str	r0, [r7, #28]
        break;
 8084278:	e009      	b.n	808428e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 808427a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 808427e:	61fb      	str	r3, [r7, #28]
        break;
 8084280:	e005      	b.n	808428e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8084282:	2300      	movs	r3, #0
 8084284:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8084286:	2301      	movs	r3, #1
 8084288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 808428c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 808428e:	69fb      	ldr	r3, [r7, #28]
 8084290:	2b00      	cmp	r3, #0
 8084292:	f000 80fb 	beq.w	808448c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8084296:	68fb      	ldr	r3, [r7, #12]
 8084298:	685a      	ldr	r2, [r3, #4]
 808429a:	4613      	mov	r3, r2
 808429c:	005b      	lsls	r3, r3, #1
 808429e:	4413      	add	r3, r2
 80842a0:	69fa      	ldr	r2, [r7, #28]
 80842a2:	429a      	cmp	r2, r3
 80842a4:	d305      	bcc.n	80842b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80842a6:	68fb      	ldr	r3, [r7, #12]
 80842a8:	685b      	ldr	r3, [r3, #4]
 80842aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80842ac:	69fa      	ldr	r2, [r7, #28]
 80842ae:	429a      	cmp	r2, r3
 80842b0:	d903      	bls.n	80842ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80842b2:	2301      	movs	r3, #1
 80842b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80842b8:	e0e8      	b.n	808448c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80842ba:	69fb      	ldr	r3, [r7, #28]
 80842bc:	2200      	movs	r2, #0
 80842be:	461c      	mov	r4, r3
 80842c0:	4615      	mov	r5, r2
 80842c2:	f04f 0200 	mov.w	r2, #0
 80842c6:	f04f 0300 	mov.w	r3, #0
 80842ca:	022b      	lsls	r3, r5, #8
 80842cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80842d0:	0222      	lsls	r2, r4, #8
 80842d2:	68f9      	ldr	r1, [r7, #12]
 80842d4:	6849      	ldr	r1, [r1, #4]
 80842d6:	0849      	lsrs	r1, r1, #1
 80842d8:	2000      	movs	r0, #0
 80842da:	4688      	mov	r8, r1
 80842dc:	4681      	mov	r9, r0
 80842de:	eb12 0a08 	adds.w	sl, r2, r8
 80842e2:	eb43 0b09 	adc.w	fp, r3, r9
 80842e6:	68fb      	ldr	r3, [r7, #12]
 80842e8:	685b      	ldr	r3, [r3, #4]
 80842ea:	2200      	movs	r2, #0
 80842ec:	603b      	str	r3, [r7, #0]
 80842ee:	607a      	str	r2, [r7, #4]
 80842f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80842f4:	4650      	mov	r0, sl
 80842f6:	4659      	mov	r1, fp
 80842f8:	f7fb ff80 	bl	80801fc <__aeabi_uldivmod>
 80842fc:	4602      	mov	r2, r0
 80842fe:	460b      	mov	r3, r1
 8084300:	4613      	mov	r3, r2
 8084302:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8084304:	69bb      	ldr	r3, [r7, #24]
 8084306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 808430a:	d308      	bcc.n	808431e <UART_SetConfig+0x3de>
 808430c:	69bb      	ldr	r3, [r7, #24]
 808430e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8084312:	d204      	bcs.n	808431e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8084314:	68fb      	ldr	r3, [r7, #12]
 8084316:	681b      	ldr	r3, [r3, #0]
 8084318:	69ba      	ldr	r2, [r7, #24]
 808431a:	60da      	str	r2, [r3, #12]
 808431c:	e0b6      	b.n	808448c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 808431e:	2301      	movs	r3, #1
 8084320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8084324:	e0b2      	b.n	808448c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8084326:	68fb      	ldr	r3, [r7, #12]
 8084328:	69db      	ldr	r3, [r3, #28]
 808432a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 808432e:	d15e      	bne.n	80843ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8084330:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8084334:	2b08      	cmp	r3, #8
 8084336:	d828      	bhi.n	808438a <UART_SetConfig+0x44a>
 8084338:	a201      	add	r2, pc, #4	@ (adr r2, 8084340 <UART_SetConfig+0x400>)
 808433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 808433e:	bf00      	nop
 8084340:	08084365 	.word	0x08084365
 8084344:	0808436d 	.word	0x0808436d
 8084348:	08084375 	.word	0x08084375
 808434c:	0808438b 	.word	0x0808438b
 8084350:	0808437b 	.word	0x0808437b
 8084354:	0808438b 	.word	0x0808438b
 8084358:	0808438b 	.word	0x0808438b
 808435c:	0808438b 	.word	0x0808438b
 8084360:	08084383 	.word	0x08084383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8084364:	f7fe fef6 	bl	8083154 <HAL_RCC_GetPCLK1Freq>
 8084368:	61f8      	str	r0, [r7, #28]
        break;
 808436a:	e014      	b.n	8084396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 808436c:	f7fe ff08 	bl	8083180 <HAL_RCC_GetPCLK2Freq>
 8084370:	61f8      	str	r0, [r7, #28]
        break;
 8084372:	e010      	b.n	8084396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8084374:	4b4d      	ldr	r3, [pc, #308]	@ (80844ac <UART_SetConfig+0x56c>)
 8084376:	61fb      	str	r3, [r7, #28]
        break;
 8084378:	e00d      	b.n	8084396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 808437a:	f7fe fe53 	bl	8083024 <HAL_RCC_GetSysClockFreq>
 808437e:	61f8      	str	r0, [r7, #28]
        break;
 8084380:	e009      	b.n	8084396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8084382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8084386:	61fb      	str	r3, [r7, #28]
        break;
 8084388:	e005      	b.n	8084396 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 808438a:	2300      	movs	r3, #0
 808438c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 808438e:	2301      	movs	r3, #1
 8084390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8084394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8084396:	69fb      	ldr	r3, [r7, #28]
 8084398:	2b00      	cmp	r3, #0
 808439a:	d077      	beq.n	808448c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 808439c:	69fb      	ldr	r3, [r7, #28]
 808439e:	005a      	lsls	r2, r3, #1
 80843a0:	68fb      	ldr	r3, [r7, #12]
 80843a2:	685b      	ldr	r3, [r3, #4]
 80843a4:	085b      	lsrs	r3, r3, #1
 80843a6:	441a      	add	r2, r3
 80843a8:	68fb      	ldr	r3, [r7, #12]
 80843aa:	685b      	ldr	r3, [r3, #4]
 80843ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80843b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80843b2:	69bb      	ldr	r3, [r7, #24]
 80843b4:	2b0f      	cmp	r3, #15
 80843b6:	d916      	bls.n	80843e6 <UART_SetConfig+0x4a6>
 80843b8:	69bb      	ldr	r3, [r7, #24]
 80843ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80843be:	d212      	bcs.n	80843e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80843c0:	69bb      	ldr	r3, [r7, #24]
 80843c2:	b29b      	uxth	r3, r3
 80843c4:	f023 030f 	bic.w	r3, r3, #15
 80843c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80843ca:	69bb      	ldr	r3, [r7, #24]
 80843cc:	085b      	lsrs	r3, r3, #1
 80843ce:	b29b      	uxth	r3, r3
 80843d0:	f003 0307 	and.w	r3, r3, #7
 80843d4:	b29a      	uxth	r2, r3
 80843d6:	8afb      	ldrh	r3, [r7, #22]
 80843d8:	4313      	orrs	r3, r2
 80843da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80843dc:	68fb      	ldr	r3, [r7, #12]
 80843de:	681b      	ldr	r3, [r3, #0]
 80843e0:	8afa      	ldrh	r2, [r7, #22]
 80843e2:	60da      	str	r2, [r3, #12]
 80843e4:	e052      	b.n	808448c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80843e6:	2301      	movs	r3, #1
 80843e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80843ec:	e04e      	b.n	808448c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80843ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80843f2:	2b08      	cmp	r3, #8
 80843f4:	d827      	bhi.n	8084446 <UART_SetConfig+0x506>
 80843f6:	a201      	add	r2, pc, #4	@ (adr r2, 80843fc <UART_SetConfig+0x4bc>)
 80843f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80843fc:	08084421 	.word	0x08084421
 8084400:	08084429 	.word	0x08084429
 8084404:	08084431 	.word	0x08084431
 8084408:	08084447 	.word	0x08084447
 808440c:	08084437 	.word	0x08084437
 8084410:	08084447 	.word	0x08084447
 8084414:	08084447 	.word	0x08084447
 8084418:	08084447 	.word	0x08084447
 808441c:	0808443f 	.word	0x0808443f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8084420:	f7fe fe98 	bl	8083154 <HAL_RCC_GetPCLK1Freq>
 8084424:	61f8      	str	r0, [r7, #28]
        break;
 8084426:	e014      	b.n	8084452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8084428:	f7fe feaa 	bl	8083180 <HAL_RCC_GetPCLK2Freq>
 808442c:	61f8      	str	r0, [r7, #28]
        break;
 808442e:	e010      	b.n	8084452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8084430:	4b1e      	ldr	r3, [pc, #120]	@ (80844ac <UART_SetConfig+0x56c>)
 8084432:	61fb      	str	r3, [r7, #28]
        break;
 8084434:	e00d      	b.n	8084452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8084436:	f7fe fdf5 	bl	8083024 <HAL_RCC_GetSysClockFreq>
 808443a:	61f8      	str	r0, [r7, #28]
        break;
 808443c:	e009      	b.n	8084452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 808443e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8084442:	61fb      	str	r3, [r7, #28]
        break;
 8084444:	e005      	b.n	8084452 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8084446:	2300      	movs	r3, #0
 8084448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 808444a:	2301      	movs	r3, #1
 808444c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8084450:	bf00      	nop
    }

    if (pclk != 0U)
 8084452:	69fb      	ldr	r3, [r7, #28]
 8084454:	2b00      	cmp	r3, #0
 8084456:	d019      	beq.n	808448c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8084458:	68fb      	ldr	r3, [r7, #12]
 808445a:	685b      	ldr	r3, [r3, #4]
 808445c:	085a      	lsrs	r2, r3, #1
 808445e:	69fb      	ldr	r3, [r7, #28]
 8084460:	441a      	add	r2, r3
 8084462:	68fb      	ldr	r3, [r7, #12]
 8084464:	685b      	ldr	r3, [r3, #4]
 8084466:	fbb2 f3f3 	udiv	r3, r2, r3
 808446a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 808446c:	69bb      	ldr	r3, [r7, #24]
 808446e:	2b0f      	cmp	r3, #15
 8084470:	d909      	bls.n	8084486 <UART_SetConfig+0x546>
 8084472:	69bb      	ldr	r3, [r7, #24]
 8084474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8084478:	d205      	bcs.n	8084486 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 808447a:	69bb      	ldr	r3, [r7, #24]
 808447c:	b29a      	uxth	r2, r3
 808447e:	68fb      	ldr	r3, [r7, #12]
 8084480:	681b      	ldr	r3, [r3, #0]
 8084482:	60da      	str	r2, [r3, #12]
 8084484:	e002      	b.n	808448c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8084486:	2301      	movs	r3, #1
 8084488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 808448c:	68fb      	ldr	r3, [r7, #12]
 808448e:	2200      	movs	r2, #0
 8084490:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8084492:	68fb      	ldr	r3, [r7, #12]
 8084494:	2200      	movs	r2, #0
 8084496:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8084498:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 808449c:	4618      	mov	r0, r3
 808449e:	3728      	adds	r7, #40	@ 0x28
 80844a0:	46bd      	mov	sp, r7
 80844a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80844a6:	bf00      	nop
 80844a8:	40008000 	.word	0x40008000
 80844ac:	00f42400 	.word	0x00f42400

080844b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80844b0:	b480      	push	{r7}
 80844b2:	b083      	sub	sp, #12
 80844b4:	af00      	add	r7, sp, #0
 80844b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80844b8:	687b      	ldr	r3, [r7, #4]
 80844ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80844bc:	f003 0308 	and.w	r3, r3, #8
 80844c0:	2b00      	cmp	r3, #0
 80844c2:	d00a      	beq.n	80844da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80844c4:	687b      	ldr	r3, [r7, #4]
 80844c6:	681b      	ldr	r3, [r3, #0]
 80844c8:	685b      	ldr	r3, [r3, #4]
 80844ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80844ce:	687b      	ldr	r3, [r7, #4]
 80844d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80844d2:	687b      	ldr	r3, [r7, #4]
 80844d4:	681b      	ldr	r3, [r3, #0]
 80844d6:	430a      	orrs	r2, r1
 80844d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80844da:	687b      	ldr	r3, [r7, #4]
 80844dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80844de:	f003 0301 	and.w	r3, r3, #1
 80844e2:	2b00      	cmp	r3, #0
 80844e4:	d00a      	beq.n	80844fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80844e6:	687b      	ldr	r3, [r7, #4]
 80844e8:	681b      	ldr	r3, [r3, #0]
 80844ea:	685b      	ldr	r3, [r3, #4]
 80844ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80844f0:	687b      	ldr	r3, [r7, #4]
 80844f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80844f4:	687b      	ldr	r3, [r7, #4]
 80844f6:	681b      	ldr	r3, [r3, #0]
 80844f8:	430a      	orrs	r2, r1
 80844fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80844fc:	687b      	ldr	r3, [r7, #4]
 80844fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8084500:	f003 0302 	and.w	r3, r3, #2
 8084504:	2b00      	cmp	r3, #0
 8084506:	d00a      	beq.n	808451e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8084508:	687b      	ldr	r3, [r7, #4]
 808450a:	681b      	ldr	r3, [r3, #0]
 808450c:	685b      	ldr	r3, [r3, #4]
 808450e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8084512:	687b      	ldr	r3, [r7, #4]
 8084514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8084516:	687b      	ldr	r3, [r7, #4]
 8084518:	681b      	ldr	r3, [r3, #0]
 808451a:	430a      	orrs	r2, r1
 808451c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 808451e:	687b      	ldr	r3, [r7, #4]
 8084520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8084522:	f003 0304 	and.w	r3, r3, #4
 8084526:	2b00      	cmp	r3, #0
 8084528:	d00a      	beq.n	8084540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 808452a:	687b      	ldr	r3, [r7, #4]
 808452c:	681b      	ldr	r3, [r3, #0]
 808452e:	685b      	ldr	r3, [r3, #4]
 8084530:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8084534:	687b      	ldr	r3, [r7, #4]
 8084536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8084538:	687b      	ldr	r3, [r7, #4]
 808453a:	681b      	ldr	r3, [r3, #0]
 808453c:	430a      	orrs	r2, r1
 808453e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8084540:	687b      	ldr	r3, [r7, #4]
 8084542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8084544:	f003 0310 	and.w	r3, r3, #16
 8084548:	2b00      	cmp	r3, #0
 808454a:	d00a      	beq.n	8084562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 808454c:	687b      	ldr	r3, [r7, #4]
 808454e:	681b      	ldr	r3, [r3, #0]
 8084550:	689b      	ldr	r3, [r3, #8]
 8084552:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8084556:	687b      	ldr	r3, [r7, #4]
 8084558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 808455a:	687b      	ldr	r3, [r7, #4]
 808455c:	681b      	ldr	r3, [r3, #0]
 808455e:	430a      	orrs	r2, r1
 8084560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8084562:	687b      	ldr	r3, [r7, #4]
 8084564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8084566:	f003 0320 	and.w	r3, r3, #32
 808456a:	2b00      	cmp	r3, #0
 808456c:	d00a      	beq.n	8084584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 808456e:	687b      	ldr	r3, [r7, #4]
 8084570:	681b      	ldr	r3, [r3, #0]
 8084572:	689b      	ldr	r3, [r3, #8]
 8084574:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8084578:	687b      	ldr	r3, [r7, #4]
 808457a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 808457c:	687b      	ldr	r3, [r7, #4]
 808457e:	681b      	ldr	r3, [r3, #0]
 8084580:	430a      	orrs	r2, r1
 8084582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8084584:	687b      	ldr	r3, [r7, #4]
 8084586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8084588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 808458c:	2b00      	cmp	r3, #0
 808458e:	d01a      	beq.n	80845c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8084590:	687b      	ldr	r3, [r7, #4]
 8084592:	681b      	ldr	r3, [r3, #0]
 8084594:	685b      	ldr	r3, [r3, #4]
 8084596:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 808459a:	687b      	ldr	r3, [r7, #4]
 808459c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 808459e:	687b      	ldr	r3, [r7, #4]
 80845a0:	681b      	ldr	r3, [r3, #0]
 80845a2:	430a      	orrs	r2, r1
 80845a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80845a6:	687b      	ldr	r3, [r7, #4]
 80845a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80845aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80845ae:	d10a      	bne.n	80845c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80845b0:	687b      	ldr	r3, [r7, #4]
 80845b2:	681b      	ldr	r3, [r3, #0]
 80845b4:	685b      	ldr	r3, [r3, #4]
 80845b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80845ba:	687b      	ldr	r3, [r7, #4]
 80845bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80845be:	687b      	ldr	r3, [r7, #4]
 80845c0:	681b      	ldr	r3, [r3, #0]
 80845c2:	430a      	orrs	r2, r1
 80845c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80845c6:	687b      	ldr	r3, [r7, #4]
 80845c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80845ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80845ce:	2b00      	cmp	r3, #0
 80845d0:	d00a      	beq.n	80845e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80845d2:	687b      	ldr	r3, [r7, #4]
 80845d4:	681b      	ldr	r3, [r3, #0]
 80845d6:	685b      	ldr	r3, [r3, #4]
 80845d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80845dc:	687b      	ldr	r3, [r7, #4]
 80845de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80845e0:	687b      	ldr	r3, [r7, #4]
 80845e2:	681b      	ldr	r3, [r3, #0]
 80845e4:	430a      	orrs	r2, r1
 80845e6:	605a      	str	r2, [r3, #4]
  }
}
 80845e8:	bf00      	nop
 80845ea:	370c      	adds	r7, #12
 80845ec:	46bd      	mov	sp, r7
 80845ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80845f2:	4770      	bx	lr

080845f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80845f4:	b580      	push	{r7, lr}
 80845f6:	b098      	sub	sp, #96	@ 0x60
 80845f8:	af02      	add	r7, sp, #8
 80845fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80845fc:	687b      	ldr	r3, [r7, #4]
 80845fe:	2200      	movs	r2, #0
 8084600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8084604:	f7fc ff90 	bl	8081528 <HAL_GetTick>
 8084608:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 808460a:	687b      	ldr	r3, [r7, #4]
 808460c:	681b      	ldr	r3, [r3, #0]
 808460e:	681b      	ldr	r3, [r3, #0]
 8084610:	f003 0308 	and.w	r3, r3, #8
 8084614:	2b08      	cmp	r3, #8
 8084616:	d12e      	bne.n	8084676 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8084618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 808461c:	9300      	str	r3, [sp, #0]
 808461e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8084620:	2200      	movs	r2, #0
 8084622:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8084626:	6878      	ldr	r0, [r7, #4]
 8084628:	f000 f88c 	bl	8084744 <UART_WaitOnFlagUntilTimeout>
 808462c:	4603      	mov	r3, r0
 808462e:	2b00      	cmp	r3, #0
 8084630:	d021      	beq.n	8084676 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8084632:	687b      	ldr	r3, [r7, #4]
 8084634:	681b      	ldr	r3, [r3, #0]
 8084636:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8084638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 808463a:	e853 3f00 	ldrex	r3, [r3]
 808463e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8084640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8084642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8084646:	653b      	str	r3, [r7, #80]	@ 0x50
 8084648:	687b      	ldr	r3, [r7, #4]
 808464a:	681b      	ldr	r3, [r3, #0]
 808464c:	461a      	mov	r2, r3
 808464e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8084650:	647b      	str	r3, [r7, #68]	@ 0x44
 8084652:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8084654:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8084656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8084658:	e841 2300 	strex	r3, r2, [r1]
 808465c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 808465e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8084660:	2b00      	cmp	r3, #0
 8084662:	d1e6      	bne.n	8084632 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8084664:	687b      	ldr	r3, [r7, #4]
 8084666:	2220      	movs	r2, #32
 8084668:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 808466a:	687b      	ldr	r3, [r7, #4]
 808466c:	2200      	movs	r2, #0
 808466e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8084672:	2303      	movs	r3, #3
 8084674:	e062      	b.n	808473c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8084676:	687b      	ldr	r3, [r7, #4]
 8084678:	681b      	ldr	r3, [r3, #0]
 808467a:	681b      	ldr	r3, [r3, #0]
 808467c:	f003 0304 	and.w	r3, r3, #4
 8084680:	2b04      	cmp	r3, #4
 8084682:	d149      	bne.n	8084718 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8084684:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8084688:	9300      	str	r3, [sp, #0]
 808468a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 808468c:	2200      	movs	r2, #0
 808468e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8084692:	6878      	ldr	r0, [r7, #4]
 8084694:	f000 f856 	bl	8084744 <UART_WaitOnFlagUntilTimeout>
 8084698:	4603      	mov	r3, r0
 808469a:	2b00      	cmp	r3, #0
 808469c:	d03c      	beq.n	8084718 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 808469e:	687b      	ldr	r3, [r7, #4]
 80846a0:	681b      	ldr	r3, [r3, #0]
 80846a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80846a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80846a6:	e853 3f00 	ldrex	r3, [r3]
 80846aa:	623b      	str	r3, [r7, #32]
   return(result);
 80846ac:	6a3b      	ldr	r3, [r7, #32]
 80846ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80846b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80846b4:	687b      	ldr	r3, [r7, #4]
 80846b6:	681b      	ldr	r3, [r3, #0]
 80846b8:	461a      	mov	r2, r3
 80846ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80846bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80846be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80846c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80846c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80846c4:	e841 2300 	strex	r3, r2, [r1]
 80846c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80846ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80846cc:	2b00      	cmp	r3, #0
 80846ce:	d1e6      	bne.n	808469e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80846d0:	687b      	ldr	r3, [r7, #4]
 80846d2:	681b      	ldr	r3, [r3, #0]
 80846d4:	3308      	adds	r3, #8
 80846d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80846d8:	693b      	ldr	r3, [r7, #16]
 80846da:	e853 3f00 	ldrex	r3, [r3]
 80846de:	60fb      	str	r3, [r7, #12]
   return(result);
 80846e0:	68fb      	ldr	r3, [r7, #12]
 80846e2:	f023 0301 	bic.w	r3, r3, #1
 80846e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80846e8:	687b      	ldr	r3, [r7, #4]
 80846ea:	681b      	ldr	r3, [r3, #0]
 80846ec:	3308      	adds	r3, #8
 80846ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80846f0:	61fa      	str	r2, [r7, #28]
 80846f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80846f4:	69b9      	ldr	r1, [r7, #24]
 80846f6:	69fa      	ldr	r2, [r7, #28]
 80846f8:	e841 2300 	strex	r3, r2, [r1]
 80846fc:	617b      	str	r3, [r7, #20]
   return(result);
 80846fe:	697b      	ldr	r3, [r7, #20]
 8084700:	2b00      	cmp	r3, #0
 8084702:	d1e5      	bne.n	80846d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8084704:	687b      	ldr	r3, [r7, #4]
 8084706:	2220      	movs	r2, #32
 8084708:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 808470c:	687b      	ldr	r3, [r7, #4]
 808470e:	2200      	movs	r2, #0
 8084710:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8084714:	2303      	movs	r3, #3
 8084716:	e011      	b.n	808473c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8084718:	687b      	ldr	r3, [r7, #4]
 808471a:	2220      	movs	r2, #32
 808471c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 808471e:	687b      	ldr	r3, [r7, #4]
 8084720:	2220      	movs	r2, #32
 8084722:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8084726:	687b      	ldr	r3, [r7, #4]
 8084728:	2200      	movs	r2, #0
 808472a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 808472c:	687b      	ldr	r3, [r7, #4]
 808472e:	2200      	movs	r2, #0
 8084730:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8084732:	687b      	ldr	r3, [r7, #4]
 8084734:	2200      	movs	r2, #0
 8084736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 808473a:	2300      	movs	r3, #0
}
 808473c:	4618      	mov	r0, r3
 808473e:	3758      	adds	r7, #88	@ 0x58
 8084740:	46bd      	mov	sp, r7
 8084742:	bd80      	pop	{r7, pc}

08084744 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8084744:	b580      	push	{r7, lr}
 8084746:	b084      	sub	sp, #16
 8084748:	af00      	add	r7, sp, #0
 808474a:	60f8      	str	r0, [r7, #12]
 808474c:	60b9      	str	r1, [r7, #8]
 808474e:	603b      	str	r3, [r7, #0]
 8084750:	4613      	mov	r3, r2
 8084752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8084754:	e04f      	b.n	80847f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8084756:	69bb      	ldr	r3, [r7, #24]
 8084758:	f1b3 3fff 	cmp.w	r3, #4294967295
 808475c:	d04b      	beq.n	80847f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 808475e:	f7fc fee3 	bl	8081528 <HAL_GetTick>
 8084762:	4602      	mov	r2, r0
 8084764:	683b      	ldr	r3, [r7, #0]
 8084766:	1ad3      	subs	r3, r2, r3
 8084768:	69ba      	ldr	r2, [r7, #24]
 808476a:	429a      	cmp	r2, r3
 808476c:	d302      	bcc.n	8084774 <UART_WaitOnFlagUntilTimeout+0x30>
 808476e:	69bb      	ldr	r3, [r7, #24]
 8084770:	2b00      	cmp	r3, #0
 8084772:	d101      	bne.n	8084778 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8084774:	2303      	movs	r3, #3
 8084776:	e04e      	b.n	8084816 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8084778:	68fb      	ldr	r3, [r7, #12]
 808477a:	681b      	ldr	r3, [r3, #0]
 808477c:	681b      	ldr	r3, [r3, #0]
 808477e:	f003 0304 	and.w	r3, r3, #4
 8084782:	2b00      	cmp	r3, #0
 8084784:	d037      	beq.n	80847f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8084786:	68bb      	ldr	r3, [r7, #8]
 8084788:	2b80      	cmp	r3, #128	@ 0x80
 808478a:	d034      	beq.n	80847f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 808478c:	68bb      	ldr	r3, [r7, #8]
 808478e:	2b40      	cmp	r3, #64	@ 0x40
 8084790:	d031      	beq.n	80847f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8084792:	68fb      	ldr	r3, [r7, #12]
 8084794:	681b      	ldr	r3, [r3, #0]
 8084796:	69db      	ldr	r3, [r3, #28]
 8084798:	f003 0308 	and.w	r3, r3, #8
 808479c:	2b08      	cmp	r3, #8
 808479e:	d110      	bne.n	80847c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80847a0:	68fb      	ldr	r3, [r7, #12]
 80847a2:	681b      	ldr	r3, [r3, #0]
 80847a4:	2208      	movs	r2, #8
 80847a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80847a8:	68f8      	ldr	r0, [r7, #12]
 80847aa:	f000 f838 	bl	808481e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80847ae:	68fb      	ldr	r3, [r7, #12]
 80847b0:	2208      	movs	r2, #8
 80847b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80847b6:	68fb      	ldr	r3, [r7, #12]
 80847b8:	2200      	movs	r2, #0
 80847ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80847be:	2301      	movs	r3, #1
 80847c0:	e029      	b.n	8084816 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80847c2:	68fb      	ldr	r3, [r7, #12]
 80847c4:	681b      	ldr	r3, [r3, #0]
 80847c6:	69db      	ldr	r3, [r3, #28]
 80847c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80847cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80847d0:	d111      	bne.n	80847f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80847d2:	68fb      	ldr	r3, [r7, #12]
 80847d4:	681b      	ldr	r3, [r3, #0]
 80847d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80847da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80847dc:	68f8      	ldr	r0, [r7, #12]
 80847de:	f000 f81e 	bl	808481e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80847e2:	68fb      	ldr	r3, [r7, #12]
 80847e4:	2220      	movs	r2, #32
 80847e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80847ea:	68fb      	ldr	r3, [r7, #12]
 80847ec:	2200      	movs	r2, #0
 80847ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80847f2:	2303      	movs	r3, #3
 80847f4:	e00f      	b.n	8084816 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80847f6:	68fb      	ldr	r3, [r7, #12]
 80847f8:	681b      	ldr	r3, [r3, #0]
 80847fa:	69da      	ldr	r2, [r3, #28]
 80847fc:	68bb      	ldr	r3, [r7, #8]
 80847fe:	4013      	ands	r3, r2
 8084800:	68ba      	ldr	r2, [r7, #8]
 8084802:	429a      	cmp	r2, r3
 8084804:	bf0c      	ite	eq
 8084806:	2301      	moveq	r3, #1
 8084808:	2300      	movne	r3, #0
 808480a:	b2db      	uxtb	r3, r3
 808480c:	461a      	mov	r2, r3
 808480e:	79fb      	ldrb	r3, [r7, #7]
 8084810:	429a      	cmp	r2, r3
 8084812:	d0a0      	beq.n	8084756 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8084814:	2300      	movs	r3, #0
}
 8084816:	4618      	mov	r0, r3
 8084818:	3710      	adds	r7, #16
 808481a:	46bd      	mov	sp, r7
 808481c:	bd80      	pop	{r7, pc}

0808481e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 808481e:	b480      	push	{r7}
 8084820:	b095      	sub	sp, #84	@ 0x54
 8084822:	af00      	add	r7, sp, #0
 8084824:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8084826:	687b      	ldr	r3, [r7, #4]
 8084828:	681b      	ldr	r3, [r3, #0]
 808482a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 808482c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 808482e:	e853 3f00 	ldrex	r3, [r3]
 8084832:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8084834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8084836:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 808483a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 808483c:	687b      	ldr	r3, [r7, #4]
 808483e:	681b      	ldr	r3, [r3, #0]
 8084840:	461a      	mov	r2, r3
 8084842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8084844:	643b      	str	r3, [r7, #64]	@ 0x40
 8084846:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8084848:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 808484a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 808484c:	e841 2300 	strex	r3, r2, [r1]
 8084850:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8084852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8084854:	2b00      	cmp	r3, #0
 8084856:	d1e6      	bne.n	8084826 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8084858:	687b      	ldr	r3, [r7, #4]
 808485a:	681b      	ldr	r3, [r3, #0]
 808485c:	3308      	adds	r3, #8
 808485e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8084860:	6a3b      	ldr	r3, [r7, #32]
 8084862:	e853 3f00 	ldrex	r3, [r3]
 8084866:	61fb      	str	r3, [r7, #28]
   return(result);
 8084868:	69fb      	ldr	r3, [r7, #28]
 808486a:	f023 0301 	bic.w	r3, r3, #1
 808486e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8084870:	687b      	ldr	r3, [r7, #4]
 8084872:	681b      	ldr	r3, [r3, #0]
 8084874:	3308      	adds	r3, #8
 8084876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8084878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 808487a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 808487c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 808487e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8084880:	e841 2300 	strex	r3, r2, [r1]
 8084884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8084886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8084888:	2b00      	cmp	r3, #0
 808488a:	d1e5      	bne.n	8084858 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 808488c:	687b      	ldr	r3, [r7, #4]
 808488e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8084890:	2b01      	cmp	r3, #1
 8084892:	d118      	bne.n	80848c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8084894:	687b      	ldr	r3, [r7, #4]
 8084896:	681b      	ldr	r3, [r3, #0]
 8084898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 808489a:	68fb      	ldr	r3, [r7, #12]
 808489c:	e853 3f00 	ldrex	r3, [r3]
 80848a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80848a2:	68bb      	ldr	r3, [r7, #8]
 80848a4:	f023 0310 	bic.w	r3, r3, #16
 80848a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80848aa:	687b      	ldr	r3, [r7, #4]
 80848ac:	681b      	ldr	r3, [r3, #0]
 80848ae:	461a      	mov	r2, r3
 80848b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80848b2:	61bb      	str	r3, [r7, #24]
 80848b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80848b6:	6979      	ldr	r1, [r7, #20]
 80848b8:	69ba      	ldr	r2, [r7, #24]
 80848ba:	e841 2300 	strex	r3, r2, [r1]
 80848be:	613b      	str	r3, [r7, #16]
   return(result);
 80848c0:	693b      	ldr	r3, [r7, #16]
 80848c2:	2b00      	cmp	r3, #0
 80848c4:	d1e6      	bne.n	8084894 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80848c6:	687b      	ldr	r3, [r7, #4]
 80848c8:	2220      	movs	r2, #32
 80848ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80848ce:	687b      	ldr	r3, [r7, #4]
 80848d0:	2200      	movs	r2, #0
 80848d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80848d4:	687b      	ldr	r3, [r7, #4]
 80848d6:	2200      	movs	r2, #0
 80848d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80848da:	bf00      	nop
 80848dc:	3754      	adds	r7, #84	@ 0x54
 80848de:	46bd      	mov	sp, r7
 80848e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80848e4:	4770      	bx	lr

080848e6 <memset>:
 80848e6:	4402      	add	r2, r0
 80848e8:	4603      	mov	r3, r0
 80848ea:	4293      	cmp	r3, r2
 80848ec:	d100      	bne.n	80848f0 <memset+0xa>
 80848ee:	4770      	bx	lr
 80848f0:	f803 1b01 	strb.w	r1, [r3], #1
 80848f4:	e7f9      	b.n	80848ea <memset+0x4>
	...

080848f8 <__libc_init_array>:
 80848f8:	b570      	push	{r4, r5, r6, lr}
 80848fa:	4d0d      	ldr	r5, [pc, #52]	@ (8084930 <__libc_init_array+0x38>)
 80848fc:	4c0d      	ldr	r4, [pc, #52]	@ (8084934 <__libc_init_array+0x3c>)
 80848fe:	1b64      	subs	r4, r4, r5
 8084900:	10a4      	asrs	r4, r4, #2
 8084902:	2600      	movs	r6, #0
 8084904:	42a6      	cmp	r6, r4
 8084906:	d109      	bne.n	808491c <__libc_init_array+0x24>
 8084908:	4d0b      	ldr	r5, [pc, #44]	@ (8084938 <__libc_init_array+0x40>)
 808490a:	4c0c      	ldr	r4, [pc, #48]	@ (808493c <__libc_init_array+0x44>)
 808490c:	f000 f818 	bl	8084940 <_init>
 8084910:	1b64      	subs	r4, r4, r5
 8084912:	10a4      	asrs	r4, r4, #2
 8084914:	2600      	movs	r6, #0
 8084916:	42a6      	cmp	r6, r4
 8084918:	d105      	bne.n	8084926 <__libc_init_array+0x2e>
 808491a:	bd70      	pop	{r4, r5, r6, pc}
 808491c:	f855 3b04 	ldr.w	r3, [r5], #4
 8084920:	4798      	blx	r3
 8084922:	3601      	adds	r6, #1
 8084924:	e7ee      	b.n	8084904 <__libc_init_array+0xc>
 8084926:	f855 3b04 	ldr.w	r3, [r5], #4
 808492a:	4798      	blx	r3
 808492c:	3601      	adds	r6, #1
 808492e:	e7f2      	b.n	8084916 <__libc_init_array+0x1e>
 8084930:	08084b70 	.word	0x08084b70
 8084934:	08084b70 	.word	0x08084b70
 8084938:	08084b70 	.word	0x08084b70
 808493c:	08084b74 	.word	0x08084b74

08084940 <_init>:
 8084940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084942:	bf00      	nop
 8084944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8084946:	bc08      	pop	{r3}
 8084948:	469e      	mov	lr, r3
 808494a:	4770      	bx	lr

0808494c <_fini>:
 808494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808494e:	bf00      	nop
 8084950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8084952:	bc08      	pop	{r3}
 8084954:	469e      	mov	lr, r3
 8084956:	4770      	bx	lr
